
TIMERa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a8  080073a8  0002028c  2**0
                  CONTENTS
  4 .ARM          00000000  080073a8  080073a8  0002028c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073a8  080073a8  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  080073b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000028c  0800763c  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0800763c  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e68f  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffd  00000000  00000000  0002e943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000318c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010370  00000000  00000000  00032748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126b0  00000000  00000000  00042ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063e88  00000000  00000000  00055168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8ff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d4  00000000  00000000  000b9040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000028c 	.word	0x2000028c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d30 	.word	0x08006d30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000290 	.word	0x20000290
 8000104:	08006d30 	.word	0x08006d30

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af02      	add	r7, sp, #8
int main(void)
 80003fa:	2310      	movs	r3, #16
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000400:	f003 fd8c 	bl	8003f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000404:	f003 f9bc 	bl	8003780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000408:	f003 fb70 	bl	8003aec <MX_GPIO_Init>
  MX_SPI1_Init();
 800040c:	f003 fac8 	bl	80039a0 <MX_SPI1_Init>
  MX_RTC_Init();
 8000410:	f003 fa64 	bl	80038dc <MX_RTC_Init>
  MX_TIM1_Init();
 8000414:	f003 fb02 	bl	8003a1c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000418:	f003 fa20 	bl	800385c <MX_I2C1_Init>
    /* USER CODE BEGIN 3 */




	  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   // encoder start
 800041c:	4bd8      	ldr	r3, [pc, #864]	; (8000780 <main+0x38c>)
 800041e:	213c      	movs	r1, #60	; 0x3c
 8000420:	0018      	movs	r0, r3
 8000422:	f006 fad3 	bl	80069cc <HAL_TIM_Encoder_Start>
	  READ_EEPROM_PROGRAM_DATA();
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	469c      	mov	ip, r3
 800042a:	f000 fa4b 	bl	80008c4 <READ_EEPROM_PROGRAM_DATA.0>

	  LCD_ON();
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	469c      	mov	ip, r3
 8000432:	f000 fb15 	bl	8000a60 <LCD_ON.1>
	  LCD_CLEAR();
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	469c      	mov	ip, r3
 800043a:	f000 fb67 	bl	8000b0c <LCD_CLEAR.10>
	  LCD_SEND_PICTURE(0, 0, 84, 48, intro);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4ad0      	ldr	r2, [pc, #832]	; (8000784 <main+0x390>)
 8000442:	9200      	str	r2, [sp, #0]
 8000444:	469c      	mov	ip, r3
 8000446:	2330      	movs	r3, #48	; 0x30
 8000448:	2254      	movs	r2, #84	; 0x54
 800044a:	2100      	movs	r1, #0
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fbae 	bl	8000bae <LCD_SEND_PICTURE.3>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000452:	2390      	movs	r3, #144	; 0x90
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	2201      	movs	r2, #1
 8000458:	2140      	movs	r1, #64	; 0x40
 800045a:	0018      	movs	r0, r3
 800045c:	f004 f827 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_Delay(199);
 8000460:	20c7      	movs	r0, #199	; 0xc7
 8000462:	f003 fdbf 	bl	8003fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LCD_LIGHT_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	0219      	lsls	r1, r3, #8
 800046a:	2390      	movs	r3, #144	; 0x90
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	2200      	movs	r2, #0
 8000470:	0018      	movs	r0, r3
 8000472:	f004 f81c 	bl	80044ae <HAL_GPIO_WritePin>

	  HAL_Delay(199);
 8000476:	20c7      	movs	r0, #199	; 0xc7
 8000478:	f003 fdb4 	bl	8003fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 800047c:	2390      	movs	r3, #144	; 0x90
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2201      	movs	r2, #1
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	0018      	movs	r0, r3
 8000486:	f004 f812 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, RELAY_Pin, GPIO_PIN_SET);
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	019b      	lsls	r3, r3, #6
 800048e:	48be      	ldr	r0, [pc, #760]	; (8000788 <main+0x394>)
 8000490:	2201      	movs	r2, #1
 8000492:	0019      	movs	r1, r3
 8000494:	f004 f80b 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_Delay(199);
 8000498:	20c7      	movs	r0, #199	; 0xc7
 800049a:	f003 fda3 	bl	8003fe4 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOC, RELAY_Pin, GPIO_PIN_RESET);
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	019b      	lsls	r3, r3, #6
 80004a2:	48b9      	ldr	r0, [pc, #740]	; (8000788 <main+0x394>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	0019      	movs	r1, r3
 80004a8:	f004 f801 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_Delay(199);
 80004ac:	20c7      	movs	r0, #199	; 0xc7
 80004ae:	f003 fd99 	bl	8003fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2201      	movs	r2, #1
 80004b8:	2140      	movs	r1, #64	; 0x40
 80004ba:	0018      	movs	r0, r3
 80004bc:	f003 fff7 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, RELAY_Pin, GPIO_PIN_SET);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	019b      	lsls	r3, r3, #6
 80004c4:	48b0      	ldr	r0, [pc, #704]	; (8000788 <main+0x394>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	0019      	movs	r1, r3
 80004ca:	f003 fff0 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_Delay(199);
 80004ce:	20c7      	movs	r0, #199	; 0xc7
 80004d0:	f003 fd88 	bl	8003fe4 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOC, RELAY_Pin, GPIO_PIN_RESET);
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	019b      	lsls	r3, r3, #6
 80004d8:	48ab      	ldr	r0, [pc, #684]	; (8000788 <main+0x394>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0019      	movs	r1, r3
 80004de:	f003 ffe6 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_Delay(199);
 80004e2:	20c7      	movs	r0, #199	; 0xc7
 80004e4:	f003 fd7e 	bl	8003fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 80004e8:	2390      	movs	r3, #144	; 0x90
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2201      	movs	r2, #1
 80004ee:	2140      	movs	r1, #64	; 0x40
 80004f0:	0018      	movs	r0, r3
 80004f2:	f003 ffdc 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_Delay(199);
 80004f6:	20c7      	movs	r0, #199	; 0xc7
 80004f8:	f003 fd74 	bl	8003fe4 <HAL_Delay>

	  HAL_Delay(199);
 80004fc:	20c7      	movs	r0, #199	; 0xc7
 80004fe:	f003 fd71 	bl	8003fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2201      	movs	r2, #1
 8000508:	2140      	movs	r1, #64	; 0x40
 800050a:	0018      	movs	r0, r3
 800050c:	f003 ffcf 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_Delay(199);
 8000510:	20c7      	movs	r0, #199	; 0xc7
 8000512:	f003 fd67 	bl	8003fe4 <HAL_Delay>

	  HAL_Delay(99);
 8000516:	2063      	movs	r0, #99	; 0x63
 8000518:	f003 fd64 	bl	8003fe4 <HAL_Delay>
	  LCD_CLEAR();
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	469c      	mov	ip, r3
 8000520:	f000 faf4 	bl	8000b0c <LCD_CLEAR.10>
	  HAL_Delay(99);
 8000524:	2063      	movs	r0, #99	; 0x63
 8000526:	f003 fd5d 	bl	8003fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 800052a:	2390      	movs	r3, #144	; 0x90
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2200      	movs	r2, #0
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	0018      	movs	r0, r3
 8000534:	f003 ffbb 	bl	80044ae <HAL_GPIO_WritePin>
	  SET_HOUR_DATE();
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	469c      	mov	ip, r3
 800053c:	f000 fdfe 	bl	800113c <SET_HOUR_DATE.11>

		  static uint8_t main_menu;                             // HOME SCREEN



		  if(ENTER_SET) main_menu = 0;                          //
 8000540:	4b92      	ldr	r3, [pc, #584]	; (800078c <main+0x398>)
 8000542:	2180      	movs	r1, #128	; 0x80
 8000544:	0018      	movs	r0, r3
 8000546:	f003 ff95 	bl	8004474 <HAL_GPIO_ReadPin>
 800054a:	0003      	movs	r3, r0
 800054c:	2b01      	cmp	r3, #1
 800054e:	d111      	bne.n	8000574 <main+0x180>
 8000550:	4b8f      	ldr	r3, [pc, #572]	; (8000790 <main+0x39c>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		  while(ENTER_RST)                                    //
 8000556:	e00d      	b.n	8000574 <main+0x180>
		  {
			  send_time_data();
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	469c      	mov	ip, r3
 800055c:	f000 fcf4 	bl	8000f48 <send_time_data.6>
			  LCD_SEND_TEXT(59, 5, "MENU");
 8000560:	4a8c      	ldr	r2, [pc, #560]	; (8000794 <main+0x3a0>)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	469c      	mov	ip, r3
 8000566:	2105      	movs	r1, #5
 8000568:	203b      	movs	r0, #59	; 0x3b
 800056a:	f000 fc6d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  main_menu = 0;
 800056e:	4b88      	ldr	r3, [pc, #544]	; (8000790 <main+0x39c>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		  while(ENTER_RST)                                    //
 8000574:	4b85      	ldr	r3, [pc, #532]	; (800078c <main+0x398>)
 8000576:	2180      	movs	r1, #128	; 0x80
 8000578:	0018      	movs	r0, r3
 800057a:	f003 ff7b 	bl	8004474 <HAL_GPIO_ReadPin>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d0ea      	beq.n	8000558 <main+0x164>
		  }
		  while(main_menu == 0)    // HOME SCREEN
 8000582:	e01d      	b.n	80005c0 <main+0x1cc>
		  {
			  relay_control_program();
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	469c      	mov	ip, r3
 8000588:	f003 f83a 	bl	8003600 <relay_control_program.5>
			  send_time_data();
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	469c      	mov	ip, r3
 8000590:	f000 fcda 	bl	8000f48 <send_time_data.6>
			  LCD_SEND_TEXT(59, 5, "MENU");
 8000594:	4a7f      	ldr	r2, [pc, #508]	; (8000794 <main+0x3a0>)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	469c      	mov	ip, r3
 800059a:	2105      	movs	r1, #5
 800059c:	203b      	movs	r0, #59	; 0x3b
 800059e:	f000 fc53 	bl	8000e48 <LCD_SEND_TEXT.9>
			  if(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET) {LCD_CLEAR(); main_menu = 1; break;}
 80005a2:	4b7a      	ldr	r3, [pc, #488]	; (800078c <main+0x398>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0018      	movs	r0, r3
 80005a8:	f003 ff64 	bl	8004474 <HAL_GPIO_ReadPin>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d107      	bne.n	80005c0 <main+0x1cc>
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	469c      	mov	ip, r3
 80005b4:	f000 faaa 	bl	8000b0c <LCD_CLEAR.10>
 80005b8:	4b75      	ldr	r3, [pc, #468]	; (8000790 <main+0x39c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	e003      	b.n	80005c8 <main+0x1d4>
		  while(main_menu == 0)    // HOME SCREEN
 80005c0:	4b73      	ldr	r3, [pc, #460]	; (8000790 <main+0x39c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0dd      	beq.n	8000584 <main+0x190>





		  while(main_menu == 1)
 80005c8:	e0f9      	b.n	80007be <main+0x3ca>
		  {
			  static int8_t menu;
			  while(ENTER_RST)                                // Main menu screen enter push
			  {
				  LCD_SEND_TEXT(29, 0, "MENU:");
 80005ca:	4a73      	ldr	r2, [pc, #460]	; (8000798 <main+0x3a4>)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	469c      	mov	ip, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	201d      	movs	r0, #29
 80005d4:	f000 fc38 	bl	8000e48 <LCD_SEND_TEXT.9>
				  LCD_SEND_TEXT(0, 5, "ESC");
 80005d8:	4a70      	ldr	r2, [pc, #448]	; (800079c <main+0x3a8>)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	469c      	mov	ip, r3
 80005de:	2105      	movs	r1, #5
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fc31 	bl	8000e48 <LCD_SEND_TEXT.9>
				  LCD_SEND_TEXT(65, 5, "SEL");
 80005e6:	4a6e      	ldr	r2, [pc, #440]	; (80007a0 <main+0x3ac>)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	469c      	mov	ip, r3
 80005ec:	2105      	movs	r1, #5
 80005ee:	2041      	movs	r0, #65	; 0x41
 80005f0:	f000 fc2a 	bl	8000e48 <LCD_SEND_TEXT.9>

				  switch (menu)
 80005f4:	4b6b      	ldr	r3, [pc, #428]	; (80007a4 <main+0x3b0>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d015      	beq.n	800062a <main+0x236>
 80005fe:	dc1c      	bgt.n	800063a <main+0x246>
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <main+0x216>
 8000604:	2b01      	cmp	r3, #1
 8000606:	d008      	beq.n	800061a <main+0x226>
 8000608:	e017      	b.n	800063a <main+0x246>
				  {
				  case 0: LCD_SEND_TEXT(8, 2, "Time & Date ");
 800060a:	4a67      	ldr	r2, [pc, #412]	; (80007a8 <main+0x3b4>)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	469c      	mov	ip, r3
 8000610:	2102      	movs	r1, #2
 8000612:	2008      	movs	r0, #8
 8000614:	f000 fc18 	bl	8000e48 <LCD_SEND_TEXT.9>
				  break;
 8000618:	e00f      	b.n	800063a <main+0x246>
				  case 1: LCD_SEND_TEXT(8, 2, "Programming ");
 800061a:	4a64      	ldr	r2, [pc, #400]	; (80007ac <main+0x3b8>)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	469c      	mov	ip, r3
 8000620:	2102      	movs	r1, #2
 8000622:	2008      	movs	r0, #8
 8000624:	f000 fc10 	bl	8000e48 <LCD_SEND_TEXT.9>
				  break;
 8000628:	e007      	b.n	800063a <main+0x246>
				  case 2: LCD_SEND_TEXT(8, 2, "LCD Settings");
 800062a:	4a61      	ldr	r2, [pc, #388]	; (80007b0 <main+0x3bc>)
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	469c      	mov	ip, r3
 8000630:	2102      	movs	r1, #2
 8000632:	2008      	movs	r0, #8
 8000634:	f000 fc08 	bl	8000e48 <LCD_SEND_TEXT.9>
				  break;
 8000638:	46c0      	nop			; (mov r8, r8)
			  while(ENTER_RST)                                // Main menu screen enter push
 800063a:	4b54      	ldr	r3, [pc, #336]	; (800078c <main+0x398>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0018      	movs	r0, r3
 8000640:	f003 ff18 	bl	8004474 <HAL_GPIO_ReadPin>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d0c0      	beq.n	80005ca <main+0x1d6>
				  }
			 }
			  while(1)
			  {

				  menu = menu + ENCODER_ROTATION_DIRECTION();
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	469c      	mov	ip, r3
 800064c:	f000 fd4e 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8000650:	0003      	movs	r3, r0
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b53      	ldr	r3, [pc, #332]	; (80007a4 <main+0x3b0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b25b      	sxtb	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	18d3      	adds	r3, r2, r3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	b25a      	sxtb	r2, r3
 8000662:	4b50      	ldr	r3, [pc, #320]	; (80007a4 <main+0x3b0>)
 8000664:	701a      	strb	r2, [r3, #0]
				  if(menu < 0) menu = 2;
 8000666:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <main+0x3b0>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b25b      	sxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	da02      	bge.n	8000676 <main+0x282>
 8000670:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <main+0x3b0>)
 8000672:	2202      	movs	r2, #2
 8000674:	701a      	strb	r2, [r3, #0]
				  if(menu > 2) menu = 0;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <main+0x3b0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b25b      	sxtb	r3, r3
 800067c:	2b02      	cmp	r3, #2
 800067e:	dd02      	ble.n	8000686 <main+0x292>
 8000680:	4b48      	ldr	r3, [pc, #288]	; (80007a4 <main+0x3b0>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]

				  LCD_SEND_TEXT(29, 0, "MENU:");
 8000686:	4a44      	ldr	r2, [pc, #272]	; (8000798 <main+0x3a4>)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	469c      	mov	ip, r3
 800068c:	2100      	movs	r1, #0
 800068e:	201d      	movs	r0, #29
 8000690:	f000 fbda 	bl	8000e48 <LCD_SEND_TEXT.9>
				  LCD_SEND_TEXT(0, 5, "ESC");
 8000694:	4a41      	ldr	r2, [pc, #260]	; (800079c <main+0x3a8>)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	469c      	mov	ip, r3
 800069a:	2105      	movs	r1, #5
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fbd3 	bl	8000e48 <LCD_SEND_TEXT.9>
				  LCD_SEND_TEXT(65, 5, "SEL");
 80006a2:	4a3f      	ldr	r2, [pc, #252]	; (80007a0 <main+0x3ac>)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	469c      	mov	ip, r3
 80006a8:	2105      	movs	r1, #5
 80006aa:	2041      	movs	r0, #65	; 0x41
 80006ac:	f000 fbcc 	bl	8000e48 <LCD_SEND_TEXT.9>

				  switch (menu)
 80006b0:	4b3c      	ldr	r3, [pc, #240]	; (80007a4 <main+0x3b0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d015      	beq.n	80006e6 <main+0x2f2>
 80006ba:	dc1c      	bgt.n	80006f6 <main+0x302>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <main+0x2d2>
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d008      	beq.n	80006d6 <main+0x2e2>
 80006c4:	e017      	b.n	80006f6 <main+0x302>
				  {
				  case 0: LCD_SEND_TEXT(8, 2, "Time & Date ");
 80006c6:	4a38      	ldr	r2, [pc, #224]	; (80007a8 <main+0x3b4>)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	469c      	mov	ip, r3
 80006cc:	2102      	movs	r1, #2
 80006ce:	2008      	movs	r0, #8
 80006d0:	f000 fbba 	bl	8000e48 <LCD_SEND_TEXT.9>
				  break;
 80006d4:	e00f      	b.n	80006f6 <main+0x302>
				  case 1: LCD_SEND_TEXT(8, 2, "Programming ");
 80006d6:	4a35      	ldr	r2, [pc, #212]	; (80007ac <main+0x3b8>)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	469c      	mov	ip, r3
 80006dc:	2102      	movs	r1, #2
 80006de:	2008      	movs	r0, #8
 80006e0:	f000 fbb2 	bl	8000e48 <LCD_SEND_TEXT.9>
				  break;
 80006e4:	e007      	b.n	80006f6 <main+0x302>
				  case 2: LCD_SEND_TEXT(8, 2, "LCD Settings");
 80006e6:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <main+0x3bc>)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	469c      	mov	ip, r3
 80006ec:	2102      	movs	r1, #2
 80006ee:	2008      	movs	r0, #8
 80006f0:	f000 fbaa 	bl	8000e48 <LCD_SEND_TEXT.9>
				  break;
 80006f4:	46c0      	nop			; (mov r8, r8)
				  }
				  if(ESCAPE_RST){LCD_CLEAR(); main_menu = 0; break;} // jump to HOME SCREEN
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <main+0x398>)
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	0018      	movs	r0, r3
 80006fc:	f003 feba 	bl	8004474 <HAL_GPIO_ReadPin>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d107      	bne.n	8000714 <main+0x320>
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	469c      	mov	ip, r3
 8000708:	f000 fa00 	bl	8000b0c <LCD_CLEAR.10>
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <main+0x39c>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e000      	b.n	8000716 <main+0x322>
				  break;
 8000714:	46c0      	nop			; (mov r8, r8)
			  }																								// end main menu screen



			  if(ENTER_RST)
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <main+0x398>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0018      	movs	r0, r3
 800071c:	f003 feaa 	bl	8004474 <HAL_GPIO_ReadPin>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d14c      	bne.n	80007be <main+0x3ca>
			  {
				  LCD_CLEAR();
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	469c      	mov	ip, r3
 8000728:	f000 f9f0 	bl	8000b0c <LCD_CLEAR.10>

				  while(menu==0)                                                             // set hour and date
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <main+0x3b0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b25b      	sxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d116      	bne.n	8000766 <main+0x372>
				  {
					  SET_HOUR_DATE();
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	469c      	mov	ip, r3
 800073c:	f000 fcfe 	bl	800113c <SET_HOUR_DATE.11>
					  HAL_Delay(100);
 8000740:	2064      	movs	r0, #100	; 0x64
 8000742:	f003 fc4f 	bl	8003fe4 <HAL_Delay>
					  while(ENTER_RST);
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <main+0x398>)
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	0018      	movs	r0, r3
 800074e:	f003 fe91 	bl	8004474 <HAL_GPIO_ReadPin>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d0f8      	beq.n	8000748 <main+0x354>
					  break;
 8000756:	46c0      	nop			; (mov r8, r8)
				  }
				  while(menu==1)
 8000758:	e005      	b.n	8000766 <main+0x372>
				  {
					  SET_RELAY_PROGRAM();
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	469c      	mov	ip, r3
 800075e:	f001 fd31 	bl	80021c4 <SET_RELAY_PROGRAM.12>
					  break;
 8000762:	46c0      	nop			; (mov r8, r8)


				  }
				  while(menu==2)
 8000764:	e026      	b.n	80007b4 <main+0x3c0>
				  while(menu==1)
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <main+0x3b0>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b25b      	sxtb	r3, r3
 800076e:	2b01      	cmp	r3, #1
 8000770:	d0f3      	beq.n	800075a <main+0x366>
				  while(menu==2)
 8000772:	e01f      	b.n	80007b4 <main+0x3c0>


					  while(1)
					  {

						  SET_LCD();
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	469c      	mov	ip, r3
 8000778:	f002 fcac 	bl	80030d4 <SET_LCD.14>
						  break;
 800077c:	46c0      	nop			; (mov r8, r8)
					  }
					  break;
 800077e:	e01e      	b.n	80007be <main+0x3ca>
 8000780:	20000378 	.word	0x20000378
 8000784:	20000000 	.word	0x20000000
 8000788:	48000800 	.word	0x48000800
 800078c:	48001400 	.word	0x48001400
 8000790:	200003c0 	.word	0x200003c0
 8000794:	08006d48 	.word	0x08006d48
 8000798:	08006d50 	.word	0x08006d50
 800079c:	08006d58 	.word	0x08006d58
 80007a0:	08006d5c 	.word	0x08006d5c
 80007a4:	200003c1 	.word	0x200003c1
 80007a8:	08006d60 	.word	0x08006d60
 80007ac:	08006d70 	.word	0x08006d70
 80007b0:	08006d80 	.word	0x08006d80
				  while(menu==2)
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <main+0x3d8>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d0da      	beq.n	8000774 <main+0x380>
		  while(main_menu == 1)
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <main+0x3dc>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d100      	bne.n	80007c8 <main+0x3d4>
 80007c6:	e738      	b.n	800063a <main+0x246>
	  {
 80007c8:	e6ba      	b.n	8000540 <main+0x14c>
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	200003c1 	.word	0x200003c1
 80007d0:	200003c0 	.word	0x200003c0

080007d4 <WRITE_EEPROM_PROGRAM_DATA.13>:
  {
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af04      	add	r7, sp, #16
 80007da:	4663      	mov	r3, ip
 80007dc:	607b      	str	r3, [r7, #4]
	  uint8_t mem_address = 0;
 80007de:	230f      	movs	r3, #15
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
	  uint8_t value = 0;
 80007e6:	230a      	movs	r3, #10
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
	  uint8_t program_number = 0;
 80007ee:	230e      	movs	r3, #14
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	  uint8_t a = 0;
 80007f6:	230d      	movs	r3, #13
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
	  uint8_t b = 0;
 80007fe:	230c      	movs	r3, #12
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
	  uint8_t c = 0;
 8000806:	230b      	movs	r3, #11
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	  while(a < 14)
 800080e:	e04b      	b.n	80008a8 <WRITE_EEPROM_PROGRAM_DATA.13+0xd4>
		  for(b = 0; b < 5; b++)
 8000810:	230c      	movs	r3, #12
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e031      	b.n	800087e <WRITE_EEPROM_PROGRAM_DATA.13+0xaa>
			  value = program_data[program_number][c];
 800081a:	230e      	movs	r3, #14
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	240b      	movs	r4, #11
 8000822:	193b      	adds	r3, r7, r4
 8000824:	7819      	ldrb	r1, [r3, #0]
 8000826:	4825      	ldr	r0, [pc, #148]	; (80008bc <WRITE_EEPROM_PROGRAM_DATA.13+0xe8>)
 8000828:	0013      	movs	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	189b      	adds	r3, r3, r2
 800082e:	18c3      	adds	r3, r0, r3
 8000830:	5c5a      	ldrb	r2, [r3, r1]
 8000832:	210a      	movs	r1, #10
 8000834:	187b      	adds	r3, r7, r1
 8000836:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Mem_Write(&hi2c1, 0xa0, mem_address, 1, (uint8_t*)&value, 1, HAL_MAX_DELAY);
 8000838:	250f      	movs	r5, #15
 800083a:	197b      	adds	r3, r7, r5
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b29a      	uxth	r2, r3
 8000840:	481f      	ldr	r0, [pc, #124]	; (80008c0 <WRITE_EEPROM_PROGRAM_DATA.13+0xec>)
 8000842:	2301      	movs	r3, #1
 8000844:	425b      	negs	r3, r3
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	2301      	movs	r3, #1
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	187b      	adds	r3, r7, r1
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	21a0      	movs	r1, #160	; 0xa0
 8000854:	f003 fede 	bl	8004614 <HAL_I2C_Mem_Write>
			  mem_address ++;
 8000858:	197b      	adds	r3, r7, r5
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	197b      	adds	r3, r7, r5
 800085e:	3201      	adds	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
			  c++;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	193b      	adds	r3, r7, r4
 8000868:	3201      	adds	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(5);
 800086c:	2005      	movs	r0, #5
 800086e:	f003 fbb9 	bl	8003fe4 <HAL_Delay>
		  for(b = 0; b < 5; b++)
 8000872:	210c      	movs	r1, #12
 8000874:	187b      	adds	r3, r7, r1
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	187b      	adds	r3, r7, r1
 800087a:	3201      	adds	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	230c      	movs	r3, #12
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b04      	cmp	r3, #4
 8000886:	d9c8      	bls.n	800081a <WRITE_EEPROM_PROGRAM_DATA.13+0x46>
		  program_number ++;
 8000888:	210e      	movs	r1, #14
 800088a:	187b      	adds	r3, r7, r1
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	187b      	adds	r3, r7, r1
 8000890:	3201      	adds	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
		  a++;
 8000894:	210d      	movs	r1, #13
 8000896:	187b      	adds	r3, r7, r1
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	187b      	adds	r3, r7, r1
 800089c:	3201      	adds	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
		  c = 0;
 80008a0:	230b      	movs	r3, #11
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
	  while(a < 14)
 80008a8:	230d      	movs	r3, #13
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b0d      	cmp	r3, #13
 80008b0:	d9ae      	bls.n	8000810 <WRITE_EEPROM_PROGRAM_DATA.13+0x3c>
  }
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b004      	add	sp, #16
 80008ba:	bdb0      	pop	{r4, r5, r7, pc}
 80008bc:	20000234 	.word	0x20000234
 80008c0:	200002a8 	.word	0x200002a8

080008c4 <READ_EEPROM_PROGRAM_DATA.0>:
  {
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af04      	add	r7, sp, #16
 80008ca:	4663      	mov	r3, ip
 80008cc:	607b      	str	r3, [r7, #4]
	  uint8_t mem_address = 0;
 80008ce:	230f      	movs	r3, #15
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	  uint8_t value = 0;
 80008d6:	230a      	movs	r3, #10
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
	  uint8_t program_number = 0;
 80008de:	230e      	movs	r3, #14
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
	  uint8_t a = 0;
 80008e6:	230d      	movs	r3, #13
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
	  uint8_t b = 0;
 80008ee:	230c      	movs	r3, #12
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
	  uint8_t c = 0;
 80008f6:	230b      	movs	r3, #11
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	  while(a < 14)
 80008fe:	e04c      	b.n	800099a <READ_EEPROM_PROGRAM_DATA.0+0xd6>
		  for(b = 0; b < 5; b++)
 8000900:	230c      	movs	r3, #12
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e032      	b.n	8000970 <READ_EEPROM_PROGRAM_DATA.0+0xac>
			  HAL_I2C_Mem_Read(&hi2c1, 0xa0, mem_address, 1, (uint8_t*)&value, 1, HAL_MAX_DELAY);
 800090a:	250f      	movs	r5, #15
 800090c:	197b      	adds	r3, r7, r5
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b29a      	uxth	r2, r3
 8000912:	4827      	ldr	r0, [pc, #156]	; (80009b0 <READ_EEPROM_PROGRAM_DATA.0+0xec>)
 8000914:	2301      	movs	r3, #1
 8000916:	425b      	negs	r3, r3
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	2301      	movs	r3, #1
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	240a      	movs	r4, #10
 8000920:	193b      	adds	r3, r7, r4
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	21a0      	movs	r1, #160	; 0xa0
 8000928:	f003 ffa2 	bl	8004870 <HAL_I2C_Mem_Read>
			  program_data[program_number][c] = value;
 800092c:	230e      	movs	r3, #14
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	260b      	movs	r6, #11
 8000934:	19bb      	adds	r3, r7, r6
 8000936:	7819      	ldrb	r1, [r3, #0]
 8000938:	193b      	adds	r3, r7, r4
 800093a:	781c      	ldrb	r4, [r3, #0]
 800093c:	481d      	ldr	r0, [pc, #116]	; (80009b4 <READ_EEPROM_PROGRAM_DATA.0+0xf0>)
 800093e:	0013      	movs	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	189b      	adds	r3, r3, r2
 8000944:	18c3      	adds	r3, r0, r3
 8000946:	1c22      	adds	r2, r4, #0
 8000948:	545a      	strb	r2, [r3, r1]
			  mem_address ++;
 800094a:	197b      	adds	r3, r7, r5
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	197b      	adds	r3, r7, r5
 8000950:	3201      	adds	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
			  c++;
 8000954:	19bb      	adds	r3, r7, r6
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	19bb      	adds	r3, r7, r6
 800095a:	3201      	adds	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(5);
 800095e:	2005      	movs	r0, #5
 8000960:	f003 fb40 	bl	8003fe4 <HAL_Delay>
		  for(b = 0; b < 5; b++)
 8000964:	210c      	movs	r1, #12
 8000966:	187b      	adds	r3, r7, r1
 8000968:	781a      	ldrb	r2, [r3, #0]
 800096a:	187b      	adds	r3, r7, r1
 800096c:	3201      	adds	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	230c      	movs	r3, #12
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b04      	cmp	r3, #4
 8000978:	d9c7      	bls.n	800090a <READ_EEPROM_PROGRAM_DATA.0+0x46>
		  program_number ++;
 800097a:	210e      	movs	r1, #14
 800097c:	187b      	adds	r3, r7, r1
 800097e:	781a      	ldrb	r2, [r3, #0]
 8000980:	187b      	adds	r3, r7, r1
 8000982:	3201      	adds	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
		  a++;
 8000986:	210d      	movs	r1, #13
 8000988:	187b      	adds	r3, r7, r1
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	187b      	adds	r3, r7, r1
 800098e:	3201      	adds	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
		  c = 0;
 8000992:	230b      	movs	r3, #11
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
	  while(a < 14)
 800099a:	230d      	movs	r3, #13
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b0d      	cmp	r3, #13
 80009a2:	d9ad      	bls.n	8000900 <READ_EEPROM_PROGRAM_DATA.0+0x3c>
  }
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b005      	add	sp, #20
 80009ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	200002a8 	.word	0x200002a8
 80009b4:	20000234 	.word	0x20000234

080009b8 <LCD_DATA.4>:
  {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	4663      	mov	r3, ip
 80009c6:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin, GPIO_PIN_RESET);
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	0119      	lsls	r1, r3, #4
 80009cc:	2390      	movs	r3, #144	; 0x90
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	2200      	movs	r2, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f003 fd6b 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin, GPIO_PIN_SET);
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	0159      	lsls	r1, r3, #5
 80009dc:	2390      	movs	r3, #144	; 0x90
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	2201      	movs	r2, #1
 80009e2:	0018      	movs	r0, r3
 80009e4:	f003 fd63 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80009e8:	2301      	movs	r3, #1
 80009ea:	425b      	negs	r3, r3
 80009ec:	1df9      	adds	r1, r7, #7
 80009ee:	4808      	ldr	r0, [pc, #32]	; (8000a10 <LCD_DATA.4+0x58>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	f005 fc75 	bl	80062e0 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin, GPIO_PIN_SET);
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	0119      	lsls	r1, r3, #4
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2201      	movs	r2, #1
 8000a00:	0018      	movs	r0, r3
 8000a02:	f003 fd54 	bl	80044ae <HAL_GPIO_WritePin>
  }
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000314 	.word	0x20000314

08000a14 <LCD_CMD.2>:
  {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	4663      	mov	r3, ip
 8000a22:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8000a24:	23c0      	movs	r3, #192	; 0xc0
 8000a26:	0159      	lsls	r1, r3, #5
 8000a28:	2390      	movs	r3, #144	; 0x90
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f003 fd3d 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000a34:	2301      	movs	r3, #1
 8000a36:	425b      	negs	r3, r3
 8000a38:	1df9      	adds	r1, r7, #7
 8000a3a:	4808      	ldr	r0, [pc, #32]	; (8000a5c <LCD_CMD.2+0x48>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f005 fc4f 	bl	80062e0 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, LCD_CE_Pin | LCD_DC_Pin, GPIO_PIN_SET);
 8000a42:	23c0      	movs	r3, #192	; 0xc0
 8000a44:	0159      	lsls	r1, r3, #5
 8000a46:	2390      	movs	r3, #144	; 0x90
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f003 fd2e 	bl	80044ae <HAL_GPIO_WritePin>
  }
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000314 	.word	0x20000314

08000a60 <LCD_ON.1>:
  {
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4664      	mov	r4, ip
 8000a68:	4663      	mov	r3, ip
 8000a6a:	607b      	str	r3, [r7, #4]
	  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin, GPIO_PIN_RESET);  // LCD RST ACTIVE
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	00d9      	lsls	r1, r3, #3
 8000a70:	2390      	movs	r3, #144	; 0x90
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	2200      	movs	r2, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f003 fd19 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f003 fab1 	bl	8003fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin, GPIO_PIN_SET);    // LCD ACTIVE
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	00d9      	lsls	r1, r3, #3
 8000a86:	2390      	movs	r3, #144	; 0x90
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f003 fd0e 	bl	80044ae <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LCD_LIGHT_Pin, GPIO_PIN_SET);   // Light active
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	0219      	lsls	r1, r3, #8
 8000a96:	2390      	movs	r3, #144	; 0x90
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f003 fd06 	bl	80044ae <HAL_GPIO_WritePin>
	  LCD_CMD(0x21);  // enable extended instructions
 8000aa2:	46a4      	mov	ip, r4
 8000aa4:	2021      	movs	r0, #33	; 0x21
 8000aa6:	f7ff ffb5 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(0xc8);  // contrast
 8000aaa:	46a4      	mov	ip, r4
 8000aac:	20c8      	movs	r0, #200	; 0xc8
 8000aae:	f7ff ffb1 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(0x06);  // set Temperature Coefficient
 8000ab2:	46a4      	mov	ip, r4
 8000ab4:	2006      	movs	r0, #6
 8000ab6:	f7ff ffad 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(0x11);     // BIAS
 8000aba:	46a4      	mov	ip, r4
 8000abc:	2011      	movs	r0, #17
 8000abe:	f7ff ffa9 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(0x20); // enable standard instructions
 8000ac2:	46a4      	mov	ip, r4
 8000ac4:	2020      	movs	r0, #32
 8000ac6:	f7ff ffa5 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(0x08);  // display blank
 8000aca:	46a4      	mov	ip, r4
 8000acc:	2008      	movs	r0, #8
 8000ace:	f7ff ffa1 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(0x09); // all display segments on
 8000ad2:	46a4      	mov	ip, r4
 8000ad4:	2009      	movs	r0, #9
 8000ad6:	f7ff ff9d 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(0x0d); // inverse video
 8000ada:	46a4      	mov	ip, r4
 8000adc:	200d      	movs	r0, #13
 8000ade:	f7ff ff99 	bl	8000a14 <LCD_CMD.2>
	  HAL_Delay(999);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <LCD_ON.1+0xa8>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f003 fa7d 	bl	8003fe4 <HAL_Delay>
	  HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f003 fa7a 	bl	8003fe4 <HAL_Delay>
	  LCD_CMD(0x0c);   // normal mode
 8000af0:	46a4      	mov	ip, r4
 8000af2:	200c      	movs	r0, #12
 8000af4:	f7ff ff8e 	bl	8000a14 <LCD_CMD.2>
	  HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f003 fa73 	bl	8003fe4 <HAL_Delay>
  }
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b003      	add	sp, #12
 8000b04:	bd90      	pop	{r4, r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	000003e7 	.word	0x000003e7

08000b0c <LCD_CLEAR.10>:
  {
 8000b0c:	b5b0      	push	{r4, r5, r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4664      	mov	r4, ip
 8000b14:	4663      	mov	r3, ip
 8000b16:	607b      	str	r3, [r7, #4]
	  LCD_CMD(0x20); // enable standard instructions
 8000b18:	46a4      	mov	ip, r4
 8000b1a:	2020      	movs	r0, #32
 8000b1c:	f7ff ff7a 	bl	8000a14 <LCD_CMD.2>
	  uint8_t position_y = 0x40;
 8000b20:	250f      	movs	r5, #15
 8000b22:	197b      	adds	r3, r7, r5
 8000b24:	2240      	movs	r2, #64	; 0x40
 8000b26:	701a      	strb	r2, [r3, #0]
	  uint8_t y = 0;
 8000b28:	230e      	movs	r3, #14
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
	  LCD_CMD(0x80);
 8000b30:	46a4      	mov	ip, r4
 8000b32:	2080      	movs	r0, #128	; 0x80
 8000b34:	f7ff ff6e 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(position_y);
 8000b38:	197b      	adds	r3, r7, r5
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	46a4      	mov	ip, r4
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff ff68 	bl	8000a14 <LCD_CMD.2>
	  while(y < 8)
 8000b44:	e029      	b.n	8000b9a <LCD_CLEAR.10+0x8e>
		  for (uint8_t a = 0; a < 84; a++ )
 8000b46:	230d      	movs	r3, #13
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e009      	b.n	8000b64 <LCD_CLEAR.10+0x58>
		  		  LCD_DATA(0x00);
 8000b50:	46a4      	mov	ip, r4
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ff30 	bl	80009b8 <LCD_DATA.4>
		  for (uint8_t a = 0; a < 84; a++ )
 8000b58:	210d      	movs	r1, #13
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	3201      	adds	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	230d      	movs	r3, #13
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b53      	cmp	r3, #83	; 0x53
 8000b6c:	d9f0      	bls.n	8000b50 <LCD_CLEAR.10+0x44>
		  LCD_CMD(0x80);
 8000b6e:	46a4      	mov	ip, r4
 8000b70:	2080      	movs	r0, #128	; 0x80
 8000b72:	f7ff ff4f 	bl	8000a14 <LCD_CMD.2>
		  y ++;
 8000b76:	210e      	movs	r1, #14
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	3201      	adds	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
		  position_y ++;
 8000b82:	210f      	movs	r1, #15
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	3201      	adds	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
		  LCD_CMD(position_y);
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	46a4      	mov	ip, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff3d 	bl	8000a14 <LCD_CMD.2>
	  while(y < 8)
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b07      	cmp	r3, #7
 8000ba2:	d9d0      	bls.n	8000b46 <LCD_CLEAR.10+0x3a>
  }
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bdb0      	pop	{r4, r5, r7, pc}

08000bae <LCD_SEND_PICTURE.3>:
  {
 8000bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb0:	b087      	sub	sp, #28
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	0005      	movs	r5, r0
 8000bb6:	000c      	movs	r4, r1
 8000bb8:	0010      	movs	r0, r2
 8000bba:	0019      	movs	r1, r3
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	1c2a      	adds	r2, r5, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	1dbb      	adds	r3, r7, #6
 8000bc4:	1c22      	adds	r2, r4, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	1d7b      	adds	r3, r7, #5
 8000bca:	1c02      	adds	r2, r0, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	1c0a      	adds	r2, r1, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	4664      	mov	r4, ip
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	603b      	str	r3, [r7, #0]
	  element=0;
 8000bda:	2314      	movs	r3, #20
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2200      	movs	r2, #0
 8000be0:	801a      	strh	r2, [r3, #0]
	  end_width=x+width;
 8000be2:	2313      	movs	r3, #19
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	1df9      	adds	r1, r7, #7
 8000be8:	1d7a      	adds	r2, r7, #5
 8000bea:	7809      	ldrb	r1, [r1, #0]
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	188a      	adds	r2, r1, r2
 8000bf0:	701a      	strb	r2, [r3, #0]
	  height=height/8;
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	1d3a      	adds	r2, r7, #4
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	08d2      	lsrs	r2, r2, #3
 8000bfa:	701a      	strb	r2, [r3, #0]
	  	width_1=x;
 8000bfc:	2316      	movs	r3, #22
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	1dfa      	adds	r2, r7, #7
 8000c02:	7812      	ldrb	r2, [r2, #0]
 8000c04:	701a      	strb	r2, [r3, #0]
	  	koniec=height*width;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	1d7b      	adds	r3, r7, #5
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b299      	uxth	r1, r3
 8000c12:	2310      	movs	r3, #16
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	434a      	muls	r2, r1
 8000c18:	801a      	strh	r2, [r3, #0]
	  	address_x=0x80;             // stała wartoć którš LCD interpretuje jako adres
 8000c1a:	250f      	movs	r5, #15
 8000c1c:	197b      	adds	r3, r7, r5
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	701a      	strb	r2, [r3, #0]
	  	address_y=0x40;             // jak wyżej
 8000c22:	2017      	movs	r0, #23
 8000c24:	183b      	adds	r3, r7, r0
 8000c26:	2240      	movs	r2, #64	; 0x40
 8000c28:	701a      	strb	r2, [r3, #0]
	  	address_x=address_x+x;
 8000c2a:	197b      	adds	r3, r7, r5
 8000c2c:	1979      	adds	r1, r7, r5
 8000c2e:	1dfa      	adds	r2, r7, #7
 8000c30:	7809      	ldrb	r1, [r1, #0]
 8000c32:	7812      	ldrb	r2, [r2, #0]
 8000c34:	188a      	adds	r2, r1, r2
 8000c36:	701a      	strb	r2, [r3, #0]
	  	address_y=address_y+y;
 8000c38:	183b      	adds	r3, r7, r0
 8000c3a:	0006      	movs	r6, r0
 8000c3c:	1839      	adds	r1, r7, r0
 8000c3e:	1dba      	adds	r2, r7, #6
 8000c40:	7809      	ldrb	r1, [r1, #0]
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	188a      	adds	r2, r1, r2
 8000c46:	701a      	strb	r2, [r3, #0]
	  	LCD_CMD(0x20); // enable standard instructions
 8000c48:	46a4      	mov	ip, r4
 8000c4a:	2020      	movs	r0, #32
 8000c4c:	f7ff fee2 	bl	8000a14 <LCD_CMD.2>
	  	LCD_CMD(address_x);
 8000c50:	197b      	adds	r3, r7, r5
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	46a4      	mov	ip, r4
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff fedc 	bl	8000a14 <LCD_CMD.2>
	  	LCD_CMD(address_y);
 8000c5c:	19bb      	adds	r3, r7, r6
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	46a4      	mov	ip, r4
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fed6 	bl	8000a14 <LCD_CMD.2>
		  LCD_DATA(picture[element]);
 8000c68:	2514      	movs	r5, #20
 8000c6a:	197b      	adds	r3, r7, r5
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	46a4      	mov	ip, r4
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fe9e 	bl	80009b8 <LCD_DATA.4>
		  element++;
 8000c7c:	0029      	movs	r1, r5
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	881a      	ldrh	r2, [r3, #0]
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	3201      	adds	r2, #1
 8000c86:	801a      	strh	r2, [r3, #0]
		  width_1++;
 8000c88:	2016      	movs	r0, #22
 8000c8a:	183b      	adds	r3, r7, r0
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	183b      	adds	r3, r7, r0
 8000c90:	3201      	adds	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
		  if(element==koniec) break;
 8000c94:	187a      	adds	r2, r7, r1
 8000c96:	2310      	movs	r3, #16
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	8812      	ldrh	r2, [r2, #0]
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d01e      	beq.n	8000ce0 <LCD_SEND_PICTURE.3+0x132>
		  if(width_1==end_width) {width_1=x; address_y++; LCD_CMD(address_x); LCD_CMD(address_y); };
 8000ca2:	183a      	adds	r2, r7, r0
 8000ca4:	2313      	movs	r3, #19
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d1db      	bne.n	8000c68 <LCD_SEND_PICTURE.3+0xba>
 8000cb0:	183b      	adds	r3, r7, r0
 8000cb2:	1dfa      	adds	r2, r7, #7
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	2517      	movs	r5, #23
 8000cba:	197b      	adds	r3, r7, r5
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	197b      	adds	r3, r7, r5
 8000cc0:	3201      	adds	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	46a4      	mov	ip, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fea1 	bl	8000a14 <LCD_CMD.2>
 8000cd2:	197b      	adds	r3, r7, r5
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	46a4      	mov	ip, r4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff fe9b 	bl	8000a14 <LCD_CMD.2>
		  LCD_DATA(picture[element]);
 8000cde:	e7c3      	b.n	8000c68 <LCD_SEND_PICTURE.3+0xba>
		  if(element==koniec) break;
 8000ce0:	46c0      	nop			; (mov r8, r8)
  }
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b007      	add	sp, #28
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000cec <LCD_SEND_DIGIT.7>:
  {
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60ba      	str	r2, [r7, #8]
 8000cf4:	260f      	movs	r6, #15
 8000cf6:	19bb      	adds	r3, r7, r6
 8000cf8:	1c02      	adds	r2, r0, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	1c0a      	adds	r2, r1, #0
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	4664      	mov	r4, ip
 8000d06:	4661      	mov	r1, ip
 8000d08:	6079      	str	r1, [r7, #4]
	  a = 0;
 8000d0a:	2116      	movs	r1, #22
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
	  address_x=0x80;             // static value
 8000d12:	2515      	movs	r5, #21
 8000d14:	197b      	adds	r3, r7, r5
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	701a      	strb	r2, [r3, #0]
	  address_y=0x40;             // static value
 8000d1a:	2014      	movs	r0, #20
 8000d1c:	183b      	adds	r3, r7, r0
 8000d1e:	2240      	movs	r2, #64	; 0x40
 8000d20:	701a      	strb	r2, [r3, #0]
	  address_x=address_x+x;
 8000d22:	197b      	adds	r3, r7, r5
 8000d24:	1979      	adds	r1, r7, r5
 8000d26:	19ba      	adds	r2, r7, r6
 8000d28:	7809      	ldrb	r1, [r1, #0]
 8000d2a:	7812      	ldrb	r2, [r2, #0]
 8000d2c:	188a      	adds	r2, r1, r2
 8000d2e:	701a      	strb	r2, [r3, #0]
	  address_y=address_y+y;
 8000d30:	183b      	adds	r3, r7, r0
 8000d32:	0006      	movs	r6, r0
 8000d34:	1839      	adds	r1, r7, r0
 8000d36:	220e      	movs	r2, #14
 8000d38:	18ba      	adds	r2, r7, r2
 8000d3a:	7809      	ldrb	r1, [r1, #0]
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	188a      	adds	r2, r1, r2
 8000d40:	701a      	strb	r2, [r3, #0]
	  LCD_CMD(0x20); // enable standard instructions
 8000d42:	46a4      	mov	ip, r4
 8000d44:	2020      	movs	r0, #32
 8000d46:	f7ff fe65 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(address_x);   // location of cursor
 8000d4a:	197b      	adds	r3, r7, r5
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	46a4      	mov	ip, r4
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fe5f 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(address_y);   //
 8000d56:	19bb      	adds	r3, r7, r6
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	46a4      	mov	ip, r4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fe59 	bl	8000a14 <LCD_CMD.2>
	  rest = digit % 10;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	210a      	movs	r1, #10
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fb3e 	bl	80003e8 <__aeabi_idivmod>
 8000d6c:	000b      	movs	r3, r1
 8000d6e:	001a      	movs	r2, r3
 8000d70:	2112      	movs	r1, #18
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	801a      	strh	r2, [r3, #0]
	  digit = digit - rest;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	60bb      	str	r3, [r7, #8]
	  while(digit > 9) {digit = digit / 10;}
 8000d80:	e006      	b.n	8000d90 <LCD_SEND_DIGIT.7+0xa4>
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	210a      	movs	r1, #10
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fa48 	bl	800021c <__divsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	dcf5      	bgt.n	8000d82 <LCD_SEND_DIGIT.7+0x96>
	  argument_number = 0;
 8000d96:	2317      	movs	r3, #23
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	  for(a = 6; a>0; a--){LCD_DATA(digits[digit][argument_number]); argument_number ++;}
 8000d9e:	2316      	movs	r3, #22
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2206      	movs	r2, #6
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e019      	b.n	8000ddc <LCD_SEND_DIGIT.7+0xf0>
 8000da8:	2517      	movs	r5, #23
 8000daa:	197b      	adds	r3, r7, r5
 8000dac:	7819      	ldrb	r1, [r3, #0]
 8000dae:	4825      	ldr	r0, [pc, #148]	; (8000e44 <LCD_SEND_DIGIT.7+0x158>)
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	0013      	movs	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	189b      	adds	r3, r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	18c3      	adds	r3, r0, r3
 8000dbc:	5c5b      	ldrb	r3, [r3, r1]
 8000dbe:	46a4      	mov	ip, r4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff fdf9 	bl	80009b8 <LCD_DATA.4>
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	197b      	adds	r3, r7, r5
 8000dcc:	3201      	adds	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	2116      	movs	r1, #22
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	2116      	movs	r1, #22
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1e0      	bne.n	8000da8 <LCD_SEND_DIGIT.7+0xbc>
	  argument_number = 0;
 8000de6:	2317      	movs	r3, #23
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
	  for(a = 6; a>0; a--){LCD_DATA(digits[rest][argument_number]); argument_number ++;}
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2206      	movs	r2, #6
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e01b      	b.n	8000e2e <LCD_SEND_DIGIT.7+0x142>
 8000df6:	2312      	movs	r3, #18
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	881a      	ldrh	r2, [r3, #0]
 8000dfc:	2517      	movs	r5, #23
 8000dfe:	197b      	adds	r3, r7, r5
 8000e00:	7819      	ldrb	r1, [r3, #0]
 8000e02:	4810      	ldr	r0, [pc, #64]	; (8000e44 <LCD_SEND_DIGIT.7+0x158>)
 8000e04:	0013      	movs	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	189b      	adds	r3, r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	18c3      	adds	r3, r0, r3
 8000e0e:	5c5b      	ldrb	r3, [r3, r1]
 8000e10:	46a4      	mov	ip, r4
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fdd0 	bl	80009b8 <LCD_DATA.4>
 8000e18:	197b      	adds	r3, r7, r5
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	197b      	adds	r3, r7, r5
 8000e1e:	3201      	adds	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	2116      	movs	r1, #22
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	3a01      	subs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	2316      	movs	r3, #22
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1de      	bne.n	8000df6 <LCD_SEND_DIGIT.7+0x10a>
  }
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b007      	add	sp, #28
 8000e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	200001f8 	.word	0x200001f8

08000e48 <LCD_SEND_TEXT.9>:
  {
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60ba      	str	r2, [r7, #8]
 8000e50:	260f      	movs	r6, #15
 8000e52:	19bb      	adds	r3, r7, r6
 8000e54:	1c02      	adds	r2, r0, #0
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	230e      	movs	r3, #14
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	1c0a      	adds	r2, r1, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	4664      	mov	r4, ip
 8000e62:	4661      	mov	r1, ip
 8000e64:	6079      	str	r1, [r7, #4]
	  address_x=0x80;             // stała wartość którš LCD interpretuje jako adres
 8000e66:	2514      	movs	r5, #20
 8000e68:	197b      	adds	r3, r7, r5
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	701a      	strb	r2, [r3, #0]
	  address_y=0x40;             // jak wyżej
 8000e6e:	2013      	movs	r0, #19
 8000e70:	183b      	adds	r3, r7, r0
 8000e72:	2240      	movs	r2, #64	; 0x40
 8000e74:	701a      	strb	r2, [r3, #0]
	  address_x=address_x+x;
 8000e76:	197b      	adds	r3, r7, r5
 8000e78:	1979      	adds	r1, r7, r5
 8000e7a:	19ba      	adds	r2, r7, r6
 8000e7c:	7809      	ldrb	r1, [r1, #0]
 8000e7e:	7812      	ldrb	r2, [r2, #0]
 8000e80:	188a      	adds	r2, r1, r2
 8000e82:	701a      	strb	r2, [r3, #0]
	  address_y=address_y+y;
 8000e84:	183b      	adds	r3, r7, r0
 8000e86:	0006      	movs	r6, r0
 8000e88:	1839      	adds	r1, r7, r0
 8000e8a:	220e      	movs	r2, #14
 8000e8c:	18ba      	adds	r2, r7, r2
 8000e8e:	7809      	ldrb	r1, [r1, #0]
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	188a      	adds	r2, r1, r2
 8000e94:	701a      	strb	r2, [r3, #0]
	  LCD_CMD(0x20); // enable standard instructions
 8000e96:	46a4      	mov	ip, r4
 8000e98:	2020      	movs	r0, #32
 8000e9a:	f7ff fdbb 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(address_x);   // location of cursor
 8000e9e:	197b      	adds	r3, r7, r5
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	46a4      	mov	ip, r4
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fdb5 	bl	8000a14 <LCD_CMD.2>
	  LCD_CMD(address_y);   //
 8000eaa:	19bb      	adds	r3, r7, r6
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	46a4      	mov	ip, r4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff fdaf 	bl	8000a14 <LCD_CMD.2>
	  c = *text;
 8000eb6:	2316      	movs	r3, #22
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	701a      	strb	r2, [r3, #0]
	  while(c)
 8000ec0:	e035      	b.n	8000f2e <LCD_SEND_TEXT.9+0xe6>
		  argument_number = 0;
 8000ec2:	2315      	movs	r3, #21
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
		  for(a = 5; a > 0; a--) {LCD_DATA(font_ASCII[*text - 32][argument_number]); argument_number ++; }
 8000eca:	2317      	movs	r3, #23
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2205      	movs	r2, #5
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e01b      	b.n	8000f0c <LCD_SEND_TEXT.9+0xc4>
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3b20      	subs	r3, #32
 8000eda:	001a      	movs	r2, r3
 8000edc:	2515      	movs	r5, #21
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	7819      	ldrb	r1, [r3, #0]
 8000ee2:	4818      	ldr	r0, [pc, #96]	; (8000f44 <LCD_SEND_TEXT.9+0xfc>)
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	189b      	adds	r3, r3, r2
 8000eea:	18c3      	adds	r3, r0, r3
 8000eec:	5c5b      	ldrb	r3, [r3, r1]
 8000eee:	46a4      	mov	ip, r4
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fd61 	bl	80009b8 <LCD_DATA.4>
 8000ef6:	197b      	adds	r3, r7, r5
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	197b      	adds	r3, r7, r5
 8000efc:	3201      	adds	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	2117      	movs	r1, #23
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	2317      	movs	r3, #23
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1de      	bne.n	8000ed4 <LCD_SEND_TEXT.9+0x8c>
		  LCD_DATA(0x00);
 8000f16:	46a4      	mov	ip, r4
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fd4d 	bl	80009b8 <LCD_DATA.4>
		  text ++;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3301      	adds	r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
		  c = *text;
 8000f24:	2316      	movs	r3, #22
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	701a      	strb	r2, [r3, #0]
	  while(c)
 8000f2e:	2316      	movs	r3, #22
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1c4      	bne.n	8000ec2 <LCD_SEND_TEXT.9+0x7a>
  }
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b007      	add	sp, #28
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	08007044 	.word	0x08007044

08000f48 <send_time_data.6>:
  {
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	b08b      	sub	sp, #44	; 0x2c
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4664      	mov	r4, ip
 8000f50:	4663      	mov	r3, ip
 8000f52:	607b      	str	r3, [r7, #4]
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 8000f54:	2310      	movs	r3, #16
 8000f56:	18f9      	adds	r1, r7, r3
 8000f58:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <send_time_data.6+0x17c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f004 ff1d 	bl	8005d9c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 8000f62:	250c      	movs	r5, #12
 8000f64:	1979      	adds	r1, r7, r5
 8000f66:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <send_time_data.6+0x17c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f005 f81a 	bl	8005fa4 <HAL_RTC_GetDate>
	  week_day = date.WeekDay;
 8000f70:	2627      	movs	r6, #39	; 0x27
 8000f72:	19bb      	adds	r3, r7, r6
 8000f74:	197a      	adds	r2, r7, r5
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	701a      	strb	r2, [r3, #0]
	  LCD_SEND_TEXT(0, 0, "*** Today ***");
 8000f7a:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <send_time_data.6+0x180>)
 8000f7c:	46a4      	mov	ip, r4
 8000f7e:	001a      	movs	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff60 	bl	8000e48 <LCD_SEND_TEXT.9>
	  switch (week_day)
 8000f88:	19bb      	adds	r3, r7, r6
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b07      	cmp	r3, #7
 8000f8e:	d83c      	bhi.n	800100a <send_time_data.6+0xc2>
 8000f90:	009a      	lsls	r2, r3, #2
 8000f92:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <send_time_data.6+0x184>)
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	469f      	mov	pc, r3
	  case 1: LCD_SEND_TEXT(0, 1, "Monday :,(   ");
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <send_time_data.6+0x188>)
 8000f9c:	46a4      	mov	ip, r4
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff50 	bl	8000e48 <LCD_SEND_TEXT.9>
	  break;
 8000fa8:	e02f      	b.n	800100a <send_time_data.6+0xc2>
	  case 2: LCD_SEND_TEXT(0, 1, "Tuesday :-[  ");
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <send_time_data.6+0x18c>)
 8000fac:	46a4      	mov	ip, r4
 8000fae:	001a      	movs	r2, r3
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff ff48 	bl	8000e48 <LCD_SEND_TEXT.9>
	  break;
 8000fb8:	e027      	b.n	800100a <send_time_data.6+0xc2>
	  case 3: LCD_SEND_TEXT(0, 1, "Wednesday :-(");
 8000fba:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <send_time_data.6+0x190>)
 8000fbc:	46a4      	mov	ip, r4
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff ff40 	bl	8000e48 <LCD_SEND_TEXT.9>
	  break;
 8000fc8:	e01f      	b.n	800100a <send_time_data.6+0xc2>
	  case 4: LCD_SEND_TEXT(0, 1, "Thursday :-| ");
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <send_time_data.6+0x194>)
 8000fcc:	46a4      	mov	ip, r4
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff ff38 	bl	8000e48 <LCD_SEND_TEXT.9>
	  break;
 8000fd8:	e017      	b.n	800100a <send_time_data.6+0xc2>
	  case 5: LCD_SEND_TEXT(0, 1, "Friday :-)   ");
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <send_time_data.6+0x198>)
 8000fdc:	46a4      	mov	ip, r4
 8000fde:	001a      	movs	r2, r3
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff ff30 	bl	8000e48 <LCD_SEND_TEXT.9>
	  break;
 8000fe8:	e00f      	b.n	800100a <send_time_data.6+0xc2>
	  case 6: LCD_SEND_TEXT(0, 1, "Saturday :-D ");
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <send_time_data.6+0x19c>)
 8000fec:	46a4      	mov	ip, r4
 8000fee:	001a      	movs	r2, r3
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff ff28 	bl	8000e48 <LCD_SEND_TEXT.9>
	  break;
 8000ff8:	e007      	b.n	800100a <send_time_data.6+0xc2>
	  case 7: LCD_SEND_TEXT(0, 1, "Sunday :-)   ");
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <send_time_data.6+0x1a0>)
 8000ffc:	46a4      	mov	ip, r4
 8000ffe:	001a      	movs	r2, r3
 8001000:	2101      	movs	r1, #1
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ff20 	bl	8000e48 <LCD_SEND_TEXT.9>
	  break;
 8001008:	46c0      	nop			; (mov r8, r8)
	  LCD_SEND_DIGIT(0, 2, time.Hours);
 800100a:	2510      	movs	r5, #16
 800100c:	197b      	adds	r3, r7, r5
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	46a4      	mov	ip, r4
 8001012:	001a      	movs	r2, r3
 8001014:	2102      	movs	r1, #2
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fe68 	bl	8000cec <LCD_SEND_DIGIT.7>
	  LCD_DATA(0x00);
 800101c:	46a4      	mov	ip, r4
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff fcca 	bl	80009b8 <LCD_DATA.4>
	  LCD_DATA(0x44);
 8001024:	46a4      	mov	ip, r4
 8001026:	2044      	movs	r0, #68	; 0x44
 8001028:	f7ff fcc6 	bl	80009b8 <LCD_DATA.4>
	  LCD_SEND_DIGIT(15, 2, time.Minutes);
 800102c:	197b      	adds	r3, r7, r5
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	46a4      	mov	ip, r4
 8001032:	001a      	movs	r2, r3
 8001034:	2102      	movs	r1, #2
 8001036:	200f      	movs	r0, #15
 8001038:	f7ff fe58 	bl	8000cec <LCD_SEND_DIGIT.7>
	  LCD_DATA(0x00);
 800103c:	46a4      	mov	ip, r4
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff fcba 	bl	80009b8 <LCD_DATA.4>
	  LCD_DATA(0x44);
 8001044:	46a4      	mov	ip, r4
 8001046:	2044      	movs	r0, #68	; 0x44
 8001048:	f7ff fcb6 	bl	80009b8 <LCD_DATA.4>
	  LCD_SEND_DIGIT(29, 2, time.Seconds);
 800104c:	197b      	adds	r3, r7, r5
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	46a4      	mov	ip, r4
 8001052:	001a      	movs	r2, r3
 8001054:	2102      	movs	r1, #2
 8001056:	201d      	movs	r0, #29
 8001058:	f7ff fe48 	bl	8000cec <LCD_SEND_DIGIT.7>
	  LCD_SEND_DIGIT(0, 3, date.Date);
 800105c:	250c      	movs	r5, #12
 800105e:	197b      	adds	r3, r7, r5
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	46a4      	mov	ip, r4
 8001064:	001a      	movs	r2, r3
 8001066:	2103      	movs	r1, #3
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fe3f 	bl	8000cec <LCD_SEND_DIGIT.7>
	  LCD_DATA(0x00);
 800106e:	46a4      	mov	ip, r4
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fca1 	bl	80009b8 <LCD_DATA.4>
	  LCD_DATA(0x80);
 8001076:	46a4      	mov	ip, r4
 8001078:	2080      	movs	r0, #128	; 0x80
 800107a:	f7ff fc9d 	bl	80009b8 <LCD_DATA.4>
	  LCD_SEND_DIGIT(15, 3, date.Month);
 800107e:	197b      	adds	r3, r7, r5
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	46a4      	mov	ip, r4
 8001084:	001a      	movs	r2, r3
 8001086:	2103      	movs	r1, #3
 8001088:	200f      	movs	r0, #15
 800108a:	f7ff fe2f 	bl	8000cec <LCD_SEND_DIGIT.7>
	  LCD_DATA(0x00);
 800108e:	46a4      	mov	ip, r4
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fc91 	bl	80009b8 <LCD_DATA.4>
	  LCD_DATA(0x80);
 8001096:	46a4      	mov	ip, r4
 8001098:	2080      	movs	r0, #128	; 0x80
 800109a:	f7ff fc8d 	bl	80009b8 <LCD_DATA.4>
	  LCD_SEND_DIGIT(30, 3, 20);
 800109e:	46a4      	mov	ip, r4
 80010a0:	2214      	movs	r2, #20
 80010a2:	2103      	movs	r1, #3
 80010a4:	201e      	movs	r0, #30
 80010a6:	f7ff fe21 	bl	8000cec <LCD_SEND_DIGIT.7>
	  LCD_SEND_DIGIT(42, 3, date.Year);
 80010aa:	197b      	adds	r3, r7, r5
 80010ac:	78db      	ldrb	r3, [r3, #3]
 80010ae:	46a4      	mov	ip, r4
 80010b0:	001a      	movs	r2, r3
 80010b2:	2103      	movs	r1, #3
 80010b4:	202a      	movs	r0, #42	; 0x2a
 80010b6:	f7ff fe19 	bl	8000cec <LCD_SEND_DIGIT.7>
  }
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b00b      	add	sp, #44	; 0x2c
 80010c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	200002f4 	.word	0x200002f4
 80010c8:	08006d90 	.word	0x08006d90
 80010cc:	08007224 	.word	0x08007224
 80010d0:	08006da0 	.word	0x08006da0
 80010d4:	08006db0 	.word	0x08006db0
 80010d8:	08006dc0 	.word	0x08006dc0
 80010dc:	08006dd0 	.word	0x08006dd0
 80010e0:	08006de0 	.word	0x08006de0
 80010e4:	08006df0 	.word	0x08006df0
 80010e8:	08006e00 	.word	0x08006e00

080010ec <ENCODER_ROTATION_DIRECTION.8>:
   {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4663      	mov	r3, ip
 80010f4:	607b      	str	r3, [r7, #4]
 	  int tim1_value = htim1.Instance->CNT;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <ENCODER_ROTATION_DIRECTION.8+0x48>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	60fb      	str	r3, [r7, #12]
 	  tim1_value = tim1_value / 4;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da00      	bge.n	8001106 <ENCODER_ROTATION_DIRECTION.8+0x1a>
 8001104:	3303      	adds	r3, #3
 8001106:	109b      	asrs	r3, r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
 	  direction = last_value - tim1_value;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <ENCODER_ROTATION_DIRECTION.8+0x4c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	b2da      	uxtb	r2, r3
 8001118:	210b      	movs	r1, #11
 800111a:	187b      	adds	r3, r7, r1
 800111c:	701a      	strb	r2, [r3, #0]
 	  last_value = tim1_value;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <ENCODER_ROTATION_DIRECTION.8+0x4c>)
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	601a      	str	r2, [r3, #0]
 	  return direction;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b25b      	sxtb	r3, r3
   }
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	20000378 	.word	0x20000378
 8001138:	200003c4 	.word	0x200003c4

0800113c <SET_HOUR_DATE.11>:
  {
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	b09d      	sub	sp, #116	; 0x74
 8001140:	af00      	add	r7, sp, #0
 8001142:	4664      	mov	r4, ip
 8001144:	4663      	mov	r3, ip
 8001146:	607b      	str	r3, [r7, #4]
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 8001148:	2358      	movs	r3, #88	; 0x58
 800114a:	18f9      	adds	r1, r7, r3
 800114c:	4bd3      	ldr	r3, [pc, #844]	; (800149c <SET_HOUR_DATE.11+0x360>)
 800114e:	2200      	movs	r2, #0
 8001150:	0018      	movs	r0, r3
 8001152:	f004 fe23 	bl	8005d9c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 8001156:	2354      	movs	r3, #84	; 0x54
 8001158:	18f9      	adds	r1, r7, r3
 800115a:	4bd0      	ldr	r3, [pc, #832]	; (800149c <SET_HOUR_DATE.11+0x360>)
 800115c:	2200      	movs	r2, #0
 800115e:	0018      	movs	r0, r3
 8001160:	f004 ff20 	bl	8005fa4 <HAL_RTC_GetDate>
	  menu = 1;
 8001164:	236f      	movs	r3, #111	; 0x6f
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
	  LCD_CLEAR();
 800116c:	46a4      	mov	ip, r4
 800116e:	f7ff fccd 	bl	8000b0c <LCD_CLEAR.10>
		  while(menu == 1)   // set hour
 8001172:	e0b4      	b.n	80012de <SET_HOUR_DATE.11+0x1a2>
			  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 8001174:	2558      	movs	r5, #88	; 0x58
 8001176:	1979      	adds	r1, r7, r5
 8001178:	4bc8      	ldr	r3, [pc, #800]	; (800149c <SET_HOUR_DATE.11+0x360>)
 800117a:	2200      	movs	r2, #0
 800117c:	0018      	movs	r0, r3
 800117e:	f004 fe0d 	bl	8005d9c <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 8001182:	2354      	movs	r3, #84	; 0x54
 8001184:	18f9      	adds	r1, r7, r3
 8001186:	4bc5      	ldr	r3, [pc, #788]	; (800149c <SET_HOUR_DATE.11+0x360>)
 8001188:	2200      	movs	r2, #0
 800118a:	0018      	movs	r0, r3
 800118c:	f004 ff0a 	bl	8005fa4 <HAL_RTC_GetDate>
		 	  RTC_TimeTypeDef sTime = {0};   // set time
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	0018      	movs	r0, r3
 8001196:	2314      	movs	r3, #20
 8001198:	001a      	movs	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f005 fdc0 	bl	8006d20 <memset>
			  a = time.Hours;
 80011a0:	197b      	adds	r3, r7, r5
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	256e      	movs	r5, #110	; 0x6e
 80011a6:	197b      	adds	r3, r7, r5
 80011a8:	701a      	strb	r2, [r3, #0]
			  a = a + ENCODER_ROTATION_DIRECTION();
 80011aa:	46a4      	mov	ip, r4
 80011ac:	f7ff ff9e 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 80011b0:	0003      	movs	r3, r0
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	197b      	adds	r3, r7, r5
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	701a      	strb	r2, [r3, #0]
			  if(a > 23) a = 23;
 80011c0:	197b      	adds	r3, r7, r5
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	2b17      	cmp	r3, #23
 80011c8:	dd02      	ble.n	80011d0 <SET_HOUR_DATE.11+0x94>
 80011ca:	197b      	adds	r3, r7, r5
 80011cc:	2217      	movs	r2, #23
 80011ce:	701a      	strb	r2, [r3, #0]
			  if(a < 0) a = 0;
 80011d0:	226e      	movs	r2, #110	; 0x6e
 80011d2:	18bb      	adds	r3, r7, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b7f      	cmp	r3, #127	; 0x7f
 80011d8:	d902      	bls.n	80011e0 <SET_HOUR_DATE.11+0xa4>
 80011da:	18bb      	adds	r3, r7, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
			  sTime.Hours = a;
 80011e0:	266e      	movs	r6, #110	; 0x6e
 80011e2:	19bb      	adds	r3, r7, r6
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	2140      	movs	r1, #64	; 0x40
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	701a      	strb	r2, [r3, #0]
			  sTime.Minutes = time.Minutes;
 80011ec:	2558      	movs	r5, #88	; 0x58
 80011ee:	197b      	adds	r3, r7, r5
 80011f0:	785a      	ldrb	r2, [r3, #1]
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	705a      	strb	r2, [r3, #1]
			  sTime.Seconds = time.Seconds;
 80011f6:	197b      	adds	r3, r7, r5
 80011f8:	789a      	ldrb	r2, [r3, #2]
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	709a      	strb	r2, [r3, #2]
			  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80011fe:	1879      	adds	r1, r7, r1
 8001200:	4ba6      	ldr	r3, [pc, #664]	; (800149c <SET_HOUR_DATE.11+0x360>)
 8001202:	2200      	movs	r2, #0
 8001204:	0018      	movs	r0, r3
 8001206:	f004 fd0d 	bl	8005c24 <HAL_RTC_SetTime>
			  LCD_SEND_TEXT(15, 0, "SET TIME:");
 800120a:	4ba5      	ldr	r3, [pc, #660]	; (80014a0 <SET_HOUR_DATE.11+0x364>)
 800120c:	46a4      	mov	ip, r4
 800120e:	001a      	movs	r2, r3
 8001210:	2100      	movs	r1, #0
 8001212:	200f      	movs	r0, #15
 8001214:	f7ff fe18 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 2, "Hrs:");
 8001218:	4ba2      	ldr	r3, [pc, #648]	; (80014a4 <SET_HOUR_DATE.11+0x368>)
 800121a:	46a4      	mov	ip, r4
 800121c:	001a      	movs	r2, r3
 800121e:	2102      	movs	r1, #2
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fe11 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 3, "Mins:");
 8001226:	4ba0      	ldr	r3, [pc, #640]	; (80014a8 <SET_HOUR_DATE.11+0x36c>)
 8001228:	46a4      	mov	ip, r4
 800122a:	001a      	movs	r2, r3
 800122c:	2103      	movs	r1, #3
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fe0a 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 4, "Secs:");
 8001234:	4b9d      	ldr	r3, [pc, #628]	; (80014ac <SET_HOUR_DATE.11+0x370>)
 8001236:	46a4      	mov	ip, r4
 8001238:	001a      	movs	r2, r3
 800123a:	2104      	movs	r1, #4
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fe03 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 2, ">");
 8001242:	4b9b      	ldr	r3, [pc, #620]	; (80014b0 <SET_HOUR_DATE.11+0x374>)
 8001244:	46a4      	mov	ip, r4
 8001246:	001a      	movs	r2, r3
 8001248:	2102      	movs	r1, #2
 800124a:	2027      	movs	r0, #39	; 0x27
 800124c:	f7ff fdfc 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 2, "<");
 8001250:	4b98      	ldr	r3, [pc, #608]	; (80014b4 <SET_HOUR_DATE.11+0x378>)
 8001252:	46a4      	mov	ip, r4
 8001254:	001a      	movs	r2, r3
 8001256:	2102      	movs	r1, #2
 8001258:	203b      	movs	r0, #59	; 0x3b
 800125a:	f7ff fdf5 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 3, " ");
 800125e:	4b96      	ldr	r3, [pc, #600]	; (80014b8 <SET_HOUR_DATE.11+0x37c>)
 8001260:	46a4      	mov	ip, r4
 8001262:	001a      	movs	r2, r3
 8001264:	2103      	movs	r1, #3
 8001266:	2027      	movs	r0, #39	; 0x27
 8001268:	f7ff fdee 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 3, " ");
 800126c:	4b92      	ldr	r3, [pc, #584]	; (80014b8 <SET_HOUR_DATE.11+0x37c>)
 800126e:	46a4      	mov	ip, r4
 8001270:	001a      	movs	r2, r3
 8001272:	2103      	movs	r1, #3
 8001274:	203b      	movs	r0, #59	; 0x3b
 8001276:	f7ff fde7 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 4, " ");
 800127a:	4b8f      	ldr	r3, [pc, #572]	; (80014b8 <SET_HOUR_DATE.11+0x37c>)
 800127c:	46a4      	mov	ip, r4
 800127e:	001a      	movs	r2, r3
 8001280:	2104      	movs	r1, #4
 8001282:	2027      	movs	r0, #39	; 0x27
 8001284:	f7ff fde0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 4, " ");
 8001288:	4b8b      	ldr	r3, [pc, #556]	; (80014b8 <SET_HOUR_DATE.11+0x37c>)
 800128a:	46a4      	mov	ip, r4
 800128c:	001a      	movs	r2, r3
 800128e:	2104      	movs	r1, #4
 8001290:	203b      	movs	r0, #59	; 0x3b
 8001292:	f7ff fdd9 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_DIGIT(45, 2, a);
 8001296:	19bb      	adds	r3, r7, r6
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	46a4      	mov	ip, r4
 800129e:	001a      	movs	r2, r3
 80012a0:	2102      	movs	r1, #2
 80012a2:	202d      	movs	r0, #45	; 0x2d
 80012a4:	f7ff fd22 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 3, time.Minutes);
 80012a8:	197b      	adds	r3, r7, r5
 80012aa:	785b      	ldrb	r3, [r3, #1]
 80012ac:	46a4      	mov	ip, r4
 80012ae:	001a      	movs	r2, r3
 80012b0:	2103      	movs	r1, #3
 80012b2:	202d      	movs	r0, #45	; 0x2d
 80012b4:	f7ff fd1a 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 4, time.Seconds);
 80012b8:	197b      	adds	r3, r7, r5
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	46a4      	mov	ip, r4
 80012be:	001a      	movs	r2, r3
 80012c0:	2104      	movs	r1, #4
 80012c2:	202d      	movs	r0, #45	; 0x2d
 80012c4:	f7ff fd12 	bl	8000cec <LCD_SEND_DIGIT.7>
			  if(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET)	{menu = 2;}
 80012c8:	4b7c      	ldr	r3, [pc, #496]	; (80014bc <SET_HOUR_DATE.11+0x380>)
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0018      	movs	r0, r3
 80012ce:	f003 f8d1 	bl	8004474 <HAL_GPIO_ReadPin>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d103      	bne.n	80012de <SET_HOUR_DATE.11+0x1a2>
 80012d6:	236f      	movs	r3, #111	; 0x6f
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	2202      	movs	r2, #2
 80012dc:	701a      	strb	r2, [r3, #0]
		  while(menu == 1)   // set hour
 80012de:	236f      	movs	r3, #111	; 0x6f
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d100      	bne.n	80012ea <SET_HOUR_DATE.11+0x1ae>
 80012e8:	e744      	b.n	8001174 <SET_HOUR_DATE.11+0x38>
		  while(menu == 2)   // set minutes
 80012ea:	e0cf      	b.n	800148c <SET_HOUR_DATE.11+0x350>
			  while(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET);
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	4b73      	ldr	r3, [pc, #460]	; (80014bc <SET_HOUR_DATE.11+0x380>)
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	0018      	movs	r0, r3
 80012f4:	f003 f8be 	bl	8004474 <HAL_GPIO_ReadPin>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d0f8      	beq.n	80012ee <SET_HOUR_DATE.11+0x1b2>
			  while(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET);
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <SET_HOUR_DATE.11+0x380>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0018      	movs	r0, r3
 8001304:	f003 f8b6 	bl	8004474 <HAL_GPIO_ReadPin>
 8001308:	1e03      	subs	r3, r0, #0
 800130a:	d0f8      	beq.n	80012fe <SET_HOUR_DATE.11+0x1c2>
			  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 800130c:	2558      	movs	r5, #88	; 0x58
 800130e:	1979      	adds	r1, r7, r5
 8001310:	4b62      	ldr	r3, [pc, #392]	; (800149c <SET_HOUR_DATE.11+0x360>)
 8001312:	2200      	movs	r2, #0
 8001314:	0018      	movs	r0, r3
 8001316:	f004 fd41 	bl	8005d9c <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 800131a:	2354      	movs	r3, #84	; 0x54
 800131c:	18f9      	adds	r1, r7, r3
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <SET_HOUR_DATE.11+0x360>)
 8001320:	2200      	movs	r2, #0
 8001322:	0018      	movs	r0, r3
 8001324:	f004 fe3e 	bl	8005fa4 <HAL_RTC_GetDate>
		 	  RTC_TimeTypeDef sTime = {0};   // set time
 8001328:	232c      	movs	r3, #44	; 0x2c
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	0018      	movs	r0, r3
 800132e:	2314      	movs	r3, #20
 8001330:	001a      	movs	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	f005 fcf4 	bl	8006d20 <memset>
			  a = time.Minutes;
 8001338:	197b      	adds	r3, r7, r5
 800133a:	785a      	ldrb	r2, [r3, #1]
 800133c:	256e      	movs	r5, #110	; 0x6e
 800133e:	197b      	adds	r3, r7, r5
 8001340:	701a      	strb	r2, [r3, #0]
			  a = a + ENCODER_ROTATION_DIRECTION();
 8001342:	46a4      	mov	ip, r4
 8001344:	f7ff fed2 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8001348:	0003      	movs	r3, r0
 800134a:	b2da      	uxtb	r2, r3
 800134c:	197b      	adds	r3, r7, r5
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	b2da      	uxtb	r2, r3
 8001354:	197b      	adds	r3, r7, r5
 8001356:	701a      	strb	r2, [r3, #0]
			  if(a > 59) a = 59;
 8001358:	197b      	adds	r3, r7, r5
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	2b3b      	cmp	r3, #59	; 0x3b
 8001360:	dd02      	ble.n	8001368 <SET_HOUR_DATE.11+0x22c>
 8001362:	197b      	adds	r3, r7, r5
 8001364:	223b      	movs	r2, #59	; 0x3b
 8001366:	701a      	strb	r2, [r3, #0]
			  if(a < 0) a = 0;
 8001368:	226e      	movs	r2, #110	; 0x6e
 800136a:	18bb      	adds	r3, r7, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b7f      	cmp	r3, #127	; 0x7f
 8001370:	d902      	bls.n	8001378 <SET_HOUR_DATE.11+0x23c>
 8001372:	18bb      	adds	r3, r7, r2
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
			  sTime.Hours = time.Hours;
 8001378:	2558      	movs	r5, #88	; 0x58
 800137a:	197b      	adds	r3, r7, r5
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	212c      	movs	r1, #44	; 0x2c
 8001380:	187b      	adds	r3, r7, r1
 8001382:	701a      	strb	r2, [r3, #0]
			  sTime.Minutes = a;
 8001384:	266e      	movs	r6, #110	; 0x6e
 8001386:	19bb      	adds	r3, r7, r6
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	187b      	adds	r3, r7, r1
 800138c:	705a      	strb	r2, [r3, #1]
			  sTime.Seconds = time.Seconds;
 800138e:	197b      	adds	r3, r7, r5
 8001390:	789a      	ldrb	r2, [r3, #2]
 8001392:	187b      	adds	r3, r7, r1
 8001394:	709a      	strb	r2, [r3, #2]
			  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001396:	1879      	adds	r1, r7, r1
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <SET_HOUR_DATE.11+0x360>)
 800139a:	2200      	movs	r2, #0
 800139c:	0018      	movs	r0, r3
 800139e:	f004 fc41 	bl	8005c24 <HAL_RTC_SetTime>
			  LCD_SEND_TEXT(15, 0, "SET TIME:");
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <SET_HOUR_DATE.11+0x364>)
 80013a4:	46a4      	mov	ip, r4
 80013a6:	001a      	movs	r2, r3
 80013a8:	2100      	movs	r1, #0
 80013aa:	200f      	movs	r0, #15
 80013ac:	f7ff fd4c 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 2, "Hrs:");
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <SET_HOUR_DATE.11+0x368>)
 80013b2:	46a4      	mov	ip, r4
 80013b4:	001a      	movs	r2, r3
 80013b6:	2102      	movs	r1, #2
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fd45 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 3, "Mins:");
 80013be:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <SET_HOUR_DATE.11+0x36c>)
 80013c0:	46a4      	mov	ip, r4
 80013c2:	001a      	movs	r2, r3
 80013c4:	2103      	movs	r1, #3
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fd3e 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 4, "Secs:");
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <SET_HOUR_DATE.11+0x370>)
 80013ce:	46a4      	mov	ip, r4
 80013d0:	001a      	movs	r2, r3
 80013d2:	2104      	movs	r1, #4
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fd37 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 2, " ");
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <SET_HOUR_DATE.11+0x37c>)
 80013dc:	46a4      	mov	ip, r4
 80013de:	001a      	movs	r2, r3
 80013e0:	2102      	movs	r1, #2
 80013e2:	2027      	movs	r0, #39	; 0x27
 80013e4:	f7ff fd30 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 2, " ");
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <SET_HOUR_DATE.11+0x37c>)
 80013ea:	46a4      	mov	ip, r4
 80013ec:	001a      	movs	r2, r3
 80013ee:	2102      	movs	r1, #2
 80013f0:	203b      	movs	r0, #59	; 0x3b
 80013f2:	f7ff fd29 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 3, ">");
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <SET_HOUR_DATE.11+0x374>)
 80013f8:	46a4      	mov	ip, r4
 80013fa:	001a      	movs	r2, r3
 80013fc:	2103      	movs	r1, #3
 80013fe:	2027      	movs	r0, #39	; 0x27
 8001400:	f7ff fd22 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 3, "<");
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <SET_HOUR_DATE.11+0x378>)
 8001406:	46a4      	mov	ip, r4
 8001408:	001a      	movs	r2, r3
 800140a:	2103      	movs	r1, #3
 800140c:	203b      	movs	r0, #59	; 0x3b
 800140e:	f7ff fd1b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 4, " ");
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <SET_HOUR_DATE.11+0x37c>)
 8001414:	46a4      	mov	ip, r4
 8001416:	001a      	movs	r2, r3
 8001418:	2104      	movs	r1, #4
 800141a:	2027      	movs	r0, #39	; 0x27
 800141c:	f7ff fd14 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 4, " ");
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <SET_HOUR_DATE.11+0x37c>)
 8001422:	46a4      	mov	ip, r4
 8001424:	001a      	movs	r2, r3
 8001426:	2104      	movs	r1, #4
 8001428:	203b      	movs	r0, #59	; 0x3b
 800142a:	f7ff fd0d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_DIGIT(45, 2, time.Hours);
 800142e:	197b      	adds	r3, r7, r5
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	46a4      	mov	ip, r4
 8001434:	001a      	movs	r2, r3
 8001436:	2102      	movs	r1, #2
 8001438:	202d      	movs	r0, #45	; 0x2d
 800143a:	f7ff fc57 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 3, a);
 800143e:	19bb      	adds	r3, r7, r6
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b25b      	sxtb	r3, r3
 8001444:	46a4      	mov	ip, r4
 8001446:	001a      	movs	r2, r3
 8001448:	2103      	movs	r1, #3
 800144a:	202d      	movs	r0, #45	; 0x2d
 800144c:	f7ff fc4e 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 4, time.Seconds);
 8001450:	197b      	adds	r3, r7, r5
 8001452:	789b      	ldrb	r3, [r3, #2]
 8001454:	46a4      	mov	ip, r4
 8001456:	001a      	movs	r2, r3
 8001458:	2104      	movs	r1, #4
 800145a:	202d      	movs	r0, #45	; 0x2d
 800145c:	f7ff fc46 	bl	8000cec <LCD_SEND_DIGIT.7>
			  if(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET)	{menu = 1;}
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <SET_HOUR_DATE.11+0x380>)
 8001462:	2140      	movs	r1, #64	; 0x40
 8001464:	0018      	movs	r0, r3
 8001466:	f003 f805 	bl	8004474 <HAL_GPIO_ReadPin>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d103      	bne.n	8001476 <SET_HOUR_DATE.11+0x33a>
 800146e:	236f      	movs	r3, #111	; 0x6f
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
			  if(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET)	{menu = 3;}
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <SET_HOUR_DATE.11+0x380>)
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	0018      	movs	r0, r3
 800147c:	f002 fffa 	bl	8004474 <HAL_GPIO_ReadPin>
 8001480:	1e03      	subs	r3, r0, #0
 8001482:	d103      	bne.n	800148c <SET_HOUR_DATE.11+0x350>
 8001484:	236f      	movs	r3, #111	; 0x6f
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	2203      	movs	r2, #3
 800148a:	701a      	strb	r2, [r3, #0]
		  while(menu == 2)   // set minutes
 800148c:	236f      	movs	r3, #111	; 0x6f
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d100      	bne.n	8001498 <SET_HOUR_DATE.11+0x35c>
 8001496:	e729      	b.n	80012ec <SET_HOUR_DATE.11+0x1b0>
		  while(menu == 3)   // set seconds
 8001498:	e0e5      	b.n	8001666 <SET_HOUR_DATE.11+0x52a>
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	200002f4 	.word	0x200002f4
 80014a0:	08006e10 	.word	0x08006e10
 80014a4:	08006e1c 	.word	0x08006e1c
 80014a8:	08006e24 	.word	0x08006e24
 80014ac:	08006e2c 	.word	0x08006e2c
 80014b0:	08006e34 	.word	0x08006e34
 80014b4:	08006e38 	.word	0x08006e38
 80014b8:	08006e3c 	.word	0x08006e3c
 80014bc:	48001400 	.word	0x48001400
			  while(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET);
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	4bec      	ldr	r3, [pc, #944]	; (8001874 <SET_HOUR_DATE.11+0x738>)
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	0018      	movs	r0, r3
 80014c8:	f002 ffd4 	bl	8004474 <HAL_GPIO_ReadPin>
 80014cc:	1e03      	subs	r3, r0, #0
 80014ce:	d0f8      	beq.n	80014c2 <SET_HOUR_DATE.11+0x386>
			  while(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET);
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	4be8      	ldr	r3, [pc, #928]	; (8001874 <SET_HOUR_DATE.11+0x738>)
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	0018      	movs	r0, r3
 80014d8:	f002 ffcc 	bl	8004474 <HAL_GPIO_ReadPin>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d0f8      	beq.n	80014d2 <SET_HOUR_DATE.11+0x396>
			  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 80014e0:	2558      	movs	r5, #88	; 0x58
 80014e2:	1979      	adds	r1, r7, r5
 80014e4:	4be4      	ldr	r3, [pc, #912]	; (8001878 <SET_HOUR_DATE.11+0x73c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	0018      	movs	r0, r3
 80014ea:	f004 fc57 	bl	8005d9c <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 80014ee:	2354      	movs	r3, #84	; 0x54
 80014f0:	18f9      	adds	r1, r7, r3
 80014f2:	4be1      	ldr	r3, [pc, #900]	; (8001878 <SET_HOUR_DATE.11+0x73c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	0018      	movs	r0, r3
 80014f8:	f004 fd54 	bl	8005fa4 <HAL_RTC_GetDate>
		 	  RTC_TimeTypeDef sTime = {0};   // set time
 80014fc:	2318      	movs	r3, #24
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	0018      	movs	r0, r3
 8001502:	2314      	movs	r3, #20
 8001504:	001a      	movs	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	f005 fc0a 	bl	8006d20 <memset>
			  a = time.Seconds;
 800150c:	197b      	adds	r3, r7, r5
 800150e:	789a      	ldrb	r2, [r3, #2]
 8001510:	256e      	movs	r5, #110	; 0x6e
 8001512:	197b      	adds	r3, r7, r5
 8001514:	701a      	strb	r2, [r3, #0]
			  a = a + ENCODER_ROTATION_DIRECTION();
 8001516:	46a4      	mov	ip, r4
 8001518:	f7ff fde8 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 800151c:	0003      	movs	r3, r0
 800151e:	b2da      	uxtb	r2, r3
 8001520:	197b      	adds	r3, r7, r5
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	b2da      	uxtb	r2, r3
 8001528:	197b      	adds	r3, r7, r5
 800152a:	701a      	strb	r2, [r3, #0]
			  if(a > 59) a = 59;
 800152c:	197b      	adds	r3, r7, r5
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b25b      	sxtb	r3, r3
 8001532:	2b3b      	cmp	r3, #59	; 0x3b
 8001534:	dd02      	ble.n	800153c <SET_HOUR_DATE.11+0x400>
 8001536:	197b      	adds	r3, r7, r5
 8001538:	223b      	movs	r2, #59	; 0x3b
 800153a:	701a      	strb	r2, [r3, #0]
			  if(a < 0) a = 0;
 800153c:	226e      	movs	r2, #110	; 0x6e
 800153e:	18bb      	adds	r3, r7, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b7f      	cmp	r3, #127	; 0x7f
 8001544:	d902      	bls.n	800154c <SET_HOUR_DATE.11+0x410>
 8001546:	18bb      	adds	r3, r7, r2
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
			  sTime.Hours = time.Hours;
 800154c:	2558      	movs	r5, #88	; 0x58
 800154e:	197b      	adds	r3, r7, r5
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	2118      	movs	r1, #24
 8001554:	187b      	adds	r3, r7, r1
 8001556:	701a      	strb	r2, [r3, #0]
			  sTime.Minutes = time.Minutes;
 8001558:	197b      	adds	r3, r7, r5
 800155a:	785a      	ldrb	r2, [r3, #1]
 800155c:	187b      	adds	r3, r7, r1
 800155e:	705a      	strb	r2, [r3, #1]
			  sTime.Seconds = a;
 8001560:	266e      	movs	r6, #110	; 0x6e
 8001562:	19bb      	adds	r3, r7, r6
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	187b      	adds	r3, r7, r1
 8001568:	709a      	strb	r2, [r3, #2]
			  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800156a:	1879      	adds	r1, r7, r1
 800156c:	4bc2      	ldr	r3, [pc, #776]	; (8001878 <SET_HOUR_DATE.11+0x73c>)
 800156e:	2200      	movs	r2, #0
 8001570:	0018      	movs	r0, r3
 8001572:	f004 fb57 	bl	8005c24 <HAL_RTC_SetTime>
			  LCD_SEND_TEXT(15, 0, "SET TIME:");
 8001576:	4bc1      	ldr	r3, [pc, #772]	; (800187c <SET_HOUR_DATE.11+0x740>)
 8001578:	46a4      	mov	ip, r4
 800157a:	001a      	movs	r2, r3
 800157c:	2100      	movs	r1, #0
 800157e:	200f      	movs	r0, #15
 8001580:	f7ff fc62 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 2, "Hrs:");
 8001584:	4bbe      	ldr	r3, [pc, #760]	; (8001880 <SET_HOUR_DATE.11+0x744>)
 8001586:	46a4      	mov	ip, r4
 8001588:	001a      	movs	r2, r3
 800158a:	2102      	movs	r1, #2
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fc5b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 3, "Mins:");
 8001592:	4bbc      	ldr	r3, [pc, #752]	; (8001884 <SET_HOUR_DATE.11+0x748>)
 8001594:	46a4      	mov	ip, r4
 8001596:	001a      	movs	r2, r3
 8001598:	2103      	movs	r1, #3
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fc54 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 4, "Secs:");
 80015a0:	4bb9      	ldr	r3, [pc, #740]	; (8001888 <SET_HOUR_DATE.11+0x74c>)
 80015a2:	46a4      	mov	ip, r4
 80015a4:	001a      	movs	r2, r3
 80015a6:	2104      	movs	r1, #4
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fc4d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 2, " ");
 80015ae:	4bb7      	ldr	r3, [pc, #732]	; (800188c <SET_HOUR_DATE.11+0x750>)
 80015b0:	46a4      	mov	ip, r4
 80015b2:	001a      	movs	r2, r3
 80015b4:	2102      	movs	r1, #2
 80015b6:	2027      	movs	r0, #39	; 0x27
 80015b8:	f7ff fc46 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 2, " ");
 80015bc:	4bb3      	ldr	r3, [pc, #716]	; (800188c <SET_HOUR_DATE.11+0x750>)
 80015be:	46a4      	mov	ip, r4
 80015c0:	001a      	movs	r2, r3
 80015c2:	2102      	movs	r1, #2
 80015c4:	203b      	movs	r0, #59	; 0x3b
 80015c6:	f7ff fc3f 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 3, " ");
 80015ca:	4bb0      	ldr	r3, [pc, #704]	; (800188c <SET_HOUR_DATE.11+0x750>)
 80015cc:	46a4      	mov	ip, r4
 80015ce:	001a      	movs	r2, r3
 80015d0:	2103      	movs	r1, #3
 80015d2:	2027      	movs	r0, #39	; 0x27
 80015d4:	f7ff fc38 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 3, " ");
 80015d8:	4bac      	ldr	r3, [pc, #688]	; (800188c <SET_HOUR_DATE.11+0x750>)
 80015da:	46a4      	mov	ip, r4
 80015dc:	001a      	movs	r2, r3
 80015de:	2103      	movs	r1, #3
 80015e0:	203b      	movs	r0, #59	; 0x3b
 80015e2:	f7ff fc31 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 4, ">");
 80015e6:	4baa      	ldr	r3, [pc, #680]	; (8001890 <SET_HOUR_DATE.11+0x754>)
 80015e8:	46a4      	mov	ip, r4
 80015ea:	001a      	movs	r2, r3
 80015ec:	2104      	movs	r1, #4
 80015ee:	2027      	movs	r0, #39	; 0x27
 80015f0:	f7ff fc2a 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 4, "<");
 80015f4:	4ba7      	ldr	r3, [pc, #668]	; (8001894 <SET_HOUR_DATE.11+0x758>)
 80015f6:	46a4      	mov	ip, r4
 80015f8:	001a      	movs	r2, r3
 80015fa:	2104      	movs	r1, #4
 80015fc:	203b      	movs	r0, #59	; 0x3b
 80015fe:	f7ff fc23 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_DIGIT(45, 2, time.Hours);
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	46a4      	mov	ip, r4
 8001608:	001a      	movs	r2, r3
 800160a:	2102      	movs	r1, #2
 800160c:	202d      	movs	r0, #45	; 0x2d
 800160e:	f7ff fb6d 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 3, time.Minutes);
 8001612:	197b      	adds	r3, r7, r5
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	46a4      	mov	ip, r4
 8001618:	001a      	movs	r2, r3
 800161a:	2103      	movs	r1, #3
 800161c:	202d      	movs	r0, #45	; 0x2d
 800161e:	f7ff fb65 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 4, a);
 8001622:	19bb      	adds	r3, r7, r6
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b25b      	sxtb	r3, r3
 8001628:	46a4      	mov	ip, r4
 800162a:	001a      	movs	r2, r3
 800162c:	2104      	movs	r1, #4
 800162e:	202d      	movs	r0, #45	; 0x2d
 8001630:	f7ff fb5c 	bl	8000cec <LCD_SEND_DIGIT.7>
			  if(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET)	{menu = 2;}
 8001634:	4b8f      	ldr	r3, [pc, #572]	; (8001874 <SET_HOUR_DATE.11+0x738>)
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	0018      	movs	r0, r3
 800163a:	f002 ff1b 	bl	8004474 <HAL_GPIO_ReadPin>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d103      	bne.n	800164a <SET_HOUR_DATE.11+0x50e>
 8001642:	236f      	movs	r3, #111	; 0x6f
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	2202      	movs	r2, #2
 8001648:	701a      	strb	r2, [r3, #0]
			  if(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET)	{menu = 4; LCD_CLEAR();}
 800164a:	4b8a      	ldr	r3, [pc, #552]	; (8001874 <SET_HOUR_DATE.11+0x738>)
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	0018      	movs	r0, r3
 8001650:	f002 ff10 	bl	8004474 <HAL_GPIO_ReadPin>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d106      	bne.n	8001666 <SET_HOUR_DATE.11+0x52a>
 8001658:	236f      	movs	r3, #111	; 0x6f
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2204      	movs	r2, #4
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	46a4      	mov	ip, r4
 8001662:	f7ff fa53 	bl	8000b0c <LCD_CLEAR.10>
		  while(menu == 3)   // set seconds
 8001666:	236f      	movs	r3, #111	; 0x6f
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d100      	bne.n	8001672 <SET_HOUR_DATE.11+0x536>
 8001670:	e726      	b.n	80014c0 <SET_HOUR_DATE.11+0x384>
		  while(menu == 4)   // set year
 8001672:	e154      	b.n	800191e <SET_HOUR_DATE.11+0x7e2>
			  while(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET);
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	4b7f      	ldr	r3, [pc, #508]	; (8001874 <SET_HOUR_DATE.11+0x738>)
 8001678:	2140      	movs	r1, #64	; 0x40
 800167a:	0018      	movs	r0, r3
 800167c:	f002 fefa 	bl	8004474 <HAL_GPIO_ReadPin>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d0f8      	beq.n	8001676 <SET_HOUR_DATE.11+0x53a>
			  while(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET);
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	4b7b      	ldr	r3, [pc, #492]	; (8001874 <SET_HOUR_DATE.11+0x738>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0018      	movs	r0, r3
 800168c:	f002 fef2 	bl	8004474 <HAL_GPIO_ReadPin>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d0f8      	beq.n	8001686 <SET_HOUR_DATE.11+0x54a>
			  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 8001694:	2358      	movs	r3, #88	; 0x58
 8001696:	18f9      	adds	r1, r7, r3
 8001698:	4b77      	ldr	r3, [pc, #476]	; (8001878 <SET_HOUR_DATE.11+0x73c>)
 800169a:	2200      	movs	r2, #0
 800169c:	0018      	movs	r0, r3
 800169e:	f004 fb7d 	bl	8005d9c <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 80016a2:	2554      	movs	r5, #84	; 0x54
 80016a4:	1979      	adds	r1, r7, r5
 80016a6:	4b74      	ldr	r3, [pc, #464]	; (8001878 <SET_HOUR_DATE.11+0x73c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	0018      	movs	r0, r3
 80016ac:	f004 fc7a 	bl	8005fa4 <HAL_RTC_GetDate>
		 	  RTC_DateTypeDef sDate = {0};   // set date
 80016b0:	2314      	movs	r3, #20
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
		 	  week_day = date.WeekDay;
 80016b8:	0029      	movs	r1, r5
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	236d      	movs	r3, #109	; 0x6d
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	701a      	strb	r2, [r3, #0]
			  a = date.Year;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	78da      	ldrb	r2, [r3, #3]
 80016c8:	256e      	movs	r5, #110	; 0x6e
 80016ca:	197b      	adds	r3, r7, r5
 80016cc:	701a      	strb	r2, [r3, #0]
			  a = a + ENCODER_ROTATION_DIRECTION();
 80016ce:	46a4      	mov	ip, r4
 80016d0:	f7ff fd0c 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 80016d4:	0003      	movs	r3, r0
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	197b      	adds	r3, r7, r5
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	197b      	adds	r3, r7, r5
 80016e2:	701a      	strb	r2, [r3, #0]
			  if(a > 99) a = 99;
 80016e4:	197b      	adds	r3, r7, r5
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	2b63      	cmp	r3, #99	; 0x63
 80016ec:	dd02      	ble.n	80016f4 <SET_HOUR_DATE.11+0x5b8>
 80016ee:	197b      	adds	r3, r7, r5
 80016f0:	2263      	movs	r2, #99	; 0x63
 80016f2:	701a      	strb	r2, [r3, #0]
			  if(a < 0) a = 0;
 80016f4:	226e      	movs	r2, #110	; 0x6e
 80016f6:	18bb      	adds	r3, r7, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b7f      	cmp	r3, #127	; 0x7f
 80016fc:	d902      	bls.n	8001704 <SET_HOUR_DATE.11+0x5c8>
 80016fe:	18bb      	adds	r3, r7, r2
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
			  sDate.Year = a;
 8001704:	266e      	movs	r6, #110	; 0x6e
 8001706:	19bb      	adds	r3, r7, r6
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	2114      	movs	r1, #20
 800170c:	187b      	adds	r3, r7, r1
 800170e:	70da      	strb	r2, [r3, #3]
			  sDate.Month = date.Month;
 8001710:	2554      	movs	r5, #84	; 0x54
 8001712:	197b      	adds	r3, r7, r5
 8001714:	785a      	ldrb	r2, [r3, #1]
 8001716:	187b      	adds	r3, r7, r1
 8001718:	705a      	strb	r2, [r3, #1]
			  sDate.Date = date.Date;
 800171a:	197b      	adds	r3, r7, r5
 800171c:	789a      	ldrb	r2, [r3, #2]
 800171e:	187b      	adds	r3, r7, r1
 8001720:	709a      	strb	r2, [r3, #2]
			  sDate.WeekDay = date.WeekDay;
 8001722:	197b      	adds	r3, r7, r5
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	187b      	adds	r3, r7, r1
 8001728:	701a      	strb	r2, [r3, #0]
			  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800172a:	1879      	adds	r1, r7, r1
 800172c:	4b52      	ldr	r3, [pc, #328]	; (8001878 <SET_HOUR_DATE.11+0x73c>)
 800172e:	2200      	movs	r2, #0
 8001730:	0018      	movs	r0, r3
 8001732:	f004 fb91 	bl	8005e58 <HAL_RTC_SetDate>
			  LCD_SEND_TEXT(15, 0, "SET DATE:");
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <SET_HOUR_DATE.11+0x75c>)
 8001738:	46a4      	mov	ip, r4
 800173a:	001a      	movs	r2, r3
 800173c:	2100      	movs	r1, #0
 800173e:	200f      	movs	r0, #15
 8001740:	f7ff fb82 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 2, "Year:");
 8001744:	4b55      	ldr	r3, [pc, #340]	; (800189c <SET_HOUR_DATE.11+0x760>)
 8001746:	46a4      	mov	ip, r4
 8001748:	001a      	movs	r2, r3
 800174a:	2102      	movs	r1, #2
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fb7b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 3, "Month:");
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <SET_HOUR_DATE.11+0x764>)
 8001754:	46a4      	mov	ip, r4
 8001756:	001a      	movs	r2, r3
 8001758:	2103      	movs	r1, #3
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fb74 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 4, "Day:");
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <SET_HOUR_DATE.11+0x768>)
 8001762:	46a4      	mov	ip, r4
 8001764:	001a      	movs	r2, r3
 8001766:	2104      	movs	r1, #4
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fb6d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(40, 2, ">");
 800176e:	4b48      	ldr	r3, [pc, #288]	; (8001890 <SET_HOUR_DATE.11+0x754>)
 8001770:	46a4      	mov	ip, r4
 8001772:	001a      	movs	r2, r3
 8001774:	2102      	movs	r1, #2
 8001776:	2028      	movs	r0, #40	; 0x28
 8001778:	f7ff fb66 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(72, 2, "<");
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <SET_HOUR_DATE.11+0x758>)
 800177e:	46a4      	mov	ip, r4
 8001780:	001a      	movs	r2, r3
 8001782:	2102      	movs	r1, #2
 8001784:	2048      	movs	r0, #72	; 0x48
 8001786:	f7ff fb5f 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 3, " ");
 800178a:	4b40      	ldr	r3, [pc, #256]	; (800188c <SET_HOUR_DATE.11+0x750>)
 800178c:	46a4      	mov	ip, r4
 800178e:	001a      	movs	r2, r3
 8001790:	2103      	movs	r1, #3
 8001792:	2027      	movs	r0, #39	; 0x27
 8001794:	f7ff fb58 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 3, " ");
 8001798:	4b3c      	ldr	r3, [pc, #240]	; (800188c <SET_HOUR_DATE.11+0x750>)
 800179a:	46a4      	mov	ip, r4
 800179c:	001a      	movs	r2, r3
 800179e:	2103      	movs	r1, #3
 80017a0:	203b      	movs	r0, #59	; 0x3b
 80017a2:	f7ff fb51 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 4, " ");
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <SET_HOUR_DATE.11+0x750>)
 80017a8:	46a4      	mov	ip, r4
 80017aa:	001a      	movs	r2, r3
 80017ac:	2104      	movs	r1, #4
 80017ae:	2027      	movs	r0, #39	; 0x27
 80017b0:	f7ff fb4a 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 4, " ");
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <SET_HOUR_DATE.11+0x750>)
 80017b6:	46a4      	mov	ip, r4
 80017b8:	001a      	movs	r2, r3
 80017ba:	2104      	movs	r1, #4
 80017bc:	203b      	movs	r0, #59	; 0x3b
 80017be:	f7ff fb43 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 5, " ");
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <SET_HOUR_DATE.11+0x750>)
 80017c4:	46a4      	mov	ip, r4
 80017c6:	001a      	movs	r2, r3
 80017c8:	2105      	movs	r1, #5
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff fb3c 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 55, " ");
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <SET_HOUR_DATE.11+0x750>)
 80017d2:	46a4      	mov	ip, r4
 80017d4:	001a      	movs	r2, r3
 80017d6:	2137      	movs	r1, #55	; 0x37
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fb35 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_DIGIT(45, 2, 20);
 80017de:	46a4      	mov	ip, r4
 80017e0:	2214      	movs	r2, #20
 80017e2:	2102      	movs	r1, #2
 80017e4:	202d      	movs	r0, #45	; 0x2d
 80017e6:	f7ff fa81 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(57, 2, a);
 80017ea:	19bb      	adds	r3, r7, r6
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	46a4      	mov	ip, r4
 80017f2:	001a      	movs	r2, r3
 80017f4:	2102      	movs	r1, #2
 80017f6:	2039      	movs	r0, #57	; 0x39
 80017f8:	f7ff fa78 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 3, date.Month);
 80017fc:	197b      	adds	r3, r7, r5
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	46a4      	mov	ip, r4
 8001802:	001a      	movs	r2, r3
 8001804:	2103      	movs	r1, #3
 8001806:	202d      	movs	r0, #45	; 0x2d
 8001808:	f7ff fa70 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 4, date.Date);
 800180c:	197b      	adds	r3, r7, r5
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	46a4      	mov	ip, r4
 8001812:	001a      	movs	r2, r3
 8001814:	2104      	movs	r1, #4
 8001816:	202d      	movs	r0, #45	; 0x2d
 8001818:	f7ff fa68 	bl	8000cec <LCD_SEND_DIGIT.7>
			  switch (week_day)
 800181c:	236d      	movs	r3, #109	; 0x6d
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b25b      	sxtb	r3, r3
 8001824:	2b07      	cmp	r3, #7
 8001826:	d861      	bhi.n	80018ec <SET_HOUR_DATE.11+0x7b0>
 8001828:	009a      	lsls	r2, r3, #2
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <SET_HOUR_DATE.11+0x76c>)
 800182c:	18d3      	adds	r3, r2, r3
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	469f      	mov	pc, r3
			  case 1: LCD_SEND_TEXT(15, 5, "Monday   ");
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <SET_HOUR_DATE.11+0x770>)
 8001834:	46a4      	mov	ip, r4
 8001836:	001a      	movs	r2, r3
 8001838:	2105      	movs	r1, #5
 800183a:	200f      	movs	r0, #15
 800183c:	f7ff fb04 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001840:	e054      	b.n	80018ec <SET_HOUR_DATE.11+0x7b0>
			  case 2: LCD_SEND_TEXT(15, 5, "Tuesday  ");
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <SET_HOUR_DATE.11+0x774>)
 8001844:	46a4      	mov	ip, r4
 8001846:	001a      	movs	r2, r3
 8001848:	2105      	movs	r1, #5
 800184a:	200f      	movs	r0, #15
 800184c:	f7ff fafc 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001850:	e04c      	b.n	80018ec <SET_HOUR_DATE.11+0x7b0>
			  case 3: LCD_SEND_TEXT(15, 5, "Wednesday");
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <SET_HOUR_DATE.11+0x778>)
 8001854:	46a4      	mov	ip, r4
 8001856:	001a      	movs	r2, r3
 8001858:	2105      	movs	r1, #5
 800185a:	200f      	movs	r0, #15
 800185c:	f7ff faf4 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001860:	e044      	b.n	80018ec <SET_HOUR_DATE.11+0x7b0>
			  case 4: LCD_SEND_TEXT(15, 5, "Thursday ");
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <SET_HOUR_DATE.11+0x77c>)
 8001864:	46a4      	mov	ip, r4
 8001866:	001a      	movs	r2, r3
 8001868:	2105      	movs	r1, #5
 800186a:	200f      	movs	r0, #15
 800186c:	f7ff faec 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001870:	e03c      	b.n	80018ec <SET_HOUR_DATE.11+0x7b0>
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	48001400 	.word	0x48001400
 8001878:	200002f4 	.word	0x200002f4
 800187c:	08006e10 	.word	0x08006e10
 8001880:	08006e1c 	.word	0x08006e1c
 8001884:	08006e24 	.word	0x08006e24
 8001888:	08006e2c 	.word	0x08006e2c
 800188c:	08006e3c 	.word	0x08006e3c
 8001890:	08006e34 	.word	0x08006e34
 8001894:	08006e38 	.word	0x08006e38
 8001898:	08006e40 	.word	0x08006e40
 800189c:	08006e4c 	.word	0x08006e4c
 80018a0:	08006e54 	.word	0x08006e54
 80018a4:	08006e5c 	.word	0x08006e5c
 80018a8:	08007244 	.word	0x08007244
 80018ac:	08006e64 	.word	0x08006e64
 80018b0:	08006e70 	.word	0x08006e70
 80018b4:	08006e7c 	.word	0x08006e7c
 80018b8:	08006e88 	.word	0x08006e88
			  case 5: LCD_SEND_TEXT(15, 5, "Friday   ");
 80018bc:	4be2      	ldr	r3, [pc, #904]	; (8001c48 <SET_HOUR_DATE.11+0xb0c>)
 80018be:	46a4      	mov	ip, r4
 80018c0:	001a      	movs	r2, r3
 80018c2:	2105      	movs	r1, #5
 80018c4:	200f      	movs	r0, #15
 80018c6:	f7ff fabf 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 80018ca:	e00f      	b.n	80018ec <SET_HOUR_DATE.11+0x7b0>
			  case 6: LCD_SEND_TEXT(15, 5, "Saturday ");
 80018cc:	4bdf      	ldr	r3, [pc, #892]	; (8001c4c <SET_HOUR_DATE.11+0xb10>)
 80018ce:	46a4      	mov	ip, r4
 80018d0:	001a      	movs	r2, r3
 80018d2:	2105      	movs	r1, #5
 80018d4:	200f      	movs	r0, #15
 80018d6:	f7ff fab7 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 80018da:	e007      	b.n	80018ec <SET_HOUR_DATE.11+0x7b0>
			  case 7: LCD_SEND_TEXT(15, 5, "Sunday   ");
 80018dc:	4bdc      	ldr	r3, [pc, #880]	; (8001c50 <SET_HOUR_DATE.11+0xb14>)
 80018de:	46a4      	mov	ip, r4
 80018e0:	001a      	movs	r2, r3
 80018e2:	2105      	movs	r1, #5
 80018e4:	200f      	movs	r0, #15
 80018e6:	f7ff faaf 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 80018ea:	46c0      	nop			; (mov r8, r8)
			  if(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET)	{menu = 3; LCD_CLEAR();}
 80018ec:	4bd9      	ldr	r3, [pc, #868]	; (8001c54 <SET_HOUR_DATE.11+0xb18>)
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	0018      	movs	r0, r3
 80018f2:	f002 fdbf 	bl	8004474 <HAL_GPIO_ReadPin>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d106      	bne.n	8001908 <SET_HOUR_DATE.11+0x7cc>
 80018fa:	236f      	movs	r3, #111	; 0x6f
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2203      	movs	r2, #3
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	46a4      	mov	ip, r4
 8001904:	f7ff f902 	bl	8000b0c <LCD_CLEAR.10>
			  if(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET)	{menu = 5;}
 8001908:	4bd2      	ldr	r3, [pc, #840]	; (8001c54 <SET_HOUR_DATE.11+0xb18>)
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	0018      	movs	r0, r3
 800190e:	f002 fdb1 	bl	8004474 <HAL_GPIO_ReadPin>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d103      	bne.n	800191e <SET_HOUR_DATE.11+0x7e2>
 8001916:	236f      	movs	r3, #111	; 0x6f
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	2205      	movs	r2, #5
 800191c:	701a      	strb	r2, [r3, #0]
		  while(menu == 4)   // set year
 800191e:	236f      	movs	r3, #111	; 0x6f
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b04      	cmp	r3, #4
 8001926:	d100      	bne.n	800192a <SET_HOUR_DATE.11+0x7ee>
 8001928:	e6a4      	b.n	8001674 <SET_HOUR_DATE.11+0x538>
		  while(menu == 5)   // set month
 800192a:	e12c      	b.n	8001b86 <SET_HOUR_DATE.11+0xa4a>
			  while(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET);
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	4bc9      	ldr	r3, [pc, #804]	; (8001c54 <SET_HOUR_DATE.11+0xb18>)
 8001930:	2140      	movs	r1, #64	; 0x40
 8001932:	0018      	movs	r0, r3
 8001934:	f002 fd9e 	bl	8004474 <HAL_GPIO_ReadPin>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d0f8      	beq.n	800192e <SET_HOUR_DATE.11+0x7f2>
			  while(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET);
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	4bc5      	ldr	r3, [pc, #788]	; (8001c54 <SET_HOUR_DATE.11+0xb18>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0018      	movs	r0, r3
 8001944:	f002 fd96 	bl	8004474 <HAL_GPIO_ReadPin>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d0f8      	beq.n	800193e <SET_HOUR_DATE.11+0x802>
			  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 800194c:	2358      	movs	r3, #88	; 0x58
 800194e:	18f9      	adds	r1, r7, r3
 8001950:	4bc1      	ldr	r3, [pc, #772]	; (8001c58 <SET_HOUR_DATE.11+0xb1c>)
 8001952:	2200      	movs	r2, #0
 8001954:	0018      	movs	r0, r3
 8001956:	f004 fa21 	bl	8005d9c <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 800195a:	2554      	movs	r5, #84	; 0x54
 800195c:	1979      	adds	r1, r7, r5
 800195e:	4bbe      	ldr	r3, [pc, #760]	; (8001c58 <SET_HOUR_DATE.11+0xb1c>)
 8001960:	2200      	movs	r2, #0
 8001962:	0018      	movs	r0, r3
 8001964:	f004 fb1e 	bl	8005fa4 <HAL_RTC_GetDate>
		 	  RTC_DateTypeDef sDate = {0};   // set date
 8001968:	2310      	movs	r3, #16
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
		   	  week_day = date.WeekDay;
 8001970:	0029      	movs	r1, r5
 8001972:	187b      	adds	r3, r7, r1
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	236d      	movs	r3, #109	; 0x6d
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	701a      	strb	r2, [r3, #0]
			  a = date.Month;
 800197c:	187b      	adds	r3, r7, r1
 800197e:	785a      	ldrb	r2, [r3, #1]
 8001980:	256e      	movs	r5, #110	; 0x6e
 8001982:	197b      	adds	r3, r7, r5
 8001984:	701a      	strb	r2, [r3, #0]
			  a = a + ENCODER_ROTATION_DIRECTION();
 8001986:	46a4      	mov	ip, r4
 8001988:	f7ff fbb0 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 800198c:	0003      	movs	r3, r0
 800198e:	b2da      	uxtb	r2, r3
 8001990:	197b      	adds	r3, r7, r5
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	b2da      	uxtb	r2, r3
 8001998:	197b      	adds	r3, r7, r5
 800199a:	701a      	strb	r2, [r3, #0]
			  if(a > 12) a = 12;
 800199c:	197b      	adds	r3, r7, r5
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	dd02      	ble.n	80019ac <SET_HOUR_DATE.11+0x870>
 80019a6:	197b      	adds	r3, r7, r5
 80019a8:	220c      	movs	r2, #12
 80019aa:	701a      	strb	r2, [r3, #0]
			  if(a < 0) a = 0;
 80019ac:	226e      	movs	r2, #110	; 0x6e
 80019ae:	18bb      	adds	r3, r7, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b7f      	cmp	r3, #127	; 0x7f
 80019b4:	d902      	bls.n	80019bc <SET_HOUR_DATE.11+0x880>
 80019b6:	18bb      	adds	r3, r7, r2
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
			  sDate.Year = date.Year;
 80019bc:	2554      	movs	r5, #84	; 0x54
 80019be:	197b      	adds	r3, r7, r5
 80019c0:	78da      	ldrb	r2, [r3, #3]
 80019c2:	2110      	movs	r1, #16
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	70da      	strb	r2, [r3, #3]
			  sDate.Month = a;
 80019c8:	266e      	movs	r6, #110	; 0x6e
 80019ca:	19bb      	adds	r3, r7, r6
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	705a      	strb	r2, [r3, #1]
			  sDate.Date = date.Date;
 80019d2:	197b      	adds	r3, r7, r5
 80019d4:	789a      	ldrb	r2, [r3, #2]
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	709a      	strb	r2, [r3, #2]
			  sDate.WeekDay = date.WeekDay;
 80019da:	197b      	adds	r3, r7, r5
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	701a      	strb	r2, [r3, #0]
			  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80019e2:	1879      	adds	r1, r7, r1
 80019e4:	4b9c      	ldr	r3, [pc, #624]	; (8001c58 <SET_HOUR_DATE.11+0xb1c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	0018      	movs	r0, r3
 80019ea:	f004 fa35 	bl	8005e58 <HAL_RTC_SetDate>
			  LCD_SEND_TEXT(15, 0, "SET DATE:");
 80019ee:	4b9b      	ldr	r3, [pc, #620]	; (8001c5c <SET_HOUR_DATE.11+0xb20>)
 80019f0:	46a4      	mov	ip, r4
 80019f2:	001a      	movs	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	200f      	movs	r0, #15
 80019f8:	f7ff fa26 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 2, "Year:");
 80019fc:	4b98      	ldr	r3, [pc, #608]	; (8001c60 <SET_HOUR_DATE.11+0xb24>)
 80019fe:	46a4      	mov	ip, r4
 8001a00:	001a      	movs	r2, r3
 8001a02:	2102      	movs	r1, #2
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fa1f 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 3, "Month:");
 8001a0a:	4b96      	ldr	r3, [pc, #600]	; (8001c64 <SET_HOUR_DATE.11+0xb28>)
 8001a0c:	46a4      	mov	ip, r4
 8001a0e:	001a      	movs	r2, r3
 8001a10:	2103      	movs	r1, #3
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fa18 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 4, "Day:");
 8001a18:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <SET_HOUR_DATE.11+0xb2c>)
 8001a1a:	46a4      	mov	ip, r4
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	2104      	movs	r1, #4
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fa11 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(40, 2, " ");
 8001a26:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <SET_HOUR_DATE.11+0xb30>)
 8001a28:	46a4      	mov	ip, r4
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	2028      	movs	r0, #40	; 0x28
 8001a30:	f7ff fa0a 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(71, 2, " ");
 8001a34:	4b8d      	ldr	r3, [pc, #564]	; (8001c6c <SET_HOUR_DATE.11+0xb30>)
 8001a36:	46a4      	mov	ip, r4
 8001a38:	001a      	movs	r2, r3
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	2047      	movs	r0, #71	; 0x47
 8001a3e:	f7ff fa03 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 3, ">");
 8001a42:	4b8b      	ldr	r3, [pc, #556]	; (8001c70 <SET_HOUR_DATE.11+0xb34>)
 8001a44:	46a4      	mov	ip, r4
 8001a46:	001a      	movs	r2, r3
 8001a48:	2103      	movs	r1, #3
 8001a4a:	2027      	movs	r0, #39	; 0x27
 8001a4c:	f7ff f9fc 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 3, "<");
 8001a50:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <SET_HOUR_DATE.11+0xb38>)
 8001a52:	46a4      	mov	ip, r4
 8001a54:	001a      	movs	r2, r3
 8001a56:	2103      	movs	r1, #3
 8001a58:	203b      	movs	r0, #59	; 0x3b
 8001a5a:	f7ff f9f5 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 4, " ");
 8001a5e:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <SET_HOUR_DATE.11+0xb30>)
 8001a60:	46a4      	mov	ip, r4
 8001a62:	001a      	movs	r2, r3
 8001a64:	2104      	movs	r1, #4
 8001a66:	2027      	movs	r0, #39	; 0x27
 8001a68:	f7ff f9ee 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 4, " ");
 8001a6c:	4b7f      	ldr	r3, [pc, #508]	; (8001c6c <SET_HOUR_DATE.11+0xb30>)
 8001a6e:	46a4      	mov	ip, r4
 8001a70:	001a      	movs	r2, r3
 8001a72:	2104      	movs	r1, #4
 8001a74:	203b      	movs	r0, #59	; 0x3b
 8001a76:	f7ff f9e7 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 5, " ");
 8001a7a:	4b7c      	ldr	r3, [pc, #496]	; (8001c6c <SET_HOUR_DATE.11+0xb30>)
 8001a7c:	46a4      	mov	ip, r4
 8001a7e:	001a      	movs	r2, r3
 8001a80:	2105      	movs	r1, #5
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff f9e0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 55, " ");
 8001a88:	4b78      	ldr	r3, [pc, #480]	; (8001c6c <SET_HOUR_DATE.11+0xb30>)
 8001a8a:	46a4      	mov	ip, r4
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	2137      	movs	r1, #55	; 0x37
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff f9d9 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_DIGIT(45, 2, 20);
 8001a96:	46a4      	mov	ip, r4
 8001a98:	2214      	movs	r2, #20
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	202d      	movs	r0, #45	; 0x2d
 8001a9e:	f7ff f925 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(57, 2, date.Year);
 8001aa2:	197b      	adds	r3, r7, r5
 8001aa4:	78db      	ldrb	r3, [r3, #3]
 8001aa6:	46a4      	mov	ip, r4
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	2102      	movs	r1, #2
 8001aac:	2039      	movs	r0, #57	; 0x39
 8001aae:	f7ff f91d 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 3, a);
 8001ab2:	19bb      	adds	r3, r7, r6
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	46a4      	mov	ip, r4
 8001aba:	001a      	movs	r2, r3
 8001abc:	2103      	movs	r1, #3
 8001abe:	202d      	movs	r0, #45	; 0x2d
 8001ac0:	f7ff f914 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 4, date.Date);
 8001ac4:	197b      	adds	r3, r7, r5
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	46a4      	mov	ip, r4
 8001aca:	001a      	movs	r2, r3
 8001acc:	2104      	movs	r1, #4
 8001ace:	202d      	movs	r0, #45	; 0x2d
 8001ad0:	f7ff f90c 	bl	8000cec <LCD_SEND_DIGIT.7>
			  switch (week_day)
 8001ad4:	236d      	movs	r3, #109	; 0x6d
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	2b07      	cmp	r3, #7
 8001ade:	d83c      	bhi.n	8001b5a <SET_HOUR_DATE.11+0xa1e>
 8001ae0:	009a      	lsls	r2, r3, #2
 8001ae2:	4b65      	ldr	r3, [pc, #404]	; (8001c78 <SET_HOUR_DATE.11+0xb3c>)
 8001ae4:	18d3      	adds	r3, r2, r3
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	469f      	mov	pc, r3
			  case 1: LCD_SEND_TEXT(15, 5, "Monday   ");
 8001aea:	4b64      	ldr	r3, [pc, #400]	; (8001c7c <SET_HOUR_DATE.11+0xb40>)
 8001aec:	46a4      	mov	ip, r4
 8001aee:	001a      	movs	r2, r3
 8001af0:	2105      	movs	r1, #5
 8001af2:	200f      	movs	r0, #15
 8001af4:	f7ff f9a8 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001af8:	e02f      	b.n	8001b5a <SET_HOUR_DATE.11+0xa1e>
			  case 2: LCD_SEND_TEXT(15, 5, "Tuesday  ");
 8001afa:	4b61      	ldr	r3, [pc, #388]	; (8001c80 <SET_HOUR_DATE.11+0xb44>)
 8001afc:	46a4      	mov	ip, r4
 8001afe:	001a      	movs	r2, r3
 8001b00:	2105      	movs	r1, #5
 8001b02:	200f      	movs	r0, #15
 8001b04:	f7ff f9a0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001b08:	e027      	b.n	8001b5a <SET_HOUR_DATE.11+0xa1e>
			  case 3: LCD_SEND_TEXT(15, 5, "Wednesday");
 8001b0a:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <SET_HOUR_DATE.11+0xb48>)
 8001b0c:	46a4      	mov	ip, r4
 8001b0e:	001a      	movs	r2, r3
 8001b10:	2105      	movs	r1, #5
 8001b12:	200f      	movs	r0, #15
 8001b14:	f7ff f998 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001b18:	e01f      	b.n	8001b5a <SET_HOUR_DATE.11+0xa1e>
			  case 4: LCD_SEND_TEXT(15, 5, "Thursday ");
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <SET_HOUR_DATE.11+0xb4c>)
 8001b1c:	46a4      	mov	ip, r4
 8001b1e:	001a      	movs	r2, r3
 8001b20:	2105      	movs	r1, #5
 8001b22:	200f      	movs	r0, #15
 8001b24:	f7ff f990 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001b28:	e017      	b.n	8001b5a <SET_HOUR_DATE.11+0xa1e>
			  case 5: LCD_SEND_TEXT(15, 5, "Friday   ");
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <SET_HOUR_DATE.11+0xb0c>)
 8001b2c:	46a4      	mov	ip, r4
 8001b2e:	001a      	movs	r2, r3
 8001b30:	2105      	movs	r1, #5
 8001b32:	200f      	movs	r0, #15
 8001b34:	f7ff f988 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001b38:	e00f      	b.n	8001b5a <SET_HOUR_DATE.11+0xa1e>
			  case 6: LCD_SEND_TEXT(15, 5, "Saturday ");
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <SET_HOUR_DATE.11+0xb10>)
 8001b3c:	46a4      	mov	ip, r4
 8001b3e:	001a      	movs	r2, r3
 8001b40:	2105      	movs	r1, #5
 8001b42:	200f      	movs	r0, #15
 8001b44:	f7ff f980 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001b48:	e007      	b.n	8001b5a <SET_HOUR_DATE.11+0xa1e>
			  case 7: LCD_SEND_TEXT(15, 5, "Sunday   ");
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <SET_HOUR_DATE.11+0xb14>)
 8001b4c:	46a4      	mov	ip, r4
 8001b4e:	001a      	movs	r2, r3
 8001b50:	2105      	movs	r1, #5
 8001b52:	200f      	movs	r0, #15
 8001b54:	f7ff f978 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001b58:	46c0      	nop			; (mov r8, r8)
			  if(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET)	{menu = 4;}
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <SET_HOUR_DATE.11+0xb18>)
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f002 fc88 	bl	8004474 <HAL_GPIO_ReadPin>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d103      	bne.n	8001b70 <SET_HOUR_DATE.11+0xa34>
 8001b68:	236f      	movs	r3, #111	; 0x6f
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	701a      	strb	r2, [r3, #0]
			  if(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET)	{menu = 6;}
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <SET_HOUR_DATE.11+0xb18>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0018      	movs	r0, r3
 8001b76:	f002 fc7d 	bl	8004474 <HAL_GPIO_ReadPin>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d103      	bne.n	8001b86 <SET_HOUR_DATE.11+0xa4a>
 8001b7e:	236f      	movs	r3, #111	; 0x6f
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2206      	movs	r2, #6
 8001b84:	701a      	strb	r2, [r3, #0]
		  while(menu == 5)   // set month
 8001b86:	236f      	movs	r3, #111	; 0x6f
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d100      	bne.n	8001b92 <SET_HOUR_DATE.11+0xa56>
 8001b90:	e6cc      	b.n	800192c <SET_HOUR_DATE.11+0x7f0>
		  while(menu == 6)   // set day of month
 8001b92:	e1b0      	b.n	8001ef6 <SET_HOUR_DATE.11+0xdba>
			  while(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET);
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <SET_HOUR_DATE.11+0xb18>)
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f002 fc6a 	bl	8004474 <HAL_GPIO_ReadPin>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d0f8      	beq.n	8001b96 <SET_HOUR_DATE.11+0xa5a>
			  while(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET);
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <SET_HOUR_DATE.11+0xb18>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0018      	movs	r0, r3
 8001bac:	f002 fc62 	bl	8004474 <HAL_GPIO_ReadPin>
 8001bb0:	1e03      	subs	r3, r0, #0
 8001bb2:	d0f8      	beq.n	8001ba6 <SET_HOUR_DATE.11+0xa6a>
			  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 8001bb4:	2358      	movs	r3, #88	; 0x58
 8001bb6:	18f9      	adds	r1, r7, r3
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <SET_HOUR_DATE.11+0xb1c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f004 f8ed 	bl	8005d9c <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 8001bc2:	2554      	movs	r5, #84	; 0x54
 8001bc4:	1979      	adds	r1, r7, r5
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <SET_HOUR_DATE.11+0xb1c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f004 f9ea 	bl	8005fa4 <HAL_RTC_GetDate>
			  switch (date.Month)  // set the max number of days of a given month
 8001bd0:	197b      	adds	r3, r7, r5
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d864      	bhi.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
 8001bd8:	009a      	lsls	r2, r3, #2
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <SET_HOUR_DATE.11+0xb50>)
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	469f      	mov	pc, r3
			  case 1: b = 31;
 8001be2:	236c      	movs	r3, #108	; 0x6c
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	221f      	movs	r2, #31
 8001be8:	701a      	strb	r2, [r3, #0]
			  break;
 8001bea:	e05a      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 2: b = 28;
 8001bec:	236c      	movs	r3, #108	; 0x6c
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	221c      	movs	r2, #28
 8001bf2:	701a      	strb	r2, [r3, #0]
			  break;
 8001bf4:	e055      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 3: b = 31;
 8001bf6:	236c      	movs	r3, #108	; 0x6c
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	221f      	movs	r2, #31
 8001bfc:	701a      	strb	r2, [r3, #0]
			  break;
 8001bfe:	e050      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 4: b = 30;
 8001c00:	236c      	movs	r3, #108	; 0x6c
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	221e      	movs	r2, #30
 8001c06:	701a      	strb	r2, [r3, #0]
			  break;
 8001c08:	e04b      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 5: b = 31;
 8001c0a:	236c      	movs	r3, #108	; 0x6c
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	221f      	movs	r2, #31
 8001c10:	701a      	strb	r2, [r3, #0]
			  break;
 8001c12:	e046      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 6: b = 30;
 8001c14:	236c      	movs	r3, #108	; 0x6c
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	221e      	movs	r2, #30
 8001c1a:	701a      	strb	r2, [r3, #0]
			  break;
 8001c1c:	e041      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 7: b = 31;
 8001c1e:	236c      	movs	r3, #108	; 0x6c
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	221f      	movs	r2, #31
 8001c24:	701a      	strb	r2, [r3, #0]
			  break;
 8001c26:	e03c      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 8: b = 31;
 8001c28:	236c      	movs	r3, #108	; 0x6c
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	221f      	movs	r2, #31
 8001c2e:	701a      	strb	r2, [r3, #0]
			  break;
 8001c30:	e037      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 9: b = 30;
 8001c32:	236c      	movs	r3, #108	; 0x6c
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	221e      	movs	r2, #30
 8001c38:	701a      	strb	r2, [r3, #0]
			  break;
 8001c3a:	e032      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 10: b = 31;
 8001c3c:	236c      	movs	r3, #108	; 0x6c
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	221f      	movs	r2, #31
 8001c42:	701a      	strb	r2, [r3, #0]
			  break;
 8001c44:	e02d      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	08006e94 	.word	0x08006e94
 8001c4c:	08006ea0 	.word	0x08006ea0
 8001c50:	08006eac 	.word	0x08006eac
 8001c54:	48001400 	.word	0x48001400
 8001c58:	200002f4 	.word	0x200002f4
 8001c5c:	08006e40 	.word	0x08006e40
 8001c60:	08006e4c 	.word	0x08006e4c
 8001c64:	08006e54 	.word	0x08006e54
 8001c68:	08006e5c 	.word	0x08006e5c
 8001c6c:	08006e3c 	.word	0x08006e3c
 8001c70:	08006e34 	.word	0x08006e34
 8001c74:	08006e38 	.word	0x08006e38
 8001c78:	08007264 	.word	0x08007264
 8001c7c:	08006e64 	.word	0x08006e64
 8001c80:	08006e70 	.word	0x08006e70
 8001c84:	08006e7c 	.word	0x08006e7c
 8001c88:	08006e88 	.word	0x08006e88
 8001c8c:	08007284 	.word	0x08007284
			  case 11: b = 30;
 8001c90:	236c      	movs	r3, #108	; 0x6c
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	221e      	movs	r2, #30
 8001c96:	701a      	strb	r2, [r3, #0]
			  break;
 8001c98:	e003      	b.n	8001ca2 <SET_HOUR_DATE.11+0xb66>
			  case 12: b = 31;
 8001c9a:	236c      	movs	r3, #108	; 0x6c
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	221f      	movs	r2, #31
 8001ca0:	701a      	strb	r2, [r3, #0]
				  if(date.Month == 2)    // check if the year is leap
 8001ca2:	2254      	movs	r2, #84	; 0x54
 8001ca4:	18bb      	adds	r3, r7, r2
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d110      	bne.n	8001cce <SET_HOUR_DATE.11+0xb92>
					  a = date.Year % 4;
 8001cac:	18bb      	adds	r3, r7, r2
 8001cae:	78db      	ldrb	r3, [r3, #3]
 8001cb0:	b25a      	sxtb	r2, r3
 8001cb2:	206e      	movs	r0, #110	; 0x6e
 8001cb4:	183b      	adds	r3, r7, r0
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	400a      	ands	r2, r1
 8001cba:	701a      	strb	r2, [r3, #0]
					  if (a == 0) b = 29;
 8001cbc:	183b      	adds	r3, r7, r0
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <SET_HOUR_DATE.11+0xb92>
 8001cc6:	236c      	movs	r3, #108	; 0x6c
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	221d      	movs	r2, #29
 8001ccc:	701a      	strb	r2, [r3, #0]
		 	  RTC_DateTypeDef sDate = {0};   // set date
 8001cce:	230c      	movs	r3, #12
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
		 	  week_day = date.WeekDay;
 8001cd6:	2154      	movs	r1, #84	; 0x54
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	236d      	movs	r3, #109	; 0x6d
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	701a      	strb	r2, [r3, #0]
			  a = date.Date;
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	789a      	ldrb	r2, [r3, #2]
 8001ce6:	256e      	movs	r5, #110	; 0x6e
 8001ce8:	197b      	adds	r3, r7, r5
 8001cea:	701a      	strb	r2, [r3, #0]
			  a = a + ENCODER_ROTATION_DIRECTION();
 8001cec:	46a4      	mov	ip, r4
 8001cee:	f7ff f9fd 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	197b      	adds	r3, r7, r5
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	197b      	adds	r3, r7, r5
 8001d00:	701a      	strb	r2, [r3, #0]
			  if(a > b) a = b;
 8001d02:	197b      	adds	r3, r7, r5
 8001d04:	2200      	movs	r2, #0
 8001d06:	569a      	ldrsb	r2, [r3, r2]
 8001d08:	216c      	movs	r1, #108	; 0x6c
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dd03      	ble.n	8001d1a <SET_HOUR_DATE.11+0xbde>
 8001d12:	197b      	adds	r3, r7, r5
 8001d14:	187a      	adds	r2, r7, r1
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	701a      	strb	r2, [r3, #0]
			  if(a < 1) a = 1;
 8001d1a:	226e      	movs	r2, #110	; 0x6e
 8001d1c:	18bb      	adds	r3, r7, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dc02      	bgt.n	8001d2c <SET_HOUR_DATE.11+0xbf0>
 8001d26:	18bb      	adds	r3, r7, r2
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
			  sDate.Year = date.Year;
 8001d2c:	2554      	movs	r5, #84	; 0x54
 8001d2e:	197b      	adds	r3, r7, r5
 8001d30:	78da      	ldrb	r2, [r3, #3]
 8001d32:	210c      	movs	r1, #12
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	70da      	strb	r2, [r3, #3]
			  sDate.Month = date.Month;
 8001d38:	197b      	adds	r3, r7, r5
 8001d3a:	785a      	ldrb	r2, [r3, #1]
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	705a      	strb	r2, [r3, #1]
			  sDate.Date = a;
 8001d40:	266e      	movs	r6, #110	; 0x6e
 8001d42:	19bb      	adds	r3, r7, r6
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	709a      	strb	r2, [r3, #2]
			  sDate.WeekDay = date.WeekDay;
 8001d4a:	197b      	adds	r3, r7, r5
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	701a      	strb	r2, [r3, #0]
			  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d52:	1879      	adds	r1, r7, r1
 8001d54:	4beb      	ldr	r3, [pc, #940]	; (8002104 <SET_HOUR_DATE.11+0xfc8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f004 f87d 	bl	8005e58 <HAL_RTC_SetDate>
			  LCD_SEND_TEXT(15, 0, "SET DATE:");
 8001d5e:	4bea      	ldr	r3, [pc, #936]	; (8002108 <SET_HOUR_DATE.11+0xfcc>)
 8001d60:	46a4      	mov	ip, r4
 8001d62:	001a      	movs	r2, r3
 8001d64:	2100      	movs	r1, #0
 8001d66:	200f      	movs	r0, #15
 8001d68:	f7ff f86e 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 2, "Year:");
 8001d6c:	4be7      	ldr	r3, [pc, #924]	; (800210c <SET_HOUR_DATE.11+0xfd0>)
 8001d6e:	46a4      	mov	ip, r4
 8001d70:	001a      	movs	r2, r3
 8001d72:	2102      	movs	r1, #2
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff f867 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 3, "Month:");
 8001d7a:	4be5      	ldr	r3, [pc, #916]	; (8002110 <SET_HOUR_DATE.11+0xfd4>)
 8001d7c:	46a4      	mov	ip, r4
 8001d7e:	001a      	movs	r2, r3
 8001d80:	2103      	movs	r1, #3
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff f860 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 4, "Day:");
 8001d88:	4be2      	ldr	r3, [pc, #904]	; (8002114 <SET_HOUR_DATE.11+0xfd8>)
 8001d8a:	46a4      	mov	ip, r4
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	2104      	movs	r1, #4
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff f859 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(40, 2, " ");
 8001d96:	4be0      	ldr	r3, [pc, #896]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	2028      	movs	r0, #40	; 0x28
 8001da0:	f7ff f852 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(71, 2, " ");
 8001da4:	4bdc      	ldr	r3, [pc, #880]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8001da6:	46a4      	mov	ip, r4
 8001da8:	001a      	movs	r2, r3
 8001daa:	2102      	movs	r1, #2
 8001dac:	2047      	movs	r0, #71	; 0x47
 8001dae:	f7ff f84b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 3, " ");
 8001db2:	4bd9      	ldr	r3, [pc, #868]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8001db4:	46a4      	mov	ip, r4
 8001db6:	001a      	movs	r2, r3
 8001db8:	2103      	movs	r1, #3
 8001dba:	2027      	movs	r0, #39	; 0x27
 8001dbc:	f7ff f844 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 3, " ");
 8001dc0:	4bd5      	ldr	r3, [pc, #852]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8001dc2:	46a4      	mov	ip, r4
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	203b      	movs	r0, #59	; 0x3b
 8001dca:	f7ff f83d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 4, ">");
 8001dce:	4bd3      	ldr	r3, [pc, #844]	; (800211c <SET_HOUR_DATE.11+0xfe0>)
 8001dd0:	46a4      	mov	ip, r4
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	2027      	movs	r0, #39	; 0x27
 8001dd8:	f7ff f836 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 4, "<");
 8001ddc:	4bd0      	ldr	r3, [pc, #832]	; (8002120 <SET_HOUR_DATE.11+0xfe4>)
 8001dde:	46a4      	mov	ip, r4
 8001de0:	001a      	movs	r2, r3
 8001de2:	2104      	movs	r1, #4
 8001de4:	203b      	movs	r0, #59	; 0x3b
 8001de6:	f7ff f82f 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 5, " ");
 8001dea:	4bcb      	ldr	r3, [pc, #812]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8001dec:	46a4      	mov	ip, r4
 8001dee:	001a      	movs	r2, r3
 8001df0:	2105      	movs	r1, #5
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff f828 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(80, 5, " ");
 8001df8:	4bc7      	ldr	r3, [pc, #796]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8001dfa:	46a4      	mov	ip, r4
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	2105      	movs	r1, #5
 8001e00:	2050      	movs	r0, #80	; 0x50
 8001e02:	f7ff f821 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_DIGIT(45, 2, 20);
 8001e06:	46a4      	mov	ip, r4
 8001e08:	2214      	movs	r2, #20
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	202d      	movs	r0, #45	; 0x2d
 8001e0e:	f7fe ff6d 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(57, 2, date.Year);
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	78db      	ldrb	r3, [r3, #3]
 8001e16:	46a4      	mov	ip, r4
 8001e18:	001a      	movs	r2, r3
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	2039      	movs	r0, #57	; 0x39
 8001e1e:	f7fe ff65 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 3, date.Month);
 8001e22:	197b      	adds	r3, r7, r5
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	46a4      	mov	ip, r4
 8001e28:	001a      	movs	r2, r3
 8001e2a:	2103      	movs	r1, #3
 8001e2c:	202d      	movs	r0, #45	; 0x2d
 8001e2e:	f7fe ff5d 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 4, a);
 8001e32:	19bb      	adds	r3, r7, r6
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	46a4      	mov	ip, r4
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	202d      	movs	r0, #45	; 0x2d
 8001e40:	f7fe ff54 	bl	8000cec <LCD_SEND_DIGIT.7>
			  switch (week_day)
 8001e44:	236d      	movs	r3, #109	; 0x6d
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	2b07      	cmp	r3, #7
 8001e4e:	d83c      	bhi.n	8001eca <SET_HOUR_DATE.11+0xd8e>
 8001e50:	009a      	lsls	r2, r3, #2
 8001e52:	4bb4      	ldr	r3, [pc, #720]	; (8002124 <SET_HOUR_DATE.11+0xfe8>)
 8001e54:	18d3      	adds	r3, r2, r3
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	469f      	mov	pc, r3
			  case 1: LCD_SEND_TEXT(15, 5, "Monday   ");
 8001e5a:	4bb3      	ldr	r3, [pc, #716]	; (8002128 <SET_HOUR_DATE.11+0xfec>)
 8001e5c:	46a4      	mov	ip, r4
 8001e5e:	001a      	movs	r2, r3
 8001e60:	2105      	movs	r1, #5
 8001e62:	200f      	movs	r0, #15
 8001e64:	f7fe fff0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001e68:	e02f      	b.n	8001eca <SET_HOUR_DATE.11+0xd8e>
			  case 2: LCD_SEND_TEXT(15, 5, "Tuesday  ");
 8001e6a:	4bb0      	ldr	r3, [pc, #704]	; (800212c <SET_HOUR_DATE.11+0xff0>)
 8001e6c:	46a4      	mov	ip, r4
 8001e6e:	001a      	movs	r2, r3
 8001e70:	2105      	movs	r1, #5
 8001e72:	200f      	movs	r0, #15
 8001e74:	f7fe ffe8 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001e78:	e027      	b.n	8001eca <SET_HOUR_DATE.11+0xd8e>
			  case 3: LCD_SEND_TEXT(15, 5, "Wednesday");
 8001e7a:	4bad      	ldr	r3, [pc, #692]	; (8002130 <SET_HOUR_DATE.11+0xff4>)
 8001e7c:	46a4      	mov	ip, r4
 8001e7e:	001a      	movs	r2, r3
 8001e80:	2105      	movs	r1, #5
 8001e82:	200f      	movs	r0, #15
 8001e84:	f7fe ffe0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001e88:	e01f      	b.n	8001eca <SET_HOUR_DATE.11+0xd8e>
			  case 4: LCD_SEND_TEXT(15, 5, "Thursday ");
 8001e8a:	4baa      	ldr	r3, [pc, #680]	; (8002134 <SET_HOUR_DATE.11+0xff8>)
 8001e8c:	46a4      	mov	ip, r4
 8001e8e:	001a      	movs	r2, r3
 8001e90:	2105      	movs	r1, #5
 8001e92:	200f      	movs	r0, #15
 8001e94:	f7fe ffd8 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001e98:	e017      	b.n	8001eca <SET_HOUR_DATE.11+0xd8e>
			  case 5: LCD_SEND_TEXT(15, 5, "Friday   ");
 8001e9a:	4ba7      	ldr	r3, [pc, #668]	; (8002138 <SET_HOUR_DATE.11+0xffc>)
 8001e9c:	46a4      	mov	ip, r4
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	2105      	movs	r1, #5
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f7fe ffd0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001ea8:	e00f      	b.n	8001eca <SET_HOUR_DATE.11+0xd8e>
			  case 6: LCD_SEND_TEXT(15, 5, "Saturday ");
 8001eaa:	4ba4      	ldr	r3, [pc, #656]	; (800213c <SET_HOUR_DATE.11+0x1000>)
 8001eac:	46a4      	mov	ip, r4
 8001eae:	001a      	movs	r2, r3
 8001eb0:	2105      	movs	r1, #5
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f7fe ffc8 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001eb8:	e007      	b.n	8001eca <SET_HOUR_DATE.11+0xd8e>
			  case 7: LCD_SEND_TEXT(15, 5, "Sunday   ");
 8001eba:	4ba1      	ldr	r3, [pc, #644]	; (8002140 <SET_HOUR_DATE.11+0x1004>)
 8001ebc:	46a4      	mov	ip, r4
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f7fe ffc0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8001ec8:	46c0      	nop			; (mov r8, r8)
			  if(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET)	{menu = 5;}
 8001eca:	4b9e      	ldr	r3, [pc, #632]	; (8002144 <SET_HOUR_DATE.11+0x1008>)
 8001ecc:	2140      	movs	r1, #64	; 0x40
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f002 fad0 	bl	8004474 <HAL_GPIO_ReadPin>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d103      	bne.n	8001ee0 <SET_HOUR_DATE.11+0xda4>
 8001ed8:	236f      	movs	r3, #111	; 0x6f
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2205      	movs	r2, #5
 8001ede:	701a      	strb	r2, [r3, #0]
			  if(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET)	{menu = 7;}
 8001ee0:	4b98      	ldr	r3, [pc, #608]	; (8002144 <SET_HOUR_DATE.11+0x1008>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f002 fac5 	bl	8004474 <HAL_GPIO_ReadPin>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d103      	bne.n	8001ef6 <SET_HOUR_DATE.11+0xdba>
 8001eee:	236f      	movs	r3, #111	; 0x6f
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	701a      	strb	r2, [r3, #0]
		  while(menu == 6)   // set day of month
 8001ef6:	236f      	movs	r3, #111	; 0x6f
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b06      	cmp	r3, #6
 8001efe:	d100      	bne.n	8001f02 <SET_HOUR_DATE.11+0xdc6>
 8001f00:	e648      	b.n	8001b94 <SET_HOUR_DATE.11+0xa58>
		  while(menu == 7)   // set day of week
 8001f02:	e14a      	b.n	800219a <SET_HOUR_DATE.11+0x105e>
			  while(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET);
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <SET_HOUR_DATE.11+0x1008>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f002 fab2 	bl	8004474 <HAL_GPIO_ReadPin>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d0f8      	beq.n	8001f06 <SET_HOUR_DATE.11+0xdca>
			  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 8001f14:	2358      	movs	r3, #88	; 0x58
 8001f16:	18f9      	adds	r1, r7, r3
 8001f18:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <SET_HOUR_DATE.11+0xfc8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f003 ff3d 	bl	8005d9c <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 8001f22:	2554      	movs	r5, #84	; 0x54
 8001f24:	1979      	adds	r1, r7, r5
 8001f26:	4b77      	ldr	r3, [pc, #476]	; (8002104 <SET_HOUR_DATE.11+0xfc8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f004 f83a 	bl	8005fa4 <HAL_RTC_GetDate>
		 	  RTC_DateTypeDef sDate = {0};   // set date
 8001f30:	2308      	movs	r3, #8
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
			  week_day = date.WeekDay;
 8001f38:	197b      	adds	r3, r7, r5
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	256d      	movs	r5, #109	; 0x6d
 8001f3e:	197b      	adds	r3, r7, r5
 8001f40:	701a      	strb	r2, [r3, #0]
			  week_day = week_day + ENCODER_ROTATION_DIRECTION();
 8001f42:	46a4      	mov	ip, r4
 8001f44:	f7ff f8d2 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	197b      	adds	r3, r7, r5
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	18d3      	adds	r3, r2, r3
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	197b      	adds	r3, r7, r5
 8001f56:	701a      	strb	r2, [r3, #0]
			  if(week_day > 7) week_day = 7;
 8001f58:	197b      	adds	r3, r7, r5
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b25b      	sxtb	r3, r3
 8001f5e:	2b07      	cmp	r3, #7
 8001f60:	dd02      	ble.n	8001f68 <SET_HOUR_DATE.11+0xe2c>
 8001f62:	197b      	adds	r3, r7, r5
 8001f64:	2207      	movs	r2, #7
 8001f66:	701a      	strb	r2, [r3, #0]
			  if(week_day < 1) week_day = 1;
 8001f68:	226d      	movs	r2, #109	; 0x6d
 8001f6a:	18bb      	adds	r3, r7, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	dc02      	bgt.n	8001f7a <SET_HOUR_DATE.11+0xe3e>
 8001f74:	18bb      	adds	r3, r7, r2
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
			  sDate.Year = date.Year;
 8001f7a:	2554      	movs	r5, #84	; 0x54
 8001f7c:	197b      	adds	r3, r7, r5
 8001f7e:	78da      	ldrb	r2, [r3, #3]
 8001f80:	2108      	movs	r1, #8
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	70da      	strb	r2, [r3, #3]
			  sDate.Month = date.Month;
 8001f86:	197b      	adds	r3, r7, r5
 8001f88:	785a      	ldrb	r2, [r3, #1]
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	705a      	strb	r2, [r3, #1]
			  sDate.Date = date.Date;
 8001f8e:	197b      	adds	r3, r7, r5
 8001f90:	789a      	ldrb	r2, [r3, #2]
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	709a      	strb	r2, [r3, #2]
			  sDate.WeekDay = week_day;
 8001f96:	266d      	movs	r6, #109	; 0x6d
 8001f98:	19bb      	adds	r3, r7, r6
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	701a      	strb	r2, [r3, #0]
			  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001fa0:	1879      	adds	r1, r7, r1
 8001fa2:	4b58      	ldr	r3, [pc, #352]	; (8002104 <SET_HOUR_DATE.11+0xfc8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f003 ff56 	bl	8005e58 <HAL_RTC_SetDate>
			  LCD_SEND_TEXT(15, 0, "SET DATE:");
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <SET_HOUR_DATE.11+0xfcc>)
 8001fae:	46a4      	mov	ip, r4
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	200f      	movs	r0, #15
 8001fb6:	f7fe ff47 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 2, "Year:");
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <SET_HOUR_DATE.11+0xfd0>)
 8001fbc:	46a4      	mov	ip, r4
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7fe ff40 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 3, "Month:");
 8001fc8:	4b51      	ldr	r3, [pc, #324]	; (8002110 <SET_HOUR_DATE.11+0xfd4>)
 8001fca:	46a4      	mov	ip, r4
 8001fcc:	001a      	movs	r2, r3
 8001fce:	2103      	movs	r1, #3
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7fe ff39 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 4, "Day:");
 8001fd6:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <SET_HOUR_DATE.11+0xfd8>)
 8001fd8:	46a4      	mov	ip, r4
 8001fda:	001a      	movs	r2, r3
 8001fdc:	2104      	movs	r1, #4
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe ff32 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(40, 2, " ");
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8001fe6:	46a4      	mov	ip, r4
 8001fe8:	001a      	movs	r2, r3
 8001fea:	2102      	movs	r1, #2
 8001fec:	2028      	movs	r0, #40	; 0x28
 8001fee:	f7fe ff2b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(71, 2, " ");
 8001ff2:	4b49      	ldr	r3, [pc, #292]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8001ff4:	46a4      	mov	ip, r4
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	2047      	movs	r0, #71	; 0x47
 8001ffc:	f7fe ff24 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 3, " ");
 8002000:	4b45      	ldr	r3, [pc, #276]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8002002:	46a4      	mov	ip, r4
 8002004:	001a      	movs	r2, r3
 8002006:	2103      	movs	r1, #3
 8002008:	2027      	movs	r0, #39	; 0x27
 800200a:	f7fe ff1d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 3, " ");
 800200e:	4b42      	ldr	r3, [pc, #264]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 8002010:	46a4      	mov	ip, r4
 8002012:	001a      	movs	r2, r3
 8002014:	2103      	movs	r1, #3
 8002016:	203b      	movs	r0, #59	; 0x3b
 8002018:	f7fe ff16 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(39, 4, " ");
 800201c:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 800201e:	46a4      	mov	ip, r4
 8002020:	001a      	movs	r2, r3
 8002022:	2104      	movs	r1, #4
 8002024:	2027      	movs	r0, #39	; 0x27
 8002026:	f7fe ff0f 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(59, 4, " ");
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <SET_HOUR_DATE.11+0xfdc>)
 800202c:	46a4      	mov	ip, r4
 800202e:	001a      	movs	r2, r3
 8002030:	2104      	movs	r1, #4
 8002032:	203b      	movs	r0, #59	; 0x3b
 8002034:	f7fe ff08 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(0, 5, ">");
 8002038:	4b38      	ldr	r3, [pc, #224]	; (800211c <SET_HOUR_DATE.11+0xfe0>)
 800203a:	46a4      	mov	ip, r4
 800203c:	001a      	movs	r2, r3
 800203e:	2105      	movs	r1, #5
 8002040:	2000      	movs	r0, #0
 8002042:	f7fe ff01 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(80, 5, "<");
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <SET_HOUR_DATE.11+0xfe4>)
 8002048:	46a4      	mov	ip, r4
 800204a:	001a      	movs	r2, r3
 800204c:	2105      	movs	r1, #5
 800204e:	2050      	movs	r0, #80	; 0x50
 8002050:	f7fe fefa 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_DIGIT(45, 2, 20);
 8002054:	46a4      	mov	ip, r4
 8002056:	2214      	movs	r2, #20
 8002058:	2102      	movs	r1, #2
 800205a:	202d      	movs	r0, #45	; 0x2d
 800205c:	f7fe fe46 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(57, 2, date.Year);
 8002060:	197b      	adds	r3, r7, r5
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	46a4      	mov	ip, r4
 8002066:	001a      	movs	r2, r3
 8002068:	2102      	movs	r1, #2
 800206a:	2039      	movs	r0, #57	; 0x39
 800206c:	f7fe fe3e 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 3, date.Month);
 8002070:	197b      	adds	r3, r7, r5
 8002072:	785b      	ldrb	r3, [r3, #1]
 8002074:	46a4      	mov	ip, r4
 8002076:	001a      	movs	r2, r3
 8002078:	2103      	movs	r1, #3
 800207a:	202d      	movs	r0, #45	; 0x2d
 800207c:	f7fe fe36 	bl	8000cec <LCD_SEND_DIGIT.7>
			  LCD_SEND_DIGIT(45, 4, date.Date);
 8002080:	197b      	adds	r3, r7, r5
 8002082:	789b      	ldrb	r3, [r3, #2]
 8002084:	46a4      	mov	ip, r4
 8002086:	001a      	movs	r2, r3
 8002088:	2104      	movs	r1, #4
 800208a:	202d      	movs	r0, #45	; 0x2d
 800208c:	f7fe fe2e 	bl	8000cec <LCD_SEND_DIGIT.7>
			  switch (week_day)
 8002090:	19bb      	adds	r3, r7, r6
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b25b      	sxtb	r3, r3
 8002096:	2b07      	cmp	r3, #7
 8002098:	d866      	bhi.n	8002168 <SET_HOUR_DATE.11+0x102c>
 800209a:	009a      	lsls	r2, r3, #2
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <SET_HOUR_DATE.11+0x100c>)
 800209e:	18d3      	adds	r3, r2, r3
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	469f      	mov	pc, r3
			  case 1: LCD_SEND_TEXT(15, 5, " Monday  ");
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <SET_HOUR_DATE.11+0x1010>)
 80020a6:	46a4      	mov	ip, r4
 80020a8:	001a      	movs	r2, r3
 80020aa:	2105      	movs	r1, #5
 80020ac:	200f      	movs	r0, #15
 80020ae:	f7fe fecb 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 80020b2:	e059      	b.n	8002168 <SET_HOUR_DATE.11+0x102c>
			  case 2: LCD_SEND_TEXT(15, 5, " Tuesday ");
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <SET_HOUR_DATE.11+0x1014>)
 80020b6:	46a4      	mov	ip, r4
 80020b8:	001a      	movs	r2, r3
 80020ba:	2105      	movs	r1, #5
 80020bc:	200f      	movs	r0, #15
 80020be:	f7fe fec3 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 80020c2:	e051      	b.n	8002168 <SET_HOUR_DATE.11+0x102c>
			  case 3: LCD_SEND_TEXT(15, 5, "Wednesday");
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <SET_HOUR_DATE.11+0xff4>)
 80020c6:	46a4      	mov	ip, r4
 80020c8:	001a      	movs	r2, r3
 80020ca:	2105      	movs	r1, #5
 80020cc:	200f      	movs	r0, #15
 80020ce:	f7fe febb 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 80020d2:	e049      	b.n	8002168 <SET_HOUR_DATE.11+0x102c>
			  case 4: LCD_SEND_TEXT(15, 5, "Thursday ");
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <SET_HOUR_DATE.11+0xff8>)
 80020d6:	46a4      	mov	ip, r4
 80020d8:	001a      	movs	r2, r3
 80020da:	2105      	movs	r1, #5
 80020dc:	200f      	movs	r0, #15
 80020de:	f7fe feb3 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 80020e2:	e041      	b.n	8002168 <SET_HOUR_DATE.11+0x102c>
			  case 5: LCD_SEND_TEXT(15, 5, " Friday  ");
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <SET_HOUR_DATE.11+0x1018>)
 80020e6:	46a4      	mov	ip, r4
 80020e8:	001a      	movs	r2, r3
 80020ea:	2105      	movs	r1, #5
 80020ec:	200f      	movs	r0, #15
 80020ee:	f7fe feab 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 80020f2:	e039      	b.n	8002168 <SET_HOUR_DATE.11+0x102c>
			  case 6: LCD_SEND_TEXT(15, 5, "Saturday ");
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <SET_HOUR_DATE.11+0x1000>)
 80020f6:	46a4      	mov	ip, r4
 80020f8:	001a      	movs	r2, r3
 80020fa:	2105      	movs	r1, #5
 80020fc:	200f      	movs	r0, #15
 80020fe:	f7fe fea3 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8002102:	e031      	b.n	8002168 <SET_HOUR_DATE.11+0x102c>
 8002104:	200002f4 	.word	0x200002f4
 8002108:	08006e40 	.word	0x08006e40
 800210c:	08006e4c 	.word	0x08006e4c
 8002110:	08006e54 	.word	0x08006e54
 8002114:	08006e5c 	.word	0x08006e5c
 8002118:	08006e3c 	.word	0x08006e3c
 800211c:	08006e34 	.word	0x08006e34
 8002120:	08006e38 	.word	0x08006e38
 8002124:	080072b8 	.word	0x080072b8
 8002128:	08006e64 	.word	0x08006e64
 800212c:	08006e70 	.word	0x08006e70
 8002130:	08006e7c 	.word	0x08006e7c
 8002134:	08006e88 	.word	0x08006e88
 8002138:	08006e94 	.word	0x08006e94
 800213c:	08006ea0 	.word	0x08006ea0
 8002140:	08006eac 	.word	0x08006eac
 8002144:	48001400 	.word	0x48001400
 8002148:	080072d8 	.word	0x080072d8
 800214c:	08006eb8 	.word	0x08006eb8
 8002150:	08006ec4 	.word	0x08006ec4
 8002154:	08006ed0 	.word	0x08006ed0
			  case 7: LCD_SEND_TEXT(15, 5, " Sunday  ");
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <SET_HOUR_DATE.11+0x1080>)
 800215a:	46a4      	mov	ip, r4
 800215c:	001a      	movs	r2, r3
 800215e:	2105      	movs	r1, #5
 8002160:	200f      	movs	r0, #15
 8002162:	f7fe fe71 	bl	8000e48 <LCD_SEND_TEXT.9>
			  break;
 8002166:	46c0      	nop			; (mov r8, r8)
			  if(HAL_GPIO_ReadPin(GPIOF, ESCAPE_Pin) == GPIO_PIN_RESET)	{menu = 6;}
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <SET_HOUR_DATE.11+0x1084>)
 800216a:	2140      	movs	r1, #64	; 0x40
 800216c:	0018      	movs	r0, r3
 800216e:	f002 f981 	bl	8004474 <HAL_GPIO_ReadPin>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d103      	bne.n	800217e <SET_HOUR_DATE.11+0x1042>
 8002176:	236f      	movs	r3, #111	; 0x6f
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2206      	movs	r2, #6
 800217c:	701a      	strb	r2, [r3, #0]
			  if(HAL_GPIO_ReadPin(GPIOF, ENTER_Pin) == GPIO_PIN_RESET)	{menu = 8; LCD_CLEAR();}
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <SET_HOUR_DATE.11+0x1084>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0018      	movs	r0, r3
 8002184:	f002 f976 	bl	8004474 <HAL_GPIO_ReadPin>
 8002188:	1e03      	subs	r3, r0, #0
 800218a:	d106      	bne.n	800219a <SET_HOUR_DATE.11+0x105e>
 800218c:	236f      	movs	r3, #111	; 0x6f
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2208      	movs	r2, #8
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	46a4      	mov	ip, r4
 8002196:	f7fe fcb9 	bl	8000b0c <LCD_CLEAR.10>
		  while(menu == 7)   // set day of week
 800219a:	226f      	movs	r2, #111	; 0x6f
 800219c:	18bb      	adds	r3, r7, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b07      	cmp	r3, #7
 80021a2:	d100      	bne.n	80021a6 <SET_HOUR_DATE.11+0x106a>
 80021a4:	e6ae      	b.n	8001f04 <SET_HOUR_DATE.11+0xdc8>
		  if(menu == 8) {break;}
 80021a6:	18bb      	adds	r3, r7, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d001      	beq.n	80021b2 <SET_HOUR_DATE.11+0x1076>
		  while(menu == 1)   // set hour
 80021ae:	f7ff f896 	bl	80012de <SET_HOUR_DATE.11+0x1a2>
		  if(menu == 8) {break;}
 80021b2:	46c0      	nop			; (mov r8, r8)
  }
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b01d      	add	sp, #116	; 0x74
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021bc:	08006edc 	.word	0x08006edc
 80021c0:	48001400 	.word	0x48001400

080021c4 <SET_RELAY_PROGRAM.12>:
  {
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4664      	mov	r4, ip
 80021cc:	4663      	mov	r3, ip
 80021ce:	607b      	str	r3, [r7, #4]
		  int8_t activity_program = 0;
 80021d0:	230f      	movs	r3, #15
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
		  int8_t relay = 0;
 80021d8:	230e      	movs	r3, #14
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
		  int8_t day_of_week = 0;
 80021e0:	230d      	movs	r3, #13
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
		  int8_t hour = 0;
 80021e8:	230c      	movs	r3, #12
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
		  int8_t minute = 0;
 80021f0:	230b      	movs	r3, #11
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
		  uint8_t menu = 0;
 80021f8:	230a      	movs	r3, #10
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
		  while(menu < 7)
 8002200:	f000 ff4b 	bl	800309a <SET_RELAY_PROGRAM.12+0xed6>
			  		  	  						  HAL_Delay(100);
 8002204:	2064      	movs	r0, #100	; 0x64
 8002206:	f001 feed 	bl	8003fe4 <HAL_Delay>
			  		  	  						  LCD_SEND_TEXT(12, 0, "Program:");
 800220a:	4be6      	ldr	r3, [pc, #920]	; (80025a4 <SET_RELAY_PROGRAM.12+0x3e0>)
 800220c:	46a4      	mov	ip, r4
 800220e:	001a      	movs	r2, r3
 8002210:	2100      	movs	r1, #0
 8002212:	200c      	movs	r0, #12
 8002214:	f7fe fe18 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_DIGIT(57, 0, number_program);                                                 // number program
 8002218:	4be3      	ldr	r3, [pc, #908]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b25b      	sxtb	r3, r3
 800221e:	46a4      	mov	ip, r4
 8002220:	001a      	movs	r2, r3
 8002222:	2100      	movs	r1, #0
 8002224:	2039      	movs	r0, #57	; 0x39
 8002226:	f7fe fd61 	bl	8000cec <LCD_SEND_DIGIT.7>
			  		  	  						  if(program_data[number_program][0] == 0) LCD_SEND_TEXT(12, 1, "Disable");              // program status
 800222a:	4bdf      	ldr	r3, [pc, #892]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b25b      	sxtb	r3, r3
 8002230:	0019      	movs	r1, r3
 8002232:	4ade      	ldr	r2, [pc, #888]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 8002234:	000b      	movs	r3, r1
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	185b      	adds	r3, r3, r1
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <SET_RELAY_PROGRAM.12+0x8a>
 8002240:	4bdb      	ldr	r3, [pc, #876]	; (80025b0 <SET_RELAY_PROGRAM.12+0x3ec>)
 8002242:	46a4      	mov	ip, r4
 8002244:	001a      	movs	r2, r3
 8002246:	2101      	movs	r1, #1
 8002248:	200c      	movs	r0, #12
 800224a:	f7fe fdfd 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(program_data[number_program][0] == 1) LCD_SEND_TEXT(12, 1, "Enable ");               // program status
 800224e:	4bd6      	ldr	r3, [pc, #856]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b25b      	sxtb	r3, r3
 8002254:	0019      	movs	r1, r3
 8002256:	4ad5      	ldr	r2, [pc, #852]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 8002258:	000b      	movs	r3, r1
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	185b      	adds	r3, r3, r1
 800225e:	5c9b      	ldrb	r3, [r3, r2]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d106      	bne.n	8002272 <SET_RELAY_PROGRAM.12+0xae>
 8002264:	4bd3      	ldr	r3, [pc, #844]	; (80025b4 <SET_RELAY_PROGRAM.12+0x3f0>)
 8002266:	46a4      	mov	ip, r4
 8002268:	001a      	movs	r2, r3
 800226a:	2101      	movs	r1, #1
 800226c:	200c      	movs	r0, #12
 800226e:	f7fe fdeb 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(12, 2, "Relay:");
 8002272:	4bd1      	ldr	r3, [pc, #836]	; (80025b8 <SET_RELAY_PROGRAM.12+0x3f4>)
 8002274:	46a4      	mov	ip, r4
 8002276:	001a      	movs	r2, r3
 8002278:	2102      	movs	r1, #2
 800227a:	200c      	movs	r0, #12
 800227c:	f7fe fde4 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(program_data[number_program][1] == 0) LCD_SEND_TEXT(48, 2, "OFF");                  // relay status
 8002280:	4bc9      	ldr	r3, [pc, #804]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b25b      	sxtb	r3, r3
 8002286:	0019      	movs	r1, r3
 8002288:	4ac8      	ldr	r2, [pc, #800]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 800228a:	000b      	movs	r3, r1
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	185b      	adds	r3, r3, r1
 8002290:	18d3      	adds	r3, r2, r3
 8002292:	3301      	adds	r3, #1
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <SET_RELAY_PROGRAM.12+0xe4>
 800229a:	4bc8      	ldr	r3, [pc, #800]	; (80025bc <SET_RELAY_PROGRAM.12+0x3f8>)
 800229c:	46a4      	mov	ip, r4
 800229e:	001a      	movs	r2, r3
 80022a0:	2102      	movs	r1, #2
 80022a2:	2030      	movs	r0, #48	; 0x30
 80022a4:	f7fe fdd0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(program_data[number_program][1] == 0) LCD_SEND_TEXT(48, 2, "ON ");                  // relay status
 80022a8:	4bbf      	ldr	r3, [pc, #764]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	0019      	movs	r1, r3
 80022b0:	4abe      	ldr	r2, [pc, #760]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 80022b2:	000b      	movs	r3, r1
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	185b      	adds	r3, r3, r1
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <SET_RELAY_PROGRAM.12+0x10c>
 80022c2:	4bbf      	ldr	r3, [pc, #764]	; (80025c0 <SET_RELAY_PROGRAM.12+0x3fc>)
 80022c4:	46a4      	mov	ip, r4
 80022c6:	001a      	movs	r2, r3
 80022c8:	2102      	movs	r1, #2
 80022ca:	2030      	movs	r0, #48	; 0x30
 80022cc:	f7fe fdbc 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(12, 3, "At:");
 80022d0:	4bbc      	ldr	r3, [pc, #752]	; (80025c4 <SET_RELAY_PROGRAM.12+0x400>)
 80022d2:	46a4      	mov	ip, r4
 80022d4:	001a      	movs	r2, r3
 80022d6:	2103      	movs	r1, #3
 80022d8:	200c      	movs	r0, #12
 80022da:	f7fe fdb5 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(program_data[number_program][2] == 0) program_data[number_program][2] = 1;
 80022de:	4bb2      	ldr	r3, [pc, #712]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	0019      	movs	r1, r3
 80022e6:	4ab1      	ldr	r2, [pc, #708]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 80022e8:	000b      	movs	r3, r1
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	185b      	adds	r3, r3, r1
 80022ee:	18d3      	adds	r3, r2, r3
 80022f0:	3302      	adds	r3, #2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <SET_RELAY_PROGRAM.12+0x14c>
 80022f8:	4bab      	ldr	r3, [pc, #684]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	0019      	movs	r1, r3
 8002300:	4aaa      	ldr	r2, [pc, #680]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 8002302:	000b      	movs	r3, r1
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	185b      	adds	r3, r3, r1
 8002308:	18d3      	adds	r3, r2, r3
 800230a:	3302      	adds	r3, #2
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
			  		  	  						  day_of_week = program_data[number_program][2];
 8002310:	4ba5      	ldr	r3, [pc, #660]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	0019      	movs	r1, r3
 8002318:	4aa4      	ldr	r2, [pc, #656]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 800231a:	000b      	movs	r3, r1
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	185b      	adds	r3, r3, r1
 8002320:	18d3      	adds	r3, r2, r3
 8002322:	3302      	adds	r3, #2
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	210d      	movs	r1, #13
 8002328:	187b      	adds	r3, r7, r1
 800232a:	701a      	strb	r2, [r3, #0]
			  		  	  						  switch (day_of_week)                                                                 //  day of week
 800232c:	187b      	adds	r3, r7, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25b      	sxtb	r3, r3
 8002332:	2b07      	cmp	r3, #7
 8002334:	d83c      	bhi.n	80023b0 <SET_RELAY_PROGRAM.12+0x1ec>
 8002336:	009a      	lsls	r2, r3, #2
 8002338:	4ba3      	ldr	r3, [pc, #652]	; (80025c8 <SET_RELAY_PROGRAM.12+0x404>)
 800233a:	18d3      	adds	r3, r2, r3
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	469f      	mov	pc, r3
			  		  	  						  case 1: LCD_SEND_TEXT(12, 4, "Monday   ");
 8002340:	4ba2      	ldr	r3, [pc, #648]	; (80025cc <SET_RELAY_PROGRAM.12+0x408>)
 8002342:	46a4      	mov	ip, r4
 8002344:	001a      	movs	r2, r3
 8002346:	2104      	movs	r1, #4
 8002348:	200c      	movs	r0, #12
 800234a:	f7fe fd7d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 800234e:	e02f      	b.n	80023b0 <SET_RELAY_PROGRAM.12+0x1ec>
			  		  	  						  case 2: LCD_SEND_TEXT(12, 4, "Tuesday  ");
 8002350:	4b9f      	ldr	r3, [pc, #636]	; (80025d0 <SET_RELAY_PROGRAM.12+0x40c>)
 8002352:	46a4      	mov	ip, r4
 8002354:	001a      	movs	r2, r3
 8002356:	2104      	movs	r1, #4
 8002358:	200c      	movs	r0, #12
 800235a:	f7fe fd75 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 800235e:	e027      	b.n	80023b0 <SET_RELAY_PROGRAM.12+0x1ec>
			  		  	  						  case 3: LCD_SEND_TEXT(12, 4, "Wednesday");
 8002360:	4b9c      	ldr	r3, [pc, #624]	; (80025d4 <SET_RELAY_PROGRAM.12+0x410>)
 8002362:	46a4      	mov	ip, r4
 8002364:	001a      	movs	r2, r3
 8002366:	2104      	movs	r1, #4
 8002368:	200c      	movs	r0, #12
 800236a:	f7fe fd6d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 800236e:	e01f      	b.n	80023b0 <SET_RELAY_PROGRAM.12+0x1ec>
			  		  	  						  case 4: LCD_SEND_TEXT(12, 4, "Thursday ");
 8002370:	4b99      	ldr	r3, [pc, #612]	; (80025d8 <SET_RELAY_PROGRAM.12+0x414>)
 8002372:	46a4      	mov	ip, r4
 8002374:	001a      	movs	r2, r3
 8002376:	2104      	movs	r1, #4
 8002378:	200c      	movs	r0, #12
 800237a:	f7fe fd65 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 800237e:	e017      	b.n	80023b0 <SET_RELAY_PROGRAM.12+0x1ec>
			  		  	  						  case 5: LCD_SEND_TEXT(12, 4, "Friday   ");
 8002380:	4b96      	ldr	r3, [pc, #600]	; (80025dc <SET_RELAY_PROGRAM.12+0x418>)
 8002382:	46a4      	mov	ip, r4
 8002384:	001a      	movs	r2, r3
 8002386:	2104      	movs	r1, #4
 8002388:	200c      	movs	r0, #12
 800238a:	f7fe fd5d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 800238e:	e00f      	b.n	80023b0 <SET_RELAY_PROGRAM.12+0x1ec>
			  		  	  						  case 6: LCD_SEND_TEXT(12, 4, "Saturday ");
 8002390:	4b93      	ldr	r3, [pc, #588]	; (80025e0 <SET_RELAY_PROGRAM.12+0x41c>)
 8002392:	46a4      	mov	ip, r4
 8002394:	001a      	movs	r2, r3
 8002396:	2104      	movs	r1, #4
 8002398:	200c      	movs	r0, #12
 800239a:	f7fe fd55 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 800239e:	e007      	b.n	80023b0 <SET_RELAY_PROGRAM.12+0x1ec>
			  		  	  						  case 7: LCD_SEND_TEXT(12, 4, "Sunday   ");
 80023a0:	4b90      	ldr	r3, [pc, #576]	; (80025e4 <SET_RELAY_PROGRAM.12+0x420>)
 80023a2:	46a4      	mov	ip, r4
 80023a4:	001a      	movs	r2, r3
 80023a6:	2104      	movs	r1, #4
 80023a8:	200c      	movs	r0, #12
 80023aa:	f7fe fd4d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 80023ae:	46c0      	nop			; (mov r8, r8)
			  		  	  						  LCD_SEND_DIGIT(12, 5, program_data[number_program][3]);                             // hour
 80023b0:	4b7d      	ldr	r3, [pc, #500]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	0019      	movs	r1, r3
 80023b8:	4a7c      	ldr	r2, [pc, #496]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 80023ba:	000b      	movs	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	185b      	adds	r3, r3, r1
 80023c0:	18d3      	adds	r3, r2, r3
 80023c2:	3303      	adds	r3, #3
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	46a4      	mov	ip, r4
 80023c8:	001a      	movs	r2, r3
 80023ca:	2105      	movs	r1, #5
 80023cc:	200c      	movs	r0, #12
 80023ce:	f7fe fc8d 	bl	8000cec <LCD_SEND_DIGIT.7>
			  		  	  						  LCD_SEND_TEXT(25, 5, ":");
 80023d2:	4b85      	ldr	r3, [pc, #532]	; (80025e8 <SET_RELAY_PROGRAM.12+0x424>)
 80023d4:	46a4      	mov	ip, r4
 80023d6:	001a      	movs	r2, r3
 80023d8:	2105      	movs	r1, #5
 80023da:	2019      	movs	r0, #25
 80023dc:	f7fe fd34 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_DIGIT(29, 5, program_data[number_program][4]);                             // minute
 80023e0:	4b71      	ldr	r3, [pc, #452]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	0019      	movs	r1, r3
 80023e8:	4a70      	ldr	r2, [pc, #448]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 80023ea:	000b      	movs	r3, r1
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	185b      	adds	r3, r3, r1
 80023f0:	18d3      	adds	r3, r2, r3
 80023f2:	3304      	adds	r3, #4
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	46a4      	mov	ip, r4
 80023f8:	001a      	movs	r2, r3
 80023fa:	2105      	movs	r1, #5
 80023fc:	201d      	movs	r0, #29
 80023fe:	f7fe fc75 	bl	8000cec <LCD_SEND_DIGIT.7>
			  	  	  	  	  	  	  	  	  while(ENTER_RST)
 8002402:	4b7a      	ldr	r3, [pc, #488]	; (80025ec <SET_RELAY_PROGRAM.12+0x428>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	0018      	movs	r0, r3
 8002408:	f002 f834 	bl	8004474 <HAL_GPIO_ReadPin>
 800240c:	1e03      	subs	r3, r0, #0
 800240e:	d100      	bne.n	8002412 <SET_RELAY_PROGRAM.12+0x24e>
 8002410:	e6f8      	b.n	8002204 <SET_RELAY_PROGRAM.12+0x40>
			  	  	  	  	  	  	  	  	  while(ESCAPE_RST) {HAL_Delay(99);}
 8002412:	e002      	b.n	800241a <SET_RELAY_PROGRAM.12+0x256>
 8002414:	2063      	movs	r0, #99	; 0x63
 8002416:	f001 fde5 	bl	8003fe4 <HAL_Delay>
 800241a:	4b74      	ldr	r3, [pc, #464]	; (80025ec <SET_RELAY_PROGRAM.12+0x428>)
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	0018      	movs	r0, r3
 8002420:	f002 f828 	bl	8004474 <HAL_GPIO_ReadPin>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	d0f5      	beq.n	8002414 <SET_RELAY_PROGRAM.12+0x250>
			  		  	  					  while(menu == 0)                            // ENTER SET
 8002428:	e166      	b.n	80026f8 <SET_RELAY_PROGRAM.12+0x534>
			  		  	  						  number_program = number_program + ENCODER_ROTATION_DIRECTION();
 800242a:	46a4      	mov	ip, r4
 800242c:	f7fe fe5e 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8002430:	0003      	movs	r3, r0
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b25b      	sxtb	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	18d3      	adds	r3, r2, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	b25a      	sxtb	r2, r3
 8002442:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002444:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(number_program < 0) number_program = 13;
 8002446:	4b58      	ldr	r3, [pc, #352]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b25b      	sxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	da02      	bge.n	8002456 <SET_RELAY_PROGRAM.12+0x292>
 8002450:	4b55      	ldr	r3, [pc, #340]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002452:	220d      	movs	r2, #13
 8002454:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(number_program > 13) number_program = 0;
 8002456:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b25b      	sxtb	r3, r3
 800245c:	2b0d      	cmp	r3, #13
 800245e:	dd02      	ble.n	8002466 <SET_RELAY_PROGRAM.12+0x2a2>
 8002460:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
			  		  	  						  HAL_Delay(10);
 8002466:	200a      	movs	r0, #10
 8002468:	f001 fdbc 	bl	8003fe4 <HAL_Delay>
			  		  	  						  LCD_SEND_TEXT(0, 0, "  Program:");
 800246c:	4b60      	ldr	r3, [pc, #384]	; (80025f0 <SET_RELAY_PROGRAM.12+0x42c>)
 800246e:	46a4      	mov	ip, r4
 8002470:	001a      	movs	r2, r3
 8002472:	2100      	movs	r1, #0
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fce7 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(0, 0, "->");
 800247a:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <SET_RELAY_PROGRAM.12+0x430>)
 800247c:	46a4      	mov	ip, r4
 800247e:	001a      	movs	r2, r3
 8002480:	2100      	movs	r1, #0
 8002482:	2000      	movs	r0, #0
 8002484:	f7fe fce0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_DIGIT(59, 0, number_program);                                                 // number program
 8002488:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b25b      	sxtb	r3, r3
 800248e:	46a4      	mov	ip, r4
 8002490:	001a      	movs	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	203b      	movs	r0, #59	; 0x3b
 8002496:	f7fe fc29 	bl	8000cec <LCD_SEND_DIGIT.7>
			  		  	  						  if(program_data[number_program][0] == 0) LCD_SEND_TEXT(12, 1, "Disable");              // program status
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	0019      	movs	r1, r3
 80024a2:	4a42      	ldr	r2, [pc, #264]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 80024a4:	000b      	movs	r3, r1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	185b      	adds	r3, r3, r1
 80024aa:	5c9b      	ldrb	r3, [r3, r2]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <SET_RELAY_PROGRAM.12+0x2fa>
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <SET_RELAY_PROGRAM.12+0x3ec>)
 80024b2:	46a4      	mov	ip, r4
 80024b4:	001a      	movs	r2, r3
 80024b6:	2101      	movs	r1, #1
 80024b8:	200c      	movs	r0, #12
 80024ba:	f7fe fcc5 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(program_data[number_program][0] == 1) LCD_SEND_TEXT(12, 1, "Enable ");               // program status
 80024be:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	0019      	movs	r1, r3
 80024c6:	4a39      	ldr	r2, [pc, #228]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 80024c8:	000b      	movs	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	185b      	adds	r3, r3, r1
 80024ce:	5c9b      	ldrb	r3, [r3, r2]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <SET_RELAY_PROGRAM.12+0x31e>
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <SET_RELAY_PROGRAM.12+0x3f0>)
 80024d6:	46a4      	mov	ip, r4
 80024d8:	001a      	movs	r2, r3
 80024da:	2101      	movs	r1, #1
 80024dc:	200c      	movs	r0, #12
 80024de:	f7fe fcb3 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(program_data[number_program][1] == 0) LCD_SEND_TEXT(12, 2, "Relay: OFF");                  // relay status
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	0019      	movs	r1, r3
 80024ea:	4a30      	ldr	r2, [pc, #192]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 80024ec:	000b      	movs	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	185b      	adds	r3, r3, r1
 80024f2:	18d3      	adds	r3, r2, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <SET_RELAY_PROGRAM.12+0x346>
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <SET_RELAY_PROGRAM.12+0x434>)
 80024fe:	46a4      	mov	ip, r4
 8002500:	001a      	movs	r2, r3
 8002502:	2102      	movs	r1, #2
 8002504:	200c      	movs	r0, #12
 8002506:	f7fe fc9f 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(program_data[number_program][1] == 1) LCD_SEND_TEXT(12, 2, "Relay: ON ");                  // relay status
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b25b      	sxtb	r3, r3
 8002510:	0019      	movs	r1, r3
 8002512:	4a26      	ldr	r2, [pc, #152]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 8002514:	000b      	movs	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	185b      	adds	r3, r3, r1
 800251a:	18d3      	adds	r3, r2, r3
 800251c:	3301      	adds	r3, #1
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d106      	bne.n	8002532 <SET_RELAY_PROGRAM.12+0x36e>
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <SET_RELAY_PROGRAM.12+0x438>)
 8002526:	46a4      	mov	ip, r4
 8002528:	001a      	movs	r2, r3
 800252a:	2102      	movs	r1, #2
 800252c:	200c      	movs	r0, #12
 800252e:	f7fe fc8b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(12, 3, "At:");
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <SET_RELAY_PROGRAM.12+0x400>)
 8002534:	46a4      	mov	ip, r4
 8002536:	001a      	movs	r2, r3
 8002538:	2103      	movs	r1, #3
 800253a:	200c      	movs	r0, #12
 800253c:	f7fe fc84 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(program_data[number_program][2] == 0) program_data[number_program][2] = 1;
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b25b      	sxtb	r3, r3
 8002546:	0019      	movs	r1, r3
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 800254a:	000b      	movs	r3, r1
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	185b      	adds	r3, r3, r1
 8002550:	18d3      	adds	r3, r2, r3
 8002552:	3302      	adds	r3, #2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <SET_RELAY_PROGRAM.12+0x3ae>
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	0019      	movs	r1, r3
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 8002564:	000b      	movs	r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	185b      	adds	r3, r3, r1
 800256a:	18d3      	adds	r3, r2, r3
 800256c:	3302      	adds	r3, #2
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
			  		  	  						  day_of_week = program_data[number_program][2];
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <SET_RELAY_PROGRAM.12+0x3e4>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	0019      	movs	r1, r3
 800257a:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <SET_RELAY_PROGRAM.12+0x3e8>)
 800257c:	000b      	movs	r3, r1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	185b      	adds	r3, r3, r1
 8002582:	18d3      	adds	r3, r2, r3
 8002584:	3302      	adds	r3, #2
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	210d      	movs	r1, #13
 800258a:	187b      	adds	r3, r7, r1
 800258c:	701a      	strb	r2, [r3, #0]
			  		  	  						  switch (day_of_week)                                                                 //  day of week
 800258e:	187b      	adds	r3, r7, r1
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	b25b      	sxtb	r3, r3
 8002594:	2b07      	cmp	r3, #7
 8002596:	d86d      	bhi.n	8002674 <SET_RELAY_PROGRAM.12+0x4b0>
 8002598:	009a      	lsls	r2, r3, #2
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <SET_RELAY_PROGRAM.12+0x43c>)
 800259c:	18d3      	adds	r3, r2, r3
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	469f      	mov	pc, r3
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	08006ee8 	.word	0x08006ee8
 80025a8:	200003c8 	.word	0x200003c8
 80025ac:	20000234 	.word	0x20000234
 80025b0:	08006ef4 	.word	0x08006ef4
 80025b4:	08006efc 	.word	0x08006efc
 80025b8:	08006f04 	.word	0x08006f04
 80025bc:	08006f0c 	.word	0x08006f0c
 80025c0:	08006f10 	.word	0x08006f10
 80025c4:	08006f14 	.word	0x08006f14
 80025c8:	080072f8 	.word	0x080072f8
 80025cc:	08006e64 	.word	0x08006e64
 80025d0:	08006e70 	.word	0x08006e70
 80025d4:	08006e7c 	.word	0x08006e7c
 80025d8:	08006e88 	.word	0x08006e88
 80025dc:	08006e94 	.word	0x08006e94
 80025e0:	08006ea0 	.word	0x08006ea0
 80025e4:	08006eac 	.word	0x08006eac
 80025e8:	08006f18 	.word	0x08006f18
 80025ec:	48001400 	.word	0x48001400
 80025f0:	08006f1c 	.word	0x08006f1c
 80025f4:	08006f28 	.word	0x08006f28
 80025f8:	08006f2c 	.word	0x08006f2c
 80025fc:	08006f38 	.word	0x08006f38
 8002600:	08007318 	.word	0x08007318
			  		  	  						  case 1: LCD_SEND_TEXT(12, 4, "Monday   ");
 8002604:	4bb4      	ldr	r3, [pc, #720]	; (80028d8 <SET_RELAY_PROGRAM.12+0x714>)
 8002606:	46a4      	mov	ip, r4
 8002608:	001a      	movs	r2, r3
 800260a:	2104      	movs	r1, #4
 800260c:	200c      	movs	r0, #12
 800260e:	f7fe fc1b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002612:	e02f      	b.n	8002674 <SET_RELAY_PROGRAM.12+0x4b0>
			  		  	  						  case 2: LCD_SEND_TEXT(12, 4, "Tuesday  ");
 8002614:	4bb1      	ldr	r3, [pc, #708]	; (80028dc <SET_RELAY_PROGRAM.12+0x718>)
 8002616:	46a4      	mov	ip, r4
 8002618:	001a      	movs	r2, r3
 800261a:	2104      	movs	r1, #4
 800261c:	200c      	movs	r0, #12
 800261e:	f7fe fc13 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002622:	e027      	b.n	8002674 <SET_RELAY_PROGRAM.12+0x4b0>
			  		  	  						  case 3: LCD_SEND_TEXT(12, 4, "Wednesday");
 8002624:	4bae      	ldr	r3, [pc, #696]	; (80028e0 <SET_RELAY_PROGRAM.12+0x71c>)
 8002626:	46a4      	mov	ip, r4
 8002628:	001a      	movs	r2, r3
 800262a:	2104      	movs	r1, #4
 800262c:	200c      	movs	r0, #12
 800262e:	f7fe fc0b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002632:	e01f      	b.n	8002674 <SET_RELAY_PROGRAM.12+0x4b0>
			  		  	  						  case 4: LCD_SEND_TEXT(12, 4, "Thursday ");
 8002634:	4bab      	ldr	r3, [pc, #684]	; (80028e4 <SET_RELAY_PROGRAM.12+0x720>)
 8002636:	46a4      	mov	ip, r4
 8002638:	001a      	movs	r2, r3
 800263a:	2104      	movs	r1, #4
 800263c:	200c      	movs	r0, #12
 800263e:	f7fe fc03 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002642:	e017      	b.n	8002674 <SET_RELAY_PROGRAM.12+0x4b0>
			  		  	  						  case 5: LCD_SEND_TEXT(12, 4, "Friday   ");
 8002644:	4ba8      	ldr	r3, [pc, #672]	; (80028e8 <SET_RELAY_PROGRAM.12+0x724>)
 8002646:	46a4      	mov	ip, r4
 8002648:	001a      	movs	r2, r3
 800264a:	2104      	movs	r1, #4
 800264c:	200c      	movs	r0, #12
 800264e:	f7fe fbfb 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002652:	e00f      	b.n	8002674 <SET_RELAY_PROGRAM.12+0x4b0>
			  		  	  						  case 6: LCD_SEND_TEXT(12, 4, "Saturday ");
 8002654:	4ba5      	ldr	r3, [pc, #660]	; (80028ec <SET_RELAY_PROGRAM.12+0x728>)
 8002656:	46a4      	mov	ip, r4
 8002658:	001a      	movs	r2, r3
 800265a:	2104      	movs	r1, #4
 800265c:	200c      	movs	r0, #12
 800265e:	f7fe fbf3 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002662:	e007      	b.n	8002674 <SET_RELAY_PROGRAM.12+0x4b0>
			  		  	  						  case 7: LCD_SEND_TEXT(12, 4, "Sunday   ");
 8002664:	4ba2      	ldr	r3, [pc, #648]	; (80028f0 <SET_RELAY_PROGRAM.12+0x72c>)
 8002666:	46a4      	mov	ip, r4
 8002668:	001a      	movs	r2, r3
 800266a:	2104      	movs	r1, #4
 800266c:	200c      	movs	r0, #12
 800266e:	f7fe fbeb 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002672:	46c0      	nop			; (mov r8, r8)
			  		  	  						  LCD_SEND_DIGIT(12, 5, program_data[number_program][3]);                             // hour
 8002674:	4b9f      	ldr	r3, [pc, #636]	; (80028f4 <SET_RELAY_PROGRAM.12+0x730>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b25b      	sxtb	r3, r3
 800267a:	0019      	movs	r1, r3
 800267c:	4a9e      	ldr	r2, [pc, #632]	; (80028f8 <SET_RELAY_PROGRAM.12+0x734>)
 800267e:	000b      	movs	r3, r1
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	185b      	adds	r3, r3, r1
 8002684:	18d3      	adds	r3, r2, r3
 8002686:	3303      	adds	r3, #3
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	46a4      	mov	ip, r4
 800268c:	001a      	movs	r2, r3
 800268e:	2105      	movs	r1, #5
 8002690:	200c      	movs	r0, #12
 8002692:	f7fe fb2b 	bl	8000cec <LCD_SEND_DIGIT.7>
			  		  	  						  LCD_SEND_TEXT(25, 5, ":");
 8002696:	4b99      	ldr	r3, [pc, #612]	; (80028fc <SET_RELAY_PROGRAM.12+0x738>)
 8002698:	46a4      	mov	ip, r4
 800269a:	001a      	movs	r2, r3
 800269c:	2105      	movs	r1, #5
 800269e:	2019      	movs	r0, #25
 80026a0:	f7fe fbd2 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_DIGIT(29, 5, program_data[number_program][4]);                             // minute
 80026a4:	4b93      	ldr	r3, [pc, #588]	; (80028f4 <SET_RELAY_PROGRAM.12+0x730>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	0019      	movs	r1, r3
 80026ac:	4a92      	ldr	r2, [pc, #584]	; (80028f8 <SET_RELAY_PROGRAM.12+0x734>)
 80026ae:	000b      	movs	r3, r1
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	185b      	adds	r3, r3, r1
 80026b4:	18d3      	adds	r3, r2, r3
 80026b6:	3304      	adds	r3, #4
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	46a4      	mov	ip, r4
 80026bc:	001a      	movs	r2, r3
 80026be:	2105      	movs	r1, #5
 80026c0:	201d      	movs	r0, #29
 80026c2:	f7fe fb13 	bl	8000cec <LCD_SEND_DIGIT.7>
			  		  	  						  if(ENTER_RST){HAL_Delay(100); menu = 1;}
 80026c6:	4b8e      	ldr	r3, [pc, #568]	; (8002900 <SET_RELAY_PROGRAM.12+0x73c>)
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	0018      	movs	r0, r3
 80026cc:	f001 fed2 	bl	8004474 <HAL_GPIO_ReadPin>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d106      	bne.n	80026e2 <SET_RELAY_PROGRAM.12+0x51e>
 80026d4:	2064      	movs	r0, #100	; 0x64
 80026d6:	f001 fc85 	bl	8003fe4 <HAL_Delay>
 80026da:	230a      	movs	r3, #10
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ESCAPE_RST) menu = 7;
 80026e2:	4b87      	ldr	r3, [pc, #540]	; (8002900 <SET_RELAY_PROGRAM.12+0x73c>)
 80026e4:	2140      	movs	r1, #64	; 0x40
 80026e6:	0018      	movs	r0, r3
 80026e8:	f001 fec4 	bl	8004474 <HAL_GPIO_ReadPin>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d103      	bne.n	80026f8 <SET_RELAY_PROGRAM.12+0x534>
 80026f0:	230a      	movs	r3, #10
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2207      	movs	r2, #7
 80026f6:	701a      	strb	r2, [r3, #0]
			  		  	  					  while(menu == 0)                            // ENTER SET
 80026f8:	230a      	movs	r3, #10
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d100      	bne.n	8002704 <SET_RELAY_PROGRAM.12+0x540>
 8002702:	e692      	b.n	800242a <SET_RELAY_PROGRAM.12+0x266>
			  		  	  					  while(ENTER_RST)
 8002704:	e010      	b.n	8002728 <SET_RELAY_PROGRAM.12+0x564>
			  		  	  						  HAL_Delay(10);
 8002706:	200a      	movs	r0, #10
 8002708:	f001 fc6c 	bl	8003fe4 <HAL_Delay>
			  		  	  						  LCD_SEND_TEXT(0, 0, "  Program:");
 800270c:	4b7d      	ldr	r3, [pc, #500]	; (8002904 <SET_RELAY_PROGRAM.12+0x740>)
 800270e:	46a4      	mov	ip, r4
 8002710:	001a      	movs	r2, r3
 8002712:	2100      	movs	r1, #0
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fb97 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(0, 1, "->");
 800271a:	4b7b      	ldr	r3, [pc, #492]	; (8002908 <SET_RELAY_PROGRAM.12+0x744>)
 800271c:	46a4      	mov	ip, r4
 800271e:	001a      	movs	r2, r3
 8002720:	2101      	movs	r1, #1
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe fb90 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(ENTER_RST)
 8002728:	4b75      	ldr	r3, [pc, #468]	; (8002900 <SET_RELAY_PROGRAM.12+0x73c>)
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	0018      	movs	r0, r3
 800272e:	f001 fea1 	bl	8004474 <HAL_GPIO_ReadPin>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d0e7      	beq.n	8002706 <SET_RELAY_PROGRAM.12+0x542>
			  		  	  					  while(menu == 1)
 8002736:	e085      	b.n	8002844 <SET_RELAY_PROGRAM.12+0x680>
			  		  	  						  HAL_Delay(10);
 8002738:	200a      	movs	r0, #10
 800273a:	f001 fc53 	bl	8003fe4 <HAL_Delay>
			  		  	  						  LCD_SEND_TEXT(0, 0, "  Program:");
 800273e:	4b71      	ldr	r3, [pc, #452]	; (8002904 <SET_RELAY_PROGRAM.12+0x740>)
 8002740:	46a4      	mov	ip, r4
 8002742:	001a      	movs	r2, r3
 8002744:	2100      	movs	r1, #0
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fb7e 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(0, 1, "->");
 800274c:	4b6e      	ldr	r3, [pc, #440]	; (8002908 <SET_RELAY_PROGRAM.12+0x744>)
 800274e:	46a4      	mov	ip, r4
 8002750:	001a      	movs	r2, r3
 8002752:	2101      	movs	r1, #1
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe fb77 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  activity_program = program_data[number_program][0];
 800275a:	4b66      	ldr	r3, [pc, #408]	; (80028f4 <SET_RELAY_PROGRAM.12+0x730>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b25b      	sxtb	r3, r3
 8002760:	0019      	movs	r1, r3
 8002762:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <SET_RELAY_PROGRAM.12+0x734>)
 8002764:	000b      	movs	r3, r1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	185b      	adds	r3, r3, r1
 800276a:	5c9a      	ldrb	r2, [r3, r2]
 800276c:	250f      	movs	r5, #15
 800276e:	197b      	adds	r3, r7, r5
 8002770:	701a      	strb	r2, [r3, #0]
			  		  	  						  activity_program = activity_program + ENCODER_ROTATION_DIRECTION();
 8002772:	46a4      	mov	ip, r4
 8002774:	f7fe fcba 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8002778:	0003      	movs	r3, r0
 800277a:	b2da      	uxtb	r2, r3
 800277c:	197b      	adds	r3, r7, r5
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	b2da      	uxtb	r2, r3
 8002784:	197b      	adds	r3, r7, r5
 8002786:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(activity_program < 0) activity_program = 1;
 8002788:	197b      	adds	r3, r7, r5
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b7f      	cmp	r3, #127	; 0x7f
 800278e:	d902      	bls.n	8002796 <SET_RELAY_PROGRAM.12+0x5d2>
 8002790:	197b      	adds	r3, r7, r5
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(activity_program > 1) activity_program = 0;
 8002796:	220f      	movs	r2, #15
 8002798:	18bb      	adds	r3, r7, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b25b      	sxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	dd02      	ble.n	80027a8 <SET_RELAY_PROGRAM.12+0x5e4>
 80027a2:	18bb      	adds	r3, r7, r2
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(activity_program == 0) LCD_SEND_TEXT(12, 1, "Disable");
 80027a8:	230f      	movs	r3, #15
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <SET_RELAY_PROGRAM.12+0x5fe>
 80027b4:	4b55      	ldr	r3, [pc, #340]	; (800290c <SET_RELAY_PROGRAM.12+0x748>)
 80027b6:	46a4      	mov	ip, r4
 80027b8:	001a      	movs	r2, r3
 80027ba:	2101      	movs	r1, #1
 80027bc:	200c      	movs	r0, #12
 80027be:	f7fe fb43 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(activity_program == 1) LCD_SEND_TEXT(12, 1, "Enable ");
 80027c2:	230f      	movs	r3, #15
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d106      	bne.n	80027dc <SET_RELAY_PROGRAM.12+0x618>
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <SET_RELAY_PROGRAM.12+0x74c>)
 80027d0:	46a4      	mov	ip, r4
 80027d2:	001a      	movs	r2, r3
 80027d4:	2101      	movs	r1, #1
 80027d6:	200c      	movs	r0, #12
 80027d8:	f7fe fb36 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  program_data[number_program][0] = activity_program;
 80027dc:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <SET_RELAY_PROGRAM.12+0x730>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	0019      	movs	r1, r3
 80027e4:	230f      	movs	r3, #15
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	7818      	ldrb	r0, [r3, #0]
 80027ea:	4a43      	ldr	r2, [pc, #268]	; (80028f8 <SET_RELAY_PROGRAM.12+0x734>)
 80027ec:	000b      	movs	r3, r1
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	185b      	adds	r3, r3, r1
 80027f2:	1c01      	adds	r1, r0, #0
 80027f4:	5499      	strb	r1, [r3, r2]
			  		  	  						  if(ENTER_RST){HAL_Delay(100); menu = 2;}
 80027f6:	4b42      	ldr	r3, [pc, #264]	; (8002900 <SET_RELAY_PROGRAM.12+0x73c>)
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	0018      	movs	r0, r3
 80027fc:	f001 fe3a 	bl	8004474 <HAL_GPIO_ReadPin>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d106      	bne.n	8002812 <SET_RELAY_PROGRAM.12+0x64e>
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	f001 fbed 	bl	8003fe4 <HAL_Delay>
 800280a:	230a      	movs	r3, #10
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2202      	movs	r2, #2
 8002810:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ESCAPE_RST){menu = 0; LCD_SEND_TEXT(0, 1, "  "); LCD_SEND_TEXT(0, 0, "->");}
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <SET_RELAY_PROGRAM.12+0x73c>)
 8002814:	2140      	movs	r1, #64	; 0x40
 8002816:	0018      	movs	r0, r3
 8002818:	f001 fe2c 	bl	8004474 <HAL_GPIO_ReadPin>
 800281c:	1e03      	subs	r3, r0, #0
 800281e:	d111      	bne.n	8002844 <SET_RELAY_PROGRAM.12+0x680>
 8002820:	230a      	movs	r3, #10
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <SET_RELAY_PROGRAM.12+0x750>)
 800282a:	46a4      	mov	ip, r4
 800282c:	001a      	movs	r2, r3
 800282e:	2101      	movs	r1, #1
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe fb09 	bl	8000e48 <LCD_SEND_TEXT.9>
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <SET_RELAY_PROGRAM.12+0x744>)
 8002838:	46a4      	mov	ip, r4
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe fb02 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(menu == 1)
 8002844:	230a      	movs	r3, #10
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d100      	bne.n	8002850 <SET_RELAY_PROGRAM.12+0x68c>
 800284e:	e773      	b.n	8002738 <SET_RELAY_PROGRAM.12+0x574>
			  		  	  					  while(ENTER_RST)
 8002850:	e023      	b.n	800289a <SET_RELAY_PROGRAM.12+0x6d6>
			  		  	  						  HAL_Delay(10);
 8002852:	200a      	movs	r0, #10
 8002854:	f001 fbc6 	bl	8003fe4 <HAL_Delay>
			  		  	  						  if(program_data[number_program][0] == 0) LCD_SEND_TEXT(0, 1, "  Disable");
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <SET_RELAY_PROGRAM.12+0x730>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b25b      	sxtb	r3, r3
 800285e:	0019      	movs	r1, r3
 8002860:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <SET_RELAY_PROGRAM.12+0x734>)
 8002862:	000b      	movs	r3, r1
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	185b      	adds	r3, r3, r1
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d107      	bne.n	800287e <SET_RELAY_PROGRAM.12+0x6ba>
 800286e:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <SET_RELAY_PROGRAM.12+0x754>)
 8002870:	46a4      	mov	ip, r4
 8002872:	001a      	movs	r2, r3
 8002874:	2101      	movs	r1, #1
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fae6 	bl	8000e48 <LCD_SEND_TEXT.9>
 800287c:	e006      	b.n	800288c <SET_RELAY_PROGRAM.12+0x6c8>
			  		  	  						  else {LCD_SEND_TEXT(0, 1, "  Enable ");};
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <SET_RELAY_PROGRAM.12+0x758>)
 8002880:	46a4      	mov	ip, r4
 8002882:	001a      	movs	r2, r3
 8002884:	2101      	movs	r1, #1
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe fade 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(0, 2, "->");
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <SET_RELAY_PROGRAM.12+0x744>)
 800288e:	46a4      	mov	ip, r4
 8002890:	001a      	movs	r2, r3
 8002892:	2102      	movs	r1, #2
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fad7 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(ENTER_RST)
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <SET_RELAY_PROGRAM.12+0x73c>)
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	0018      	movs	r0, r3
 80028a0:	f001 fde8 	bl	8004474 <HAL_GPIO_ReadPin>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d0d4      	beq.n	8002852 <SET_RELAY_PROGRAM.12+0x68e>
			  		  	  					  while(menu == 2)
 80028a8:	e0c1      	b.n	8002a2e <SET_RELAY_PROGRAM.12+0x86a>
			  		  	  						  HAL_Delay(10);
 80028aa:	200a      	movs	r0, #10
 80028ac:	f001 fb9a 	bl	8003fe4 <HAL_Delay>
			  		  	  						  if(program_data[number_program][0] == 0) LCD_SEND_TEXT(0, 1, "  Disable");
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <SET_RELAY_PROGRAM.12+0x730>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	0019      	movs	r1, r3
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <SET_RELAY_PROGRAM.12+0x734>)
 80028ba:	000b      	movs	r3, r1
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	185b      	adds	r3, r3, r1
 80028c0:	5c9b      	ldrb	r3, [r3, r2]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d12c      	bne.n	8002920 <SET_RELAY_PROGRAM.12+0x75c>
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <SET_RELAY_PROGRAM.12+0x754>)
 80028c8:	46a4      	mov	ip, r4
 80028ca:	001a      	movs	r2, r3
 80028cc:	2101      	movs	r1, #1
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe faba 	bl	8000e48 <LCD_SEND_TEXT.9>
 80028d4:	e02b      	b.n	800292e <SET_RELAY_PROGRAM.12+0x76a>
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	08006e64 	.word	0x08006e64
 80028dc:	08006e70 	.word	0x08006e70
 80028e0:	08006e7c 	.word	0x08006e7c
 80028e4:	08006e88 	.word	0x08006e88
 80028e8:	08006e94 	.word	0x08006e94
 80028ec:	08006ea0 	.word	0x08006ea0
 80028f0:	08006eac 	.word	0x08006eac
 80028f4:	200003c8 	.word	0x200003c8
 80028f8:	20000234 	.word	0x20000234
 80028fc:	08006f18 	.word	0x08006f18
 8002900:	48001400 	.word	0x48001400
 8002904:	08006f1c 	.word	0x08006f1c
 8002908:	08006f28 	.word	0x08006f28
 800290c:	08006ef4 	.word	0x08006ef4
 8002910:	08006efc 	.word	0x08006efc
 8002914:	08006f44 	.word	0x08006f44
 8002918:	08006f48 	.word	0x08006f48
 800291c:	08006f54 	.word	0x08006f54
			  		  	  						  else {LCD_SEND_TEXT(0, 1, "  Enable ");};
 8002920:	4be0      	ldr	r3, [pc, #896]	; (8002ca4 <SET_RELAY_PROGRAM.12+0xae0>)
 8002922:	46a4      	mov	ip, r4
 8002924:	001a      	movs	r2, r3
 8002926:	2101      	movs	r1, #1
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe fa8d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(0, 2, "->");
 800292e:	4bde      	ldr	r3, [pc, #888]	; (8002ca8 <SET_RELAY_PROGRAM.12+0xae4>)
 8002930:	46a4      	mov	ip, r4
 8002932:	001a      	movs	r2, r3
 8002934:	2102      	movs	r1, #2
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe fa86 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  relay = program_data[number_program][1];
 800293c:	4bdb      	ldr	r3, [pc, #876]	; (8002cac <SET_RELAY_PROGRAM.12+0xae8>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b25b      	sxtb	r3, r3
 8002942:	0019      	movs	r1, r3
 8002944:	4ada      	ldr	r2, [pc, #872]	; (8002cb0 <SET_RELAY_PROGRAM.12+0xaec>)
 8002946:	000b      	movs	r3, r1
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	185b      	adds	r3, r3, r1
 800294c:	18d3      	adds	r3, r2, r3
 800294e:	3301      	adds	r3, #1
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	250e      	movs	r5, #14
 8002954:	197b      	adds	r3, r7, r5
 8002956:	701a      	strb	r2, [r3, #0]
			  		  	  						  relay = relay + ENCODER_ROTATION_DIRECTION();
 8002958:	46a4      	mov	ip, r4
 800295a:	f7fe fbc7 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 800295e:	0003      	movs	r3, r0
 8002960:	b2da      	uxtb	r2, r3
 8002962:	197b      	adds	r3, r7, r5
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	18d3      	adds	r3, r2, r3
 8002968:	b2da      	uxtb	r2, r3
 800296a:	197b      	adds	r3, r7, r5
 800296c:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(relay < 0) relay = 1;
 800296e:	197b      	adds	r3, r7, r5
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b7f      	cmp	r3, #127	; 0x7f
 8002974:	d902      	bls.n	800297c <SET_RELAY_PROGRAM.12+0x7b8>
 8002976:	197b      	adds	r3, r7, r5
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(relay > 1) relay = 0;
 800297c:	220e      	movs	r2, #14
 800297e:	18bb      	adds	r3, r7, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b25b      	sxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	dd02      	ble.n	800298e <SET_RELAY_PROGRAM.12+0x7ca>
 8002988:	18bb      	adds	r3, r7, r2
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(relay == 0) LCD_SEND_TEXT(12, 2, "Relay: OFF");
 800298e:	230e      	movs	r3, #14
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <SET_RELAY_PROGRAM.12+0x7e4>
 800299a:	4bc6      	ldr	r3, [pc, #792]	; (8002cb4 <SET_RELAY_PROGRAM.12+0xaf0>)
 800299c:	46a4      	mov	ip, r4
 800299e:	001a      	movs	r2, r3
 80029a0:	2102      	movs	r1, #2
 80029a2:	200c      	movs	r0, #12
 80029a4:	f7fe fa50 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  if(relay == 1) LCD_SEND_TEXT(12, 2, "Relay: ON ");
 80029a8:	230e      	movs	r3, #14
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b25b      	sxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d106      	bne.n	80029c2 <SET_RELAY_PROGRAM.12+0x7fe>
 80029b4:	4bc0      	ldr	r3, [pc, #768]	; (8002cb8 <SET_RELAY_PROGRAM.12+0xaf4>)
 80029b6:	46a4      	mov	ip, r4
 80029b8:	001a      	movs	r2, r3
 80029ba:	2102      	movs	r1, #2
 80029bc:	200c      	movs	r0, #12
 80029be:	f7fe fa43 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  program_data[number_program][1] = relay;
 80029c2:	4bba      	ldr	r3, [pc, #744]	; (8002cac <SET_RELAY_PROGRAM.12+0xae8>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	0019      	movs	r1, r3
 80029ca:	230e      	movs	r3, #14
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	7818      	ldrb	r0, [r3, #0]
 80029d0:	4ab7      	ldr	r2, [pc, #732]	; (8002cb0 <SET_RELAY_PROGRAM.12+0xaec>)
 80029d2:	000b      	movs	r3, r1
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	185b      	adds	r3, r3, r1
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	1c02      	adds	r2, r0, #0
 80029de:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ENTER_RST) {HAL_Delay(100); menu = 3;}
 80029e0:	4bb6      	ldr	r3, [pc, #728]	; (8002cbc <SET_RELAY_PROGRAM.12+0xaf8>)
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	0018      	movs	r0, r3
 80029e6:	f001 fd45 	bl	8004474 <HAL_GPIO_ReadPin>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d106      	bne.n	80029fc <SET_RELAY_PROGRAM.12+0x838>
 80029ee:	2064      	movs	r0, #100	; 0x64
 80029f0:	f001 faf8 	bl	8003fe4 <HAL_Delay>
 80029f4:	230a      	movs	r3, #10
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2203      	movs	r2, #3
 80029fa:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ESCAPE_RST) {menu = 1; LCD_SEND_TEXT(0, 2, "  "); LCD_SEND_TEXT(0, 1, "->");}
 80029fc:	4baf      	ldr	r3, [pc, #700]	; (8002cbc <SET_RELAY_PROGRAM.12+0xaf8>)
 80029fe:	2140      	movs	r1, #64	; 0x40
 8002a00:	0018      	movs	r0, r3
 8002a02:	f001 fd37 	bl	8004474 <HAL_GPIO_ReadPin>
 8002a06:	1e03      	subs	r3, r0, #0
 8002a08:	d111      	bne.n	8002a2e <SET_RELAY_PROGRAM.12+0x86a>
 8002a0a:	230a      	movs	r3, #10
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	4bab      	ldr	r3, [pc, #684]	; (8002cc0 <SET_RELAY_PROGRAM.12+0xafc>)
 8002a14:	46a4      	mov	ip, r4
 8002a16:	001a      	movs	r2, r3
 8002a18:	2102      	movs	r1, #2
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fe fa14 	bl	8000e48 <LCD_SEND_TEXT.9>
 8002a20:	4ba1      	ldr	r3, [pc, #644]	; (8002ca8 <SET_RELAY_PROGRAM.12+0xae4>)
 8002a22:	46a4      	mov	ip, r4
 8002a24:	001a      	movs	r2, r3
 8002a26:	2101      	movs	r1, #1
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fa0d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(menu == 2)
 8002a2e:	230a      	movs	r3, #10
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d100      	bne.n	8002a3a <SET_RELAY_PROGRAM.12+0x876>
 8002a38:	e737      	b.n	80028aa <SET_RELAY_PROGRAM.12+0x6e6>
			  		  	  					  while(ENTER_RST)
 8002a3a:	e025      	b.n	8002a88 <SET_RELAY_PROGRAM.12+0x8c4>
			  		  	  						  HAL_Delay(10);
 8002a3c:	200a      	movs	r0, #10
 8002a3e:	f001 fad1 	bl	8003fe4 <HAL_Delay>
			  		  	  						  if(program_data[number_program][1] == 0) LCD_SEND_TEXT(0, 2, "  Relay: OFF");
 8002a42:	4b9a      	ldr	r3, [pc, #616]	; (8002cac <SET_RELAY_PROGRAM.12+0xae8>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	0019      	movs	r1, r3
 8002a4a:	4a99      	ldr	r2, [pc, #612]	; (8002cb0 <SET_RELAY_PROGRAM.12+0xaec>)
 8002a4c:	000b      	movs	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	185b      	adds	r3, r3, r1
 8002a52:	18d3      	adds	r3, r2, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <SET_RELAY_PROGRAM.12+0x8a8>
 8002a5c:	4b99      	ldr	r3, [pc, #612]	; (8002cc4 <SET_RELAY_PROGRAM.12+0xb00>)
 8002a5e:	46a4      	mov	ip, r4
 8002a60:	001a      	movs	r2, r3
 8002a62:	2102      	movs	r1, #2
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe f9ef 	bl	8000e48 <LCD_SEND_TEXT.9>
 8002a6a:	e006      	b.n	8002a7a <SET_RELAY_PROGRAM.12+0x8b6>
			  		  	  						  else {LCD_SEND_TEXT(0, 2, "  Relay: ON ");};
 8002a6c:	4b96      	ldr	r3, [pc, #600]	; (8002cc8 <SET_RELAY_PROGRAM.12+0xb04>)
 8002a6e:	46a4      	mov	ip, r4
 8002a70:	001a      	movs	r2, r3
 8002a72:	2102      	movs	r1, #2
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fe f9e7 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(0, 4, "->");
 8002a7a:	4b8b      	ldr	r3, [pc, #556]	; (8002ca8 <SET_RELAY_PROGRAM.12+0xae4>)
 8002a7c:	46a4      	mov	ip, r4
 8002a7e:	001a      	movs	r2, r3
 8002a80:	2104      	movs	r1, #4
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe f9e0 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(ENTER_RST)
 8002a88:	4b8c      	ldr	r3, [pc, #560]	; (8002cbc <SET_RELAY_PROGRAM.12+0xaf8>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f001 fcf1 	bl	8004474 <HAL_GPIO_ReadPin>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d0d2      	beq.n	8002a3c <SET_RELAY_PROGRAM.12+0x878>
			  		  	  					  while(menu == 3)
 8002a96:	e0c8      	b.n	8002c2a <SET_RELAY_PROGRAM.12+0xa66>
			  		  	  						  HAL_Delay(10);
 8002a98:	200a      	movs	r0, #10
 8002a9a:	f001 faa3 	bl	8003fe4 <HAL_Delay>
			  		  	  						  if(program_data[number_program][1] == 0) LCD_SEND_TEXT(0, 2, "  Relay: OFF");
 8002a9e:	4b83      	ldr	r3, [pc, #524]	; (8002cac <SET_RELAY_PROGRAM.12+0xae8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	4a82      	ldr	r2, [pc, #520]	; (8002cb0 <SET_RELAY_PROGRAM.12+0xaec>)
 8002aa8:	000b      	movs	r3, r1
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	185b      	adds	r3, r3, r1
 8002aae:	18d3      	adds	r3, r2, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <SET_RELAY_PROGRAM.12+0x904>
 8002ab8:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <SET_RELAY_PROGRAM.12+0xb00>)
 8002aba:	46a4      	mov	ip, r4
 8002abc:	001a      	movs	r2, r3
 8002abe:	2102      	movs	r1, #2
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fe f9c1 	bl	8000e48 <LCD_SEND_TEXT.9>
 8002ac6:	e006      	b.n	8002ad6 <SET_RELAY_PROGRAM.12+0x912>
			  		  	  						  else {LCD_SEND_TEXT(0, 2, "  Relay: ON ");};
 8002ac8:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <SET_RELAY_PROGRAM.12+0xb04>)
 8002aca:	46a4      	mov	ip, r4
 8002acc:	001a      	movs	r2, r3
 8002ace:	2102      	movs	r1, #2
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7fe f9b9 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(0, 4, "->");
 8002ad6:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <SET_RELAY_PROGRAM.12+0xae4>)
 8002ad8:	46a4      	mov	ip, r4
 8002ada:	001a      	movs	r2, r3
 8002adc:	2104      	movs	r1, #4
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fe f9b2 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  day_of_week = program_data[number_program][2];
 8002ae4:	4b71      	ldr	r3, [pc, #452]	; (8002cac <SET_RELAY_PROGRAM.12+0xae8>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	0019      	movs	r1, r3
 8002aec:	4a70      	ldr	r2, [pc, #448]	; (8002cb0 <SET_RELAY_PROGRAM.12+0xaec>)
 8002aee:	000b      	movs	r3, r1
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	185b      	adds	r3, r3, r1
 8002af4:	18d3      	adds	r3, r2, r3
 8002af6:	3302      	adds	r3, #2
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	250d      	movs	r5, #13
 8002afc:	197b      	adds	r3, r7, r5
 8002afe:	701a      	strb	r2, [r3, #0]
			  		  	  						  day_of_week = day_of_week + ENCODER_ROTATION_DIRECTION();
 8002b00:	46a4      	mov	ip, r4
 8002b02:	f7fe faf3 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8002b06:	0003      	movs	r3, r0
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	18d3      	adds	r3, r2, r3
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	197b      	adds	r3, r7, r5
 8002b14:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(day_of_week < 1) day_of_week = 7;
 8002b16:	197b      	adds	r3, r7, r5
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	dc02      	bgt.n	8002b26 <SET_RELAY_PROGRAM.12+0x962>
 8002b20:	197b      	adds	r3, r7, r5
 8002b22:	2207      	movs	r2, #7
 8002b24:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(day_of_week > 7) day_of_week = 1;
 8002b26:	220d      	movs	r2, #13
 8002b28:	18bb      	adds	r3, r7, r2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	2b07      	cmp	r3, #7
 8002b30:	dd02      	ble.n	8002b38 <SET_RELAY_PROGRAM.12+0x974>
 8002b32:	18bb      	adds	r3, r7, r2
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
			  		  	  						  switch (day_of_week)                                                                 //  day of week
 8002b38:	230d      	movs	r3, #13
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	2b07      	cmp	r3, #7
 8002b42:	d83c      	bhi.n	8002bbe <SET_RELAY_PROGRAM.12+0x9fa>
 8002b44:	009a      	lsls	r2, r3, #2
 8002b46:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <SET_RELAY_PROGRAM.12+0xb08>)
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	469f      	mov	pc, r3
			  		  	  						  case 1: LCD_SEND_TEXT(12, 4, "Monday   ");
 8002b4e:	4b60      	ldr	r3, [pc, #384]	; (8002cd0 <SET_RELAY_PROGRAM.12+0xb0c>)
 8002b50:	46a4      	mov	ip, r4
 8002b52:	001a      	movs	r2, r3
 8002b54:	2104      	movs	r1, #4
 8002b56:	200c      	movs	r0, #12
 8002b58:	f7fe f976 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002b5c:	e02f      	b.n	8002bbe <SET_RELAY_PROGRAM.12+0x9fa>
			  		  	  						  case 2: LCD_SEND_TEXT(12, 4, "Tuesday  ");
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <SET_RELAY_PROGRAM.12+0xb10>)
 8002b60:	46a4      	mov	ip, r4
 8002b62:	001a      	movs	r2, r3
 8002b64:	2104      	movs	r1, #4
 8002b66:	200c      	movs	r0, #12
 8002b68:	f7fe f96e 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002b6c:	e027      	b.n	8002bbe <SET_RELAY_PROGRAM.12+0x9fa>
			  		  	  						  case 3: LCD_SEND_TEXT(12, 4, "Wednesday");
 8002b6e:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <SET_RELAY_PROGRAM.12+0xb14>)
 8002b70:	46a4      	mov	ip, r4
 8002b72:	001a      	movs	r2, r3
 8002b74:	2104      	movs	r1, #4
 8002b76:	200c      	movs	r0, #12
 8002b78:	f7fe f966 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002b7c:	e01f      	b.n	8002bbe <SET_RELAY_PROGRAM.12+0x9fa>
			  		  	  						  case 4: LCD_SEND_TEXT(12, 4, "Thursday ");
 8002b7e:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <SET_RELAY_PROGRAM.12+0xb18>)
 8002b80:	46a4      	mov	ip, r4
 8002b82:	001a      	movs	r2, r3
 8002b84:	2104      	movs	r1, #4
 8002b86:	200c      	movs	r0, #12
 8002b88:	f7fe f95e 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002b8c:	e017      	b.n	8002bbe <SET_RELAY_PROGRAM.12+0x9fa>
			  		  	  						  case 5: LCD_SEND_TEXT(12, 4, "Friday   ");
 8002b8e:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <SET_RELAY_PROGRAM.12+0xb1c>)
 8002b90:	46a4      	mov	ip, r4
 8002b92:	001a      	movs	r2, r3
 8002b94:	2104      	movs	r1, #4
 8002b96:	200c      	movs	r0, #12
 8002b98:	f7fe f956 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002b9c:	e00f      	b.n	8002bbe <SET_RELAY_PROGRAM.12+0x9fa>
			  		  	  						  case 6: LCD_SEND_TEXT(12, 4, "Saturday ");
 8002b9e:	4b51      	ldr	r3, [pc, #324]	; (8002ce4 <SET_RELAY_PROGRAM.12+0xb20>)
 8002ba0:	46a4      	mov	ip, r4
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	200c      	movs	r0, #12
 8002ba8:	f7fe f94e 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002bac:	e007      	b.n	8002bbe <SET_RELAY_PROGRAM.12+0x9fa>
			  		  	  						  case 7: LCD_SEND_TEXT(12, 4, "Sunday   ");
 8002bae:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <SET_RELAY_PROGRAM.12+0xb24>)
 8002bb0:	46a4      	mov	ip, r4
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	200c      	movs	r0, #12
 8002bb8:	f7fe f946 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002bbc:	46c0      	nop			; (mov r8, r8)
			  		  	  						  program_data[number_program][2] = day_of_week;
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <SET_RELAY_PROGRAM.12+0xae8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	230d      	movs	r3, #13
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	7818      	ldrb	r0, [r3, #0]
 8002bcc:	4a38      	ldr	r2, [pc, #224]	; (8002cb0 <SET_RELAY_PROGRAM.12+0xaec>)
 8002bce:	000b      	movs	r3, r1
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	185b      	adds	r3, r3, r1
 8002bd4:	18d3      	adds	r3, r2, r3
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	1c02      	adds	r2, r0, #0
 8002bda:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ENTER_RST) {HAL_Delay(100); menu = 4;}
 8002bdc:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <SET_RELAY_PROGRAM.12+0xaf8>)
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	0018      	movs	r0, r3
 8002be2:	f001 fc47 	bl	8004474 <HAL_GPIO_ReadPin>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d106      	bne.n	8002bf8 <SET_RELAY_PROGRAM.12+0xa34>
 8002bea:	2064      	movs	r0, #100	; 0x64
 8002bec:	f001 f9fa 	bl	8003fe4 <HAL_Delay>
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ESCAPE_RST) {menu = 2; LCD_SEND_TEXT(0, 4, "  "); LCD_SEND_TEXT(0, 2, "->");}
 8002bf8:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <SET_RELAY_PROGRAM.12+0xaf8>)
 8002bfa:	2140      	movs	r1, #64	; 0x40
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f001 fc39 	bl	8004474 <HAL_GPIO_ReadPin>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d111      	bne.n	8002c2a <SET_RELAY_PROGRAM.12+0xa66>
 8002c06:	230a      	movs	r3, #10
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <SET_RELAY_PROGRAM.12+0xafc>)
 8002c10:	46a4      	mov	ip, r4
 8002c12:	001a      	movs	r2, r3
 8002c14:	2104      	movs	r1, #4
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fe f916 	bl	8000e48 <LCD_SEND_TEXT.9>
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <SET_RELAY_PROGRAM.12+0xae4>)
 8002c1e:	46a4      	mov	ip, r4
 8002c20:	001a      	movs	r2, r3
 8002c22:	2102      	movs	r1, #2
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fe f90f 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(menu == 3)
 8002c2a:	230a      	movs	r3, #10
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d100      	bne.n	8002c36 <SET_RELAY_PROGRAM.12+0xa72>
 8002c34:	e730      	b.n	8002a98 <SET_RELAY_PROGRAM.12+0x8d4>
			  		  	  					  while(ENTER_RST)
 8002c36:	e07c      	b.n	8002d32 <SET_RELAY_PROGRAM.12+0xb6e>
			  		  	  						  HAL_Delay(10);
 8002c38:	200a      	movs	r0, #10
 8002c3a:	f001 f9d3 	bl	8003fe4 <HAL_Delay>
			  		  	  						  switch (day_of_week)                                                                 //  day of week
 8002c3e:	230d      	movs	r3, #13
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	d86c      	bhi.n	8002d24 <SET_RELAY_PROGRAM.12+0xb60>
 8002c4a:	009a      	lsls	r2, r3, #2
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <SET_RELAY_PROGRAM.12+0xb28>)
 8002c4e:	18d3      	adds	r3, r2, r3
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	469f      	mov	pc, r3
			  		  	  						  case 1: LCD_SEND_TEXT(0, 4, "  Monday   ");
 8002c54:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <SET_RELAY_PROGRAM.12+0xb2c>)
 8002c56:	46a4      	mov	ip, r4
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7fe f8f3 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002c62:	e05f      	b.n	8002d24 <SET_RELAY_PROGRAM.12+0xb60>
			  		  	  						  case 2: LCD_SEND_TEXT(0, 4, "  Tuesday  ");
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <SET_RELAY_PROGRAM.12+0xb30>)
 8002c66:	46a4      	mov	ip, r4
 8002c68:	001a      	movs	r2, r3
 8002c6a:	2104      	movs	r1, #4
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fe f8eb 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002c72:	e057      	b.n	8002d24 <SET_RELAY_PROGRAM.12+0xb60>
			  		  	  						  case 3: LCD_SEND_TEXT(0, 4, "  Wednesday");
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <SET_RELAY_PROGRAM.12+0xb34>)
 8002c76:	46a4      	mov	ip, r4
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fe f8e3 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002c82:	e04f      	b.n	8002d24 <SET_RELAY_PROGRAM.12+0xb60>
			  		  	  						  case 4: LCD_SEND_TEXT(0, 4, "  Thursday ");
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <SET_RELAY_PROGRAM.12+0xb38>)
 8002c86:	46a4      	mov	ip, r4
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2104      	movs	r1, #4
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7fe f8db 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002c92:	e047      	b.n	8002d24 <SET_RELAY_PROGRAM.12+0xb60>
			  		  	  						  case 5: LCD_SEND_TEXT(0, 4, "  Friday   ");
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <SET_RELAY_PROGRAM.12+0xb3c>)
 8002c96:	46a4      	mov	ip, r4
 8002c98:	001a      	movs	r2, r3
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fe f8d3 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002ca2:	e03f      	b.n	8002d24 <SET_RELAY_PROGRAM.12+0xb60>
 8002ca4:	08006f54 	.word	0x08006f54
 8002ca8:	08006f28 	.word	0x08006f28
 8002cac:	200003c8 	.word	0x200003c8
 8002cb0:	20000234 	.word	0x20000234
 8002cb4:	08006f2c 	.word	0x08006f2c
 8002cb8:	08006f38 	.word	0x08006f38
 8002cbc:	48001400 	.word	0x48001400
 8002cc0:	08006f44 	.word	0x08006f44
 8002cc4:	08006f60 	.word	0x08006f60
 8002cc8:	08006f70 	.word	0x08006f70
 8002ccc:	08007338 	.word	0x08007338
 8002cd0:	08006e64 	.word	0x08006e64
 8002cd4:	08006e70 	.word	0x08006e70
 8002cd8:	08006e7c 	.word	0x08006e7c
 8002cdc:	08006e88 	.word	0x08006e88
 8002ce0:	08006e94 	.word	0x08006e94
 8002ce4:	08006ea0 	.word	0x08006ea0
 8002ce8:	08006eac 	.word	0x08006eac
 8002cec:	08007358 	.word	0x08007358
 8002cf0:	08006f80 	.word	0x08006f80
 8002cf4:	08006f8c 	.word	0x08006f8c
 8002cf8:	08006f98 	.word	0x08006f98
 8002cfc:	08006fa4 	.word	0x08006fa4
 8002d00:	08006fb0 	.word	0x08006fb0
			  		  	  						  case 6: LCD_SEND_TEXT(0, 4, "  Saturday ");
 8002d04:	4bc3      	ldr	r3, [pc, #780]	; (8003014 <SET_RELAY_PROGRAM.12+0xe50>)
 8002d06:	46a4      	mov	ip, r4
 8002d08:	001a      	movs	r2, r3
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fe f89b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002d12:	e007      	b.n	8002d24 <SET_RELAY_PROGRAM.12+0xb60>
			  		  	  						  case 7: LCD_SEND_TEXT(0, 4, "  Sunday   ");
 8002d14:	4bc0      	ldr	r3, [pc, #768]	; (8003018 <SET_RELAY_PROGRAM.12+0xe54>)
 8002d16:	46a4      	mov	ip, r4
 8002d18:	001a      	movs	r2, r3
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fe f893 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002d22:	46c0      	nop			; (mov r8, r8)
			  		  	  						  LCD_SEND_TEXT(0, 5, "->");
 8002d24:	4bbd      	ldr	r3, [pc, #756]	; (800301c <SET_RELAY_PROGRAM.12+0xe58>)
 8002d26:	46a4      	mov	ip, r4
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2105      	movs	r1, #5
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe f88b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(ENTER_RST)
 8002d32:	4bbb      	ldr	r3, [pc, #748]	; (8003020 <SET_RELAY_PROGRAM.12+0xe5c>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	0018      	movs	r0, r3
 8002d38:	f001 fb9c 	bl	8004474 <HAL_GPIO_ReadPin>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d100      	bne.n	8002d42 <SET_RELAY_PROGRAM.12+0xb7e>
 8002d40:	e77a      	b.n	8002c38 <SET_RELAY_PROGRAM.12+0xa74>
			  		  	  					  while(menu == 4)
 8002d42:	e0bc      	b.n	8002ebe <SET_RELAY_PROGRAM.12+0xcfa>
			  		  	  						  HAL_Delay(10);
 8002d44:	200a      	movs	r0, #10
 8002d46:	f001 f94d 	bl	8003fe4 <HAL_Delay>
			  		  	  						  switch (day_of_week)                                                                 //  day of week
 8002d4a:	230d      	movs	r3, #13
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	2b07      	cmp	r3, #7
 8002d54:	d83c      	bhi.n	8002dd0 <SET_RELAY_PROGRAM.12+0xc0c>
 8002d56:	009a      	lsls	r2, r3, #2
 8002d58:	4bb2      	ldr	r3, [pc, #712]	; (8003024 <SET_RELAY_PROGRAM.12+0xe60>)
 8002d5a:	18d3      	adds	r3, r2, r3
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	469f      	mov	pc, r3
			  		  	  						  case 1: LCD_SEND_TEXT(0, 4, "  Monday   ");
 8002d60:	4bb1      	ldr	r3, [pc, #708]	; (8003028 <SET_RELAY_PROGRAM.12+0xe64>)
 8002d62:	46a4      	mov	ip, r4
 8002d64:	001a      	movs	r2, r3
 8002d66:	2104      	movs	r1, #4
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe f86d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002d6e:	e02f      	b.n	8002dd0 <SET_RELAY_PROGRAM.12+0xc0c>
			  		  	  						  case 2: LCD_SEND_TEXT(0, 4, "  Tuesday  ");
 8002d70:	4bae      	ldr	r3, [pc, #696]	; (800302c <SET_RELAY_PROGRAM.12+0xe68>)
 8002d72:	46a4      	mov	ip, r4
 8002d74:	001a      	movs	r2, r3
 8002d76:	2104      	movs	r1, #4
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fe f865 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002d7e:	e027      	b.n	8002dd0 <SET_RELAY_PROGRAM.12+0xc0c>
			  		  	  						  case 3: LCD_SEND_TEXT(0, 4, "  Wednesday");
 8002d80:	4bab      	ldr	r3, [pc, #684]	; (8003030 <SET_RELAY_PROGRAM.12+0xe6c>)
 8002d82:	46a4      	mov	ip, r4
 8002d84:	001a      	movs	r2, r3
 8002d86:	2104      	movs	r1, #4
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fe f85d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002d8e:	e01f      	b.n	8002dd0 <SET_RELAY_PROGRAM.12+0xc0c>
			  		  	  						  case 4: LCD_SEND_TEXT(0, 4, "  Thursday ");
 8002d90:	4ba8      	ldr	r3, [pc, #672]	; (8003034 <SET_RELAY_PROGRAM.12+0xe70>)
 8002d92:	46a4      	mov	ip, r4
 8002d94:	001a      	movs	r2, r3
 8002d96:	2104      	movs	r1, #4
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fe f855 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002d9e:	e017      	b.n	8002dd0 <SET_RELAY_PROGRAM.12+0xc0c>
			  		  	  						  case 5: LCD_SEND_TEXT(0, 4, "  Friday   ");
 8002da0:	4ba5      	ldr	r3, [pc, #660]	; (8003038 <SET_RELAY_PROGRAM.12+0xe74>)
 8002da2:	46a4      	mov	ip, r4
 8002da4:	001a      	movs	r2, r3
 8002da6:	2104      	movs	r1, #4
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fe f84d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002dae:	e00f      	b.n	8002dd0 <SET_RELAY_PROGRAM.12+0xc0c>
			  		  	  						  case 6: LCD_SEND_TEXT(0, 4, "  Saturday ");
 8002db0:	4b98      	ldr	r3, [pc, #608]	; (8003014 <SET_RELAY_PROGRAM.12+0xe50>)
 8002db2:	46a4      	mov	ip, r4
 8002db4:	001a      	movs	r2, r3
 8002db6:	2104      	movs	r1, #4
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fe f845 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002dbe:	e007      	b.n	8002dd0 <SET_RELAY_PROGRAM.12+0xc0c>
			  		  	  						  case 7: LCD_SEND_TEXT(0, 4, "  Sunday   ");
 8002dc0:	4b95      	ldr	r3, [pc, #596]	; (8003018 <SET_RELAY_PROGRAM.12+0xe54>)
 8002dc2:	46a4      	mov	ip, r4
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fe f83d 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  break;
 8002dce:	46c0      	nop			; (mov r8, r8)
			  		  	  						  LCD_SEND_TEXT(0, 5, "->");
 8002dd0:	4b92      	ldr	r3, [pc, #584]	; (800301c <SET_RELAY_PROGRAM.12+0xe58>)
 8002dd2:	46a4      	mov	ip, r4
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	2105      	movs	r1, #5
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fe f835 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  hour = program_data[number_program][3];
 8002dde:	4b97      	ldr	r3, [pc, #604]	; (800303c <SET_RELAY_PROGRAM.12+0xe78>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	0019      	movs	r1, r3
 8002de6:	4a96      	ldr	r2, [pc, #600]	; (8003040 <SET_RELAY_PROGRAM.12+0xe7c>)
 8002de8:	000b      	movs	r3, r1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	185b      	adds	r3, r3, r1
 8002dee:	18d3      	adds	r3, r2, r3
 8002df0:	3303      	adds	r3, #3
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	250c      	movs	r5, #12
 8002df6:	197b      	adds	r3, r7, r5
 8002df8:	701a      	strb	r2, [r3, #0]
			  		  	  						  hour = hour + ENCODER_ROTATION_DIRECTION();
 8002dfa:	46a4      	mov	ip, r4
 8002dfc:	f7fe f976 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8002e00:	0003      	movs	r3, r0
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	197b      	adds	r3, r7, r5
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	18d3      	adds	r3, r2, r3
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	197b      	adds	r3, r7, r5
 8002e0e:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(hour < 0) hour = 23;                            // min value
 8002e10:	197b      	adds	r3, r7, r5
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b7f      	cmp	r3, #127	; 0x7f
 8002e16:	d902      	bls.n	8002e1e <SET_RELAY_PROGRAM.12+0xc5a>
 8002e18:	197b      	adds	r3, r7, r5
 8002e1a:	2217      	movs	r2, #23
 8002e1c:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(hour > 23) hour = 0;            // max value
 8002e1e:	220c      	movs	r2, #12
 8002e20:	18bb      	adds	r3, r7, r2
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b25b      	sxtb	r3, r3
 8002e26:	2b17      	cmp	r3, #23
 8002e28:	dd02      	ble.n	8002e30 <SET_RELAY_PROGRAM.12+0xc6c>
 8002e2a:	18bb      	adds	r3, r7, r2
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
			  		  	  						  LCD_SEND_DIGIT(12, 5, program_data[number_program][3]);                             // hour
 8002e30:	4b82      	ldr	r3, [pc, #520]	; (800303c <SET_RELAY_PROGRAM.12+0xe78>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b25b      	sxtb	r3, r3
 8002e36:	0019      	movs	r1, r3
 8002e38:	4a81      	ldr	r2, [pc, #516]	; (8003040 <SET_RELAY_PROGRAM.12+0xe7c>)
 8002e3a:	000b      	movs	r3, r1
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	185b      	adds	r3, r3, r1
 8002e40:	18d3      	adds	r3, r2, r3
 8002e42:	3303      	adds	r3, #3
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	46a4      	mov	ip, r4
 8002e48:	001a      	movs	r2, r3
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	200c      	movs	r0, #12
 8002e4e:	f7fd ff4d 	bl	8000cec <LCD_SEND_DIGIT.7>
			  		  	  						  program_data[number_program][3] = hour;
 8002e52:	4b7a      	ldr	r3, [pc, #488]	; (800303c <SET_RELAY_PROGRAM.12+0xe78>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b25b      	sxtb	r3, r3
 8002e58:	0019      	movs	r1, r3
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	7818      	ldrb	r0, [r3, #0]
 8002e60:	4a77      	ldr	r2, [pc, #476]	; (8003040 <SET_RELAY_PROGRAM.12+0xe7c>)
 8002e62:	000b      	movs	r3, r1
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	185b      	adds	r3, r3, r1
 8002e68:	18d3      	adds	r3, r2, r3
 8002e6a:	3303      	adds	r3, #3
 8002e6c:	1c02      	adds	r2, r0, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ENTER_RST) {HAL_Delay(100); menu = 5;}
 8002e70:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <SET_RELAY_PROGRAM.12+0xe5c>)
 8002e72:	2180      	movs	r1, #128	; 0x80
 8002e74:	0018      	movs	r0, r3
 8002e76:	f001 fafd 	bl	8004474 <HAL_GPIO_ReadPin>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d106      	bne.n	8002e8c <SET_RELAY_PROGRAM.12+0xcc8>
 8002e7e:	2064      	movs	r0, #100	; 0x64
 8002e80:	f001 f8b0 	bl	8003fe4 <HAL_Delay>
 8002e84:	230a      	movs	r3, #10
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2205      	movs	r2, #5
 8002e8a:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ESCAPE_RST) {menu = 3; LCD_SEND_TEXT(0, 5, "  "); LCD_SEND_TEXT(0, 4, "->");}
 8002e8c:	4b64      	ldr	r3, [pc, #400]	; (8003020 <SET_RELAY_PROGRAM.12+0xe5c>)
 8002e8e:	2140      	movs	r1, #64	; 0x40
 8002e90:	0018      	movs	r0, r3
 8002e92:	f001 faef 	bl	8004474 <HAL_GPIO_ReadPin>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d111      	bne.n	8002ebe <SET_RELAY_PROGRAM.12+0xcfa>
 8002e9a:	230a      	movs	r3, #10
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	4b68      	ldr	r3, [pc, #416]	; (8003044 <SET_RELAY_PROGRAM.12+0xe80>)
 8002ea4:	46a4      	mov	ip, r4
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	2105      	movs	r1, #5
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fd ffcc 	bl	8000e48 <LCD_SEND_TEXT.9>
 8002eb0:	4b5a      	ldr	r3, [pc, #360]	; (800301c <SET_RELAY_PROGRAM.12+0xe58>)
 8002eb2:	46a4      	mov	ip, r4
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fd ffc5 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(menu == 4)
 8002ebe:	230a      	movs	r3, #10
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d100      	bne.n	8002eca <SET_RELAY_PROGRAM.12+0xd06>
 8002ec8:	e73c      	b.n	8002d44 <SET_RELAY_PROGRAM.12+0xb80>
			  		  	  					  while(ENTER_RST)
 8002eca:	e010      	b.n	8002eee <SET_RELAY_PROGRAM.12+0xd2a>
			  		  	  						  HAL_Delay(10);
 8002ecc:	200a      	movs	r0, #10
 8002ece:	f001 f889 	bl	8003fe4 <HAL_Delay>
			  		  	  						  LCD_SEND_TEXT(0, 5, "  ");
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <SET_RELAY_PROGRAM.12+0xe80>)
 8002ed4:	46a4      	mov	ip, r4
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	2105      	movs	r1, #5
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd ffb4 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(43, 5, "<-");
 8002ee0:	4b59      	ldr	r3, [pc, #356]	; (8003048 <SET_RELAY_PROGRAM.12+0xe84>)
 8002ee2:	46a4      	mov	ip, r4
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	202b      	movs	r0, #43	; 0x2b
 8002eea:	f7fd ffad 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(ENTER_RST)
 8002eee:	4b4c      	ldr	r3, [pc, #304]	; (8003020 <SET_RELAY_PROGRAM.12+0xe5c>)
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f001 fabe 	bl	8004474 <HAL_GPIO_ReadPin>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d0e7      	beq.n	8002ecc <SET_RELAY_PROGRAM.12+0xd08>
			  		  	  					  while(menu == 5)
 8002efc:	e083      	b.n	8003006 <SET_RELAY_PROGRAM.12+0xe42>
			  		  	  						  HAL_Delay(10);
 8002efe:	200a      	movs	r0, #10
 8002f00:	f001 f870 	bl	8003fe4 <HAL_Delay>
			  		  	  						  LCD_SEND_TEXT(0, 5, "  ");
 8002f04:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <SET_RELAY_PROGRAM.12+0xe80>)
 8002f06:	46a4      	mov	ip, r4
 8002f08:	001a      	movs	r2, r3
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fd ff9b 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  LCD_SEND_TEXT(43, 5, "<-");
 8002f12:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <SET_RELAY_PROGRAM.12+0xe84>)
 8002f14:	46a4      	mov	ip, r4
 8002f16:	001a      	movs	r2, r3
 8002f18:	2105      	movs	r1, #5
 8002f1a:	202b      	movs	r0, #43	; 0x2b
 8002f1c:	f7fd ff94 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  						  minute = program_data[number_program][4];
 8002f20:	4b46      	ldr	r3, [pc, #280]	; (800303c <SET_RELAY_PROGRAM.12+0xe78>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	0019      	movs	r1, r3
 8002f28:	4a45      	ldr	r2, [pc, #276]	; (8003040 <SET_RELAY_PROGRAM.12+0xe7c>)
 8002f2a:	000b      	movs	r3, r1
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	185b      	adds	r3, r3, r1
 8002f30:	18d3      	adds	r3, r2, r3
 8002f32:	3304      	adds	r3, #4
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	250b      	movs	r5, #11
 8002f38:	197b      	adds	r3, r7, r5
 8002f3a:	701a      	strb	r2, [r3, #0]
			  		  	  						  minute = minute + ENCODER_ROTATION_DIRECTION();
 8002f3c:	46a4      	mov	ip, r4
 8002f3e:	f7fe f8d5 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8002f42:	0003      	movs	r3, r0
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	197b      	adds	r3, r7, r5
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	18d3      	adds	r3, r2, r3
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	197b      	adds	r3, r7, r5
 8002f50:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(minute < 0) minute = 59;                            // min value
 8002f52:	197b      	adds	r3, r7, r5
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b7f      	cmp	r3, #127	; 0x7f
 8002f58:	d902      	bls.n	8002f60 <SET_RELAY_PROGRAM.12+0xd9c>
 8002f5a:	197b      	adds	r3, r7, r5
 8002f5c:	223b      	movs	r2, #59	; 0x3b
 8002f5e:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(minute > 59) minute = 0;            // max value
 8002f60:	220b      	movs	r2, #11
 8002f62:	18bb      	adds	r3, r7, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b25b      	sxtb	r3, r3
 8002f68:	2b3b      	cmp	r3, #59	; 0x3b
 8002f6a:	dd02      	ble.n	8002f72 <SET_RELAY_PROGRAM.12+0xdae>
 8002f6c:	18bb      	adds	r3, r7, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
			  		  	  						  LCD_SEND_DIGIT(29, 5, program_data[number_program][4]);                             // minute
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <SET_RELAY_PROGRAM.12+0xe78>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	0019      	movs	r1, r3
 8002f7a:	4a31      	ldr	r2, [pc, #196]	; (8003040 <SET_RELAY_PROGRAM.12+0xe7c>)
 8002f7c:	000b      	movs	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	185b      	adds	r3, r3, r1
 8002f82:	18d3      	adds	r3, r2, r3
 8002f84:	3304      	adds	r3, #4
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	46a4      	mov	ip, r4
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	2105      	movs	r1, #5
 8002f8e:	201d      	movs	r0, #29
 8002f90:	f7fd feac 	bl	8000cec <LCD_SEND_DIGIT.7>
			  		  	  						  program_data[number_program][4] = minute;
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <SET_RELAY_PROGRAM.12+0xe78>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	230b      	movs	r3, #11
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	7818      	ldrb	r0, [r3, #0]
 8002fa2:	4a27      	ldr	r2, [pc, #156]	; (8003040 <SET_RELAY_PROGRAM.12+0xe7c>)
 8002fa4:	000b      	movs	r3, r1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	185b      	adds	r3, r3, r1
 8002faa:	18d3      	adds	r3, r2, r3
 8002fac:	3304      	adds	r3, #4
 8002fae:	1c02      	adds	r2, r0, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ENTER_RST) {HAL_Delay(100); LCD_CLEAR(); menu = 6;}
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <SET_RELAY_PROGRAM.12+0xe5c>)
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f001 fa5c 	bl	8004474 <HAL_GPIO_ReadPin>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d109      	bne.n	8002fd4 <SET_RELAY_PROGRAM.12+0xe10>
 8002fc0:	2064      	movs	r0, #100	; 0x64
 8002fc2:	f001 f80f 	bl	8003fe4 <HAL_Delay>
 8002fc6:	46a4      	mov	ip, r4
 8002fc8:	f7fd fda0 	bl	8000b0c <LCD_CLEAR.10>
 8002fcc:	230a      	movs	r3, #10
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2206      	movs	r2, #6
 8002fd2:	701a      	strb	r2, [r3, #0]
			  		  	  						  if(ESCAPE_RST) {menu = 4; LCD_SEND_TEXT(43, 5, "  "); LCD_SEND_TEXT(0, 5, "->");}
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <SET_RELAY_PROGRAM.12+0xe5c>)
 8002fd6:	2140      	movs	r1, #64	; 0x40
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f001 fa4b 	bl	8004474 <HAL_GPIO_ReadPin>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d111      	bne.n	8003006 <SET_RELAY_PROGRAM.12+0xe42>
 8002fe2:	230a      	movs	r3, #10
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <SET_RELAY_PROGRAM.12+0xe80>)
 8002fec:	46a4      	mov	ip, r4
 8002fee:	001a      	movs	r2, r3
 8002ff0:	2105      	movs	r1, #5
 8002ff2:	202b      	movs	r0, #43	; 0x2b
 8002ff4:	f7fd ff28 	bl	8000e48 <LCD_SEND_TEXT.9>
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <SET_RELAY_PROGRAM.12+0xe58>)
 8002ffa:	46a4      	mov	ip, r4
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	2105      	movs	r1, #5
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd ff21 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  while(menu == 5)
 8003006:	230a      	movs	r3, #10
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b05      	cmp	r3, #5
 800300e:	d100      	bne.n	8003012 <SET_RELAY_PROGRAM.12+0xe4e>
 8003010:	e775      	b.n	8002efe <SET_RELAY_PROGRAM.12+0xd3a>
			  		  	  					  while(menu == 6)
 8003012:	e03d      	b.n	8003090 <SET_RELAY_PROGRAM.12+0xecc>
 8003014:	08006fbc 	.word	0x08006fbc
 8003018:	08006fc8 	.word	0x08006fc8
 800301c:	08006f28 	.word	0x08006f28
 8003020:	48001400 	.word	0x48001400
 8003024:	08007378 	.word	0x08007378
 8003028:	08006f80 	.word	0x08006f80
 800302c:	08006f8c 	.word	0x08006f8c
 8003030:	08006f98 	.word	0x08006f98
 8003034:	08006fa4 	.word	0x08006fa4
 8003038:	08006fb0 	.word	0x08006fb0
 800303c:	200003c8 	.word	0x200003c8
 8003040:	20000234 	.word	0x20000234
 8003044:	08006f44 	.word	0x08006f44
 8003048:	08006fd4 	.word	0x08006fd4
			  		  	  					  LCD_CLEAR();
 800304c:	46a4      	mov	ip, r4
 800304e:	f7fd fd5d 	bl	8000b0c <LCD_CLEAR.10>
			  		  	  					  LCD_SEND_TEXT(0, 1, "Saving data...");
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <SET_RELAY_PROGRAM.12+0xf04>)
 8003054:	46a4      	mov	ip, r4
 8003056:	001a      	movs	r2, r3
 8003058:	2101      	movs	r1, #1
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd fef4 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  WRITE_EEPROM_PROGRAM_DATA();
 8003060:	46a4      	mov	ip, r4
 8003062:	f7fd fbb7 	bl	80007d4 <WRITE_EEPROM_PROGRAM_DATA.13>
			  		  	  					  LCD_CLEAR();
 8003066:	46a4      	mov	ip, r4
 8003068:	f7fd fd50 	bl	8000b0c <LCD_CLEAR.10>
			  		  	  					  LCD_SEND_TEXT(12, 1, "Data saved");
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <SET_RELAY_PROGRAM.12+0xf08>)
 800306e:	46a4      	mov	ip, r4
 8003070:	001a      	movs	r2, r3
 8003072:	2101      	movs	r1, #1
 8003074:	200c      	movs	r0, #12
 8003076:	f7fd fee7 	bl	8000e48 <LCD_SEND_TEXT.9>
			  		  	  					  HAL_Delay(999);
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <SET_RELAY_PROGRAM.12+0xf0c>)
 800307c:	0018      	movs	r0, r3
 800307e:	f000 ffb1 	bl	8003fe4 <HAL_Delay>
			  		  	  					  LCD_CLEAR();
 8003082:	46a4      	mov	ip, r4
 8003084:	f7fd fd42 	bl	8000b0c <LCD_CLEAR.10>
			  		  	  					  menu = 0;
 8003088:	230a      	movs	r3, #10
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
			  		  	  					  while(menu == 6)
 8003090:	230a      	movs	r3, #10
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d0d8      	beq.n	800304c <SET_RELAY_PROGRAM.12+0xe88>
		  while(menu < 7)
 800309a:	220a      	movs	r2, #10
 800309c:	18bb      	adds	r3, r7, r2
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b06      	cmp	r3, #6
 80030a2:	d801      	bhi.n	80030a8 <SET_RELAY_PROGRAM.12+0xee4>
 80030a4:	f7ff f9ad 	bl	8002402 <SET_RELAY_PROGRAM.12+0x23e>
		  while(menu == 7)
 80030a8:	18bb      	adds	r3, r7, r2
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	d106      	bne.n	80030be <SET_RELAY_PROGRAM.12+0xefa>
			  READ_EEPROM_PROGRAM_DATA();
 80030b0:	46a4      	mov	ip, r4
 80030b2:	f7fd fc07 	bl	80008c4 <READ_EEPROM_PROGRAM_DATA.0>
			  LCD_CLEAR();
 80030b6:	46a4      	mov	ip, r4
 80030b8:	f7fd fd28 	bl	8000b0c <LCD_CLEAR.10>
			  break;
 80030bc:	46c0      	nop			; (mov r8, r8)
  }
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bdb0      	pop	{r4, r5, r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	08006fd8 	.word	0x08006fd8
 80030cc:	08006fe8 	.word	0x08006fe8
 80030d0:	000003e7 	.word	0x000003e7

080030d4 <SET_LCD.14>:
  {
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4664      	mov	r4, ip
 80030dc:	4663      	mov	r3, ip
 80030de:	607b      	str	r3, [r7, #4]
	  uint8_t menu = 0;
 80030e0:	230d      	movs	r3, #13
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
	  while(menu < 3)
 80030e8:	e276      	b.n	80035d8 <SET_LCD.14+0x504>
			  LCD_SEND_TEXT(18, 0, "Contrast");
 80030ea:	4bcd      	ldr	r3, [pc, #820]	; (8003420 <SET_LCD.14+0x34c>)
 80030ec:	46a4      	mov	ip, r4
 80030ee:	001a      	movs	r2, r3
 80030f0:	2100      	movs	r1, #0
 80030f2:	2012      	movs	r0, #18
 80030f4:	f7fd fea8 	bl	8000e48 <LCD_SEND_TEXT.9>
			  HAL_Delay(99);
 80030f8:	2063      	movs	r0, #99	; 0x63
 80030fa:	f000 ff73 	bl	8003fe4 <HAL_Delay>
		  while(ENTER_RST)
 80030fe:	4bc9      	ldr	r3, [pc, #804]	; (8003424 <SET_LCD.14+0x350>)
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	0018      	movs	r0, r3
 8003104:	f001 f9b6 	bl	8004474 <HAL_GPIO_ReadPin>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d0ee      	beq.n	80030ea <SET_LCD.14+0x16>
		  while(menu == 0)
 800310c:	e098      	b.n	8003240 <SET_LCD.14+0x16c>
			  LCD_SEND_TEXT(18, 0, "Contrast");
 800310e:	4bc4      	ldr	r3, [pc, #784]	; (8003420 <SET_LCD.14+0x34c>)
 8003110:	46a4      	mov	ip, r4
 8003112:	001a      	movs	r2, r3
 8003114:	2100      	movs	r1, #0
 8003116:	2012      	movs	r0, #18
 8003118:	f7fd fe96 	bl	8000e48 <LCD_SEND_TEXT.9>
			  contrast_value = contrast_value + ENCODER_ROTATION_DIRECTION();
 800311c:	46a4      	mov	ip, r4
 800311e:	f7fd ffe5 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8003122:	0003      	movs	r3, r0
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4bc0      	ldr	r3, [pc, #768]	; (8003428 <SET_LCD.14+0x354>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b25b      	sxtb	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	18d3      	adds	r3, r2, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	b25a      	sxtb	r2, r3
 8003134:	4bbc      	ldr	r3, [pc, #752]	; (8003428 <SET_LCD.14+0x354>)
 8003136:	701a      	strb	r2, [r3, #0]
			  if(contrast_value > 92) contrast_value = 92;
 8003138:	4bbb      	ldr	r3, [pc, #748]	; (8003428 <SET_LCD.14+0x354>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	2b5c      	cmp	r3, #92	; 0x5c
 8003140:	dd02      	ble.n	8003148 <SET_LCD.14+0x74>
 8003142:	4bb9      	ldr	r3, [pc, #740]	; (8003428 <SET_LCD.14+0x354>)
 8003144:	225c      	movs	r2, #92	; 0x5c
 8003146:	701a      	strb	r2, [r3, #0]
			  if(contrast_value < 60) contrast_value = 60;
 8003148:	4bb7      	ldr	r3, [pc, #732]	; (8003428 <SET_LCD.14+0x354>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b25b      	sxtb	r3, r3
 800314e:	2b3b      	cmp	r3, #59	; 0x3b
 8003150:	dc02      	bgt.n	8003158 <SET_LCD.14+0x84>
 8003152:	4bb5      	ldr	r3, [pc, #724]	; (8003428 <SET_LCD.14+0x354>)
 8003154:	223c      	movs	r2, #60	; 0x3c
 8003156:	701a      	strb	r2, [r3, #0]
			  a = 128 + contrast_value;   // 128 is minimum value of contrast
 8003158:	4bb3      	ldr	r3, [pc, #716]	; (8003428 <SET_LCD.14+0x354>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b25b      	sxtb	r3, r3
 800315e:	b2da      	uxtb	r2, r3
 8003160:	250f      	movs	r5, #15
 8003162:	197b      	adds	r3, r7, r5
 8003164:	3a80      	subs	r2, #128	; 0x80
 8003166:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(0x21);  // enable extended instructions
 8003168:	46a4      	mov	ip, r4
 800316a:	2021      	movs	r0, #33	; 0x21
 800316c:	f7fd fc52 	bl	8000a14 <LCD_CMD.2>
			  LCD_CMD(a);
 8003170:	197b      	adds	r3, r7, r5
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	46a4      	mov	ip, r4
 8003176:	0018      	movs	r0, r3
 8003178:	f7fd fc4c 	bl	8000a14 <LCD_CMD.2>
			  LCD_CMD(0x20); // enable standard instructions
 800317c:	46a4      	mov	ip, r4
 800317e:	2020      	movs	r0, #32
 8003180:	f7fd fc48 	bl	8000a14 <LCD_CMD.2>
			  a = 0x80 + 10;
 8003184:	197b      	adds	r3, r7, r5
 8003186:	228a      	movs	r2, #138	; 0x8a
 8003188:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(a);  // set address x
 800318a:	197b      	adds	r3, r7, r5
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	46a4      	mov	ip, r4
 8003190:	0018      	movs	r0, r3
 8003192:	f7fd fc3f 	bl	8000a14 <LCD_CMD.2>
			  a = 0x40 + 2;
 8003196:	197b      	adds	r3, r7, r5
 8003198:	2242      	movs	r2, #66	; 0x42
 800319a:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(a);  // set address y
 800319c:	197b      	adds	r3, r7, r5
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	46a4      	mov	ip, r4
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7fd fc36 	bl	8000a14 <LCD_CMD.2>
			  b = contrast_value - 60;
 80031a8:	4b9f      	ldr	r3, [pc, #636]	; (8003428 <SET_LCD.14+0x354>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	230e      	movs	r3, #14
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	3a3c      	subs	r2, #60	; 0x3c
 80031b6:	701a      	strb	r2, [r3, #0]
			  for(a = 0; a < 32; a++)
 80031b8:	197b      	adds	r3, r7, r5
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e01e      	b.n	80031fe <SET_LCD.14+0x12a>
				  if(a < b) {LCD_DATA(255); LCD_DATA(255);}
 80031c0:	230f      	movs	r3, #15
 80031c2:	18fa      	adds	r2, r7, r3
 80031c4:	230e      	movs	r3, #14
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d208      	bcs.n	80031e2 <SET_LCD.14+0x10e>
 80031d0:	46a4      	mov	ip, r4
 80031d2:	20ff      	movs	r0, #255	; 0xff
 80031d4:	f7fd fbf0 	bl	80009b8 <LCD_DATA.4>
 80031d8:	46a4      	mov	ip, r4
 80031da:	20ff      	movs	r0, #255	; 0xff
 80031dc:	f7fd fbec 	bl	80009b8 <LCD_DATA.4>
 80031e0:	e007      	b.n	80031f2 <SET_LCD.14+0x11e>
					  {LCD_DATA(0); LCD_DATA(0);}
 80031e2:	46a4      	mov	ip, r4
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fd fbe7 	bl	80009b8 <LCD_DATA.4>
 80031ea:	46a4      	mov	ip, r4
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fbe3 	bl	80009b8 <LCD_DATA.4>
			  for(a = 0; a < 32; a++)
 80031f2:	210f      	movs	r1, #15
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	3201      	adds	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	230f      	movs	r3, #15
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b1f      	cmp	r3, #31
 8003206:	d9db      	bls.n	80031c0 <SET_LCD.14+0xec>
			  if(ENTER_RST) {LCD_CLEAR(); menu = 1;}
 8003208:	4b86      	ldr	r3, [pc, #536]	; (8003424 <SET_LCD.14+0x350>)
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	0018      	movs	r0, r3
 800320e:	f001 f931 	bl	8004474 <HAL_GPIO_ReadPin>
 8003212:	1e03      	subs	r3, r0, #0
 8003214:	d106      	bne.n	8003224 <SET_LCD.14+0x150>
 8003216:	46a4      	mov	ip, r4
 8003218:	f7fd fc78 	bl	8000b0c <LCD_CLEAR.10>
 800321c:	230d      	movs	r3, #13
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
			  if(ESCAPE_RST) {LCD_CLEAR(); menu = 3;}
 8003224:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <SET_LCD.14+0x350>)
 8003226:	2140      	movs	r1, #64	; 0x40
 8003228:	0018      	movs	r0, r3
 800322a:	f001 f923 	bl	8004474 <HAL_GPIO_ReadPin>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d106      	bne.n	8003240 <SET_LCD.14+0x16c>
 8003232:	46a4      	mov	ip, r4
 8003234:	f7fd fc6a 	bl	8000b0c <LCD_CLEAR.10>
 8003238:	230d      	movs	r3, #13
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2203      	movs	r2, #3
 800323e:	701a      	strb	r2, [r3, #0]
		  while(menu == 0)
 8003240:	230d      	movs	r3, #13
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d100      	bne.n	800324c <SET_LCD.14+0x178>
 800324a:	e760      	b.n	800310e <SET_LCD.14+0x3a>
		  while(ENTER_RST)
 800324c:	e009      	b.n	8003262 <SET_LCD.14+0x18e>
			  LCD_SEND_TEXT(10, 0, "BIAS System");
 800324e:	4b77      	ldr	r3, [pc, #476]	; (800342c <SET_LCD.14+0x358>)
 8003250:	46a4      	mov	ip, r4
 8003252:	001a      	movs	r2, r3
 8003254:	2100      	movs	r1, #0
 8003256:	200a      	movs	r0, #10
 8003258:	f7fd fdf6 	bl	8000e48 <LCD_SEND_TEXT.9>
			  HAL_Delay(99);
 800325c:	2063      	movs	r0, #99	; 0x63
 800325e:	f000 fec1 	bl	8003fe4 <HAL_Delay>
		  while(ENTER_RST)
 8003262:	4b70      	ldr	r3, [pc, #448]	; (8003424 <SET_LCD.14+0x350>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0018      	movs	r0, r3
 8003268:	f001 f904 	bl	8004474 <HAL_GPIO_ReadPin>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d0ee      	beq.n	800324e <SET_LCD.14+0x17a>
		  while(menu == 1)
 8003270:	e0b5      	b.n	80033de <SET_LCD.14+0x30a>
			  LCD_SEND_TEXT(10, 0, "BIAS System");
 8003272:	4b6e      	ldr	r3, [pc, #440]	; (800342c <SET_LCD.14+0x358>)
 8003274:	46a4      	mov	ip, r4
 8003276:	001a      	movs	r2, r3
 8003278:	2100      	movs	r1, #0
 800327a:	200a      	movs	r0, #10
 800327c:	f7fd fde4 	bl	8000e48 <LCD_SEND_TEXT.9>
			  BIAS_value = BIAS_value + ENCODER_ROTATION_DIRECTION();
 8003280:	46a4      	mov	ip, r4
 8003282:	f7fd ff33 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 8003286:	0003      	movs	r3, r0
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4b69      	ldr	r3, [pc, #420]	; (8003430 <SET_LCD.14+0x35c>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	b25b      	sxtb	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	18d3      	adds	r3, r2, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	b25a      	sxtb	r2, r3
 8003298:	4b65      	ldr	r3, [pc, #404]	; (8003430 <SET_LCD.14+0x35c>)
 800329a:	701a      	strb	r2, [r3, #0]
			  if(BIAS_value < 0) BIAS_value = 0;
 800329c:	4b64      	ldr	r3, [pc, #400]	; (8003430 <SET_LCD.14+0x35c>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	da02      	bge.n	80032ac <SET_LCD.14+0x1d8>
 80032a6:	4b62      	ldr	r3, [pc, #392]	; (8003430 <SET_LCD.14+0x35c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
			  if(BIAS_value > 4) BIAS_value = 4;
 80032ac:	4b60      	ldr	r3, [pc, #384]	; (8003430 <SET_LCD.14+0x35c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	dd02      	ble.n	80032bc <SET_LCD.14+0x1e8>
 80032b6:	4b5e      	ldr	r3, [pc, #376]	; (8003430 <SET_LCD.14+0x35c>)
 80032b8:	2204      	movs	r2, #4
 80032ba:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(0x21);  // enable extended instructions
 80032bc:	46a4      	mov	ip, r4
 80032be:	2021      	movs	r0, #33	; 0x21
 80032c0:	f7fd fba8 	bl	8000a14 <LCD_CMD.2>
			  a = 0x10;
 80032c4:	200f      	movs	r0, #15
 80032c6:	183b      	adds	r3, r7, r0
 80032c8:	2210      	movs	r2, #16
 80032ca:	701a      	strb	r2, [r3, #0]
			  a = a + BIAS_value;
 80032cc:	4b58      	ldr	r3, [pc, #352]	; (8003430 <SET_LCD.14+0x35c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	b2d9      	uxtb	r1, r3
 80032d4:	183b      	adds	r3, r7, r0
 80032d6:	183a      	adds	r2, r7, r0
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	188a      	adds	r2, r1, r2
 80032dc:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(a);
 80032de:	0005      	movs	r5, r0
 80032e0:	197b      	adds	r3, r7, r5
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	46a4      	mov	ip, r4
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fd fb94 	bl	8000a14 <LCD_CMD.2>
			  LCD_CMD(0x20); // enable standard instructions
 80032ec:	46a4      	mov	ip, r4
 80032ee:	2020      	movs	r0, #32
 80032f0:	f7fd fb90 	bl	8000a14 <LCD_CMD.2>
			  a = 0x80 + 10;
 80032f4:	197b      	adds	r3, r7, r5
 80032f6:	228a      	movs	r2, #138	; 0x8a
 80032f8:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(a);  // set address x
 80032fa:	197b      	adds	r3, r7, r5
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	46a4      	mov	ip, r4
 8003300:	0018      	movs	r0, r3
 8003302:	f7fd fb87 	bl	8000a14 <LCD_CMD.2>
			  a = 0x40 + 2;
 8003306:	197b      	adds	r3, r7, r5
 8003308:	2242      	movs	r2, #66	; 0x42
 800330a:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(a);  // set address y
 800330c:	197b      	adds	r3, r7, r5
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	46a4      	mov	ip, r4
 8003312:	0018      	movs	r0, r3
 8003314:	f7fd fb7e 	bl	8000a14 <LCD_CMD.2>
			  for(a = 0; a < 4; a++)
 8003318:	197b      	adds	r3, r7, r5
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e036      	b.n	800338e <SET_LCD.14+0x2ba>
				  if(a < BIAS_value)
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	4a42      	ldr	r2, [pc, #264]	; (8003430 <SET_LCD.14+0x35c>)
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	b252      	sxtb	r2, r2
 800332c:	4293      	cmp	r3, r2
 800332e:	da14      	bge.n	800335a <SET_LCD.14+0x286>
					  for(b = 0; b < 14; b++)
 8003330:	230e      	movs	r3, #14
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e009      	b.n	800334e <SET_LCD.14+0x27a>
					  {LCD_DATA(255);}
 800333a:	46a4      	mov	ip, r4
 800333c:	20ff      	movs	r0, #255	; 0xff
 800333e:	f7fd fb3b 	bl	80009b8 <LCD_DATA.4>
					  for(b = 0; b < 14; b++)
 8003342:	210e      	movs	r1, #14
 8003344:	187b      	adds	r3, r7, r1
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	187b      	adds	r3, r7, r1
 800334a:	3201      	adds	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	230e      	movs	r3, #14
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b0d      	cmp	r3, #13
 8003356:	d9f0      	bls.n	800333a <SET_LCD.14+0x266>
 8003358:	e013      	b.n	8003382 <SET_LCD.14+0x2ae>
					  for(b = 0; b < 14; b++)
 800335a:	230e      	movs	r3, #14
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e009      	b.n	8003378 <SET_LCD.14+0x2a4>
					  {LCD_DATA(0);}
 8003364:	46a4      	mov	ip, r4
 8003366:	2000      	movs	r0, #0
 8003368:	f7fd fb26 	bl	80009b8 <LCD_DATA.4>
					  for(b = 0; b < 14; b++)
 800336c:	210e      	movs	r1, #14
 800336e:	187b      	adds	r3, r7, r1
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	187b      	adds	r3, r7, r1
 8003374:	3201      	adds	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	230e      	movs	r3, #14
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b0d      	cmp	r3, #13
 8003380:	d9f0      	bls.n	8003364 <SET_LCD.14+0x290>
			  for(a = 0; a < 4; a++)
 8003382:	210f      	movs	r1, #15
 8003384:	187b      	adds	r3, r7, r1
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	187b      	adds	r3, r7, r1
 800338a:	3201      	adds	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	230f      	movs	r3, #15
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d9c3      	bls.n	8003320 <SET_LCD.14+0x24c>
			  if(ENTER_RST) {LCD_CLEAR(); menu = 2;}
 8003398:	4b22      	ldr	r3, [pc, #136]	; (8003424 <SET_LCD.14+0x350>)
 800339a:	2180      	movs	r1, #128	; 0x80
 800339c:	0018      	movs	r0, r3
 800339e:	f001 f869 	bl	8004474 <HAL_GPIO_ReadPin>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d106      	bne.n	80033b4 <SET_LCD.14+0x2e0>
 80033a6:	46a4      	mov	ip, r4
 80033a8:	f7fd fbb0 	bl	8000b0c <LCD_CLEAR.10>
 80033ac:	230d      	movs	r3, #13
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	2202      	movs	r2, #2
 80033b2:	701a      	strb	r2, [r3, #0]
			  if(ESCAPE_RST) {LCD_CLEAR(); menu = 0; LCD_SEND_TEXT(18, 0, "Contrast");}
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <SET_LCD.14+0x350>)
 80033b6:	2140      	movs	r1, #64	; 0x40
 80033b8:	0018      	movs	r0, r3
 80033ba:	f001 f85b 	bl	8004474 <HAL_GPIO_ReadPin>
 80033be:	1e03      	subs	r3, r0, #0
 80033c0:	d10d      	bne.n	80033de <SET_LCD.14+0x30a>
 80033c2:	46a4      	mov	ip, r4
 80033c4:	f7fd fba2 	bl	8000b0c <LCD_CLEAR.10>
 80033c8:	230d      	movs	r3, #13
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <SET_LCD.14+0x34c>)
 80033d2:	46a4      	mov	ip, r4
 80033d4:	001a      	movs	r2, r3
 80033d6:	2100      	movs	r1, #0
 80033d8:	2012      	movs	r0, #18
 80033da:	f7fd fd35 	bl	8000e48 <LCD_SEND_TEXT.9>
		  while(menu == 1)
 80033de:	230d      	movs	r3, #13
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d100      	bne.n	80033ea <SET_LCD.14+0x316>
 80033e8:	e743      	b.n	8003272 <SET_LCD.14+0x19e>
		  while(ENTER_RST)
 80033ea:	e010      	b.n	800340e <SET_LCD.14+0x33a>
			  LCD_SEND_TEXT(11, 0, "Temperature");
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <SET_LCD.14+0x360>)
 80033ee:	46a4      	mov	ip, r4
 80033f0:	001a      	movs	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	200b      	movs	r0, #11
 80033f6:	f7fd fd27 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(11, 1, "Coefficient");
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <SET_LCD.14+0x364>)
 80033fc:	46a4      	mov	ip, r4
 80033fe:	001a      	movs	r2, r3
 8003400:	2101      	movs	r1, #1
 8003402:	200b      	movs	r0, #11
 8003404:	f7fd fd20 	bl	8000e48 <LCD_SEND_TEXT.9>
			  HAL_Delay(99);
 8003408:	2063      	movs	r0, #99	; 0x63
 800340a:	f000 fdeb 	bl	8003fe4 <HAL_Delay>
		  while(ENTER_RST)
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <SET_LCD.14+0x350>)
 8003410:	2180      	movs	r1, #128	; 0x80
 8003412:	0018      	movs	r0, r3
 8003414:	f001 f82e 	bl	8004474 <HAL_GPIO_ReadPin>
 8003418:	1e03      	subs	r3, r0, #0
 800341a:	d0e7      	beq.n	80033ec <SET_LCD.14+0x318>
		  while(menu == 2)
 800341c:	e0cb      	b.n	80035b6 <SET_LCD.14+0x4e2>
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	08006ff4 	.word	0x08006ff4
 8003424:	48001400 	.word	0x48001400
 8003428:	2000027a 	.word	0x2000027a
 800342c:	08007000 	.word	0x08007000
 8003430:	2000027b 	.word	0x2000027b
 8003434:	0800700c 	.word	0x0800700c
 8003438:	08007018 	.word	0x08007018
			  LCD_SEND_TEXT(11, 0, "Temperature");
 800343c:	4b6b      	ldr	r3, [pc, #428]	; (80035ec <SET_LCD.14+0x518>)
 800343e:	46a4      	mov	ip, r4
 8003440:	001a      	movs	r2, r3
 8003442:	2100      	movs	r1, #0
 8003444:	200b      	movs	r0, #11
 8003446:	f7fd fcff 	bl	8000e48 <LCD_SEND_TEXT.9>
			  LCD_SEND_TEXT(11, 1, "Coefficient");
 800344a:	4b69      	ldr	r3, [pc, #420]	; (80035f0 <SET_LCD.14+0x51c>)
 800344c:	46a4      	mov	ip, r4
 800344e:	001a      	movs	r2, r3
 8003450:	2101      	movs	r1, #1
 8003452:	200b      	movs	r0, #11
 8003454:	f7fd fcf8 	bl	8000e48 <LCD_SEND_TEXT.9>
			  temperature_coefficient = temperature_coefficient + ENCODER_ROTATION_DIRECTION();
 8003458:	46a4      	mov	ip, r4
 800345a:	f7fd fe47 	bl	80010ec <ENCODER_ROTATION_DIRECTION.8>
 800345e:	0003      	movs	r3, r0
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4b64      	ldr	r3, [pc, #400]	; (80035f4 <SET_LCD.14+0x520>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b25b      	sxtb	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	18d3      	adds	r3, r2, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	b25a      	sxtb	r2, r3
 8003470:	4b60      	ldr	r3, [pc, #384]	; (80035f4 <SET_LCD.14+0x520>)
 8003472:	701a      	strb	r2, [r3, #0]
			  if(temperature_coefficient < 0) temperature_coefficient = 0;
 8003474:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <SET_LCD.14+0x520>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b25b      	sxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	da02      	bge.n	8003484 <SET_LCD.14+0x3b0>
 800347e:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <SET_LCD.14+0x520>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
			  if(temperature_coefficient > 3) temperature_coefficient = 3;
 8003484:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <SET_LCD.14+0x520>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	2b03      	cmp	r3, #3
 800348c:	dd02      	ble.n	8003494 <SET_LCD.14+0x3c0>
 800348e:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <SET_LCD.14+0x520>)
 8003490:	2203      	movs	r2, #3
 8003492:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(0x21);  // enable extended instructions
 8003494:	46a4      	mov	ip, r4
 8003496:	2021      	movs	r0, #33	; 0x21
 8003498:	f7fd fabc 	bl	8000a14 <LCD_CMD.2>
			  a = 0x04;
 800349c:	200f      	movs	r0, #15
 800349e:	183b      	adds	r3, r7, r0
 80034a0:	2204      	movs	r2, #4
 80034a2:	701a      	strb	r2, [r3, #0]
			  a = a + temperature_coefficient;
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <SET_LCD.14+0x520>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	b2d9      	uxtb	r1, r3
 80034ac:	183b      	adds	r3, r7, r0
 80034ae:	183a      	adds	r2, r7, r0
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	188a      	adds	r2, r1, r2
 80034b4:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(a);
 80034b6:	0005      	movs	r5, r0
 80034b8:	197b      	adds	r3, r7, r5
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	46a4      	mov	ip, r4
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fd faa8 	bl	8000a14 <LCD_CMD.2>
			  LCD_CMD(0x20); // enable standard instructions
 80034c4:	46a4      	mov	ip, r4
 80034c6:	2020      	movs	r0, #32
 80034c8:	f7fd faa4 	bl	8000a14 <LCD_CMD.2>
			  a = 0x80 + 10;
 80034cc:	197b      	adds	r3, r7, r5
 80034ce:	228a      	movs	r2, #138	; 0x8a
 80034d0:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(a);  // set address x
 80034d2:	197b      	adds	r3, r7, r5
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	46a4      	mov	ip, r4
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fd fa9b 	bl	8000a14 <LCD_CMD.2>
			  a = 0x40 + 3;
 80034de:	197b      	adds	r3, r7, r5
 80034e0:	2243      	movs	r2, #67	; 0x43
 80034e2:	701a      	strb	r2, [r3, #0]
			  LCD_CMD(a);  // set address y
 80034e4:	197b      	adds	r3, r7, r5
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	46a4      	mov	ip, r4
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7fd fa92 	bl	8000a14 <LCD_CMD.2>
			  for(a = 0; a < 3; a++)
 80034f0:	197b      	adds	r3, r7, r5
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e036      	b.n	8003566 <SET_LCD.14+0x492>
				  if(a < temperature_coefficient)
 80034f8:	230f      	movs	r3, #15
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <SET_LCD.14+0x520>)
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	b252      	sxtb	r2, r2
 8003504:	4293      	cmp	r3, r2
 8003506:	da14      	bge.n	8003532 <SET_LCD.14+0x45e>
					  for(b = 0; b < 20; b++)
 8003508:	230e      	movs	r3, #14
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e009      	b.n	8003526 <SET_LCD.14+0x452>
					  {LCD_DATA(255);}
 8003512:	46a4      	mov	ip, r4
 8003514:	20ff      	movs	r0, #255	; 0xff
 8003516:	f7fd fa4f 	bl	80009b8 <LCD_DATA.4>
					  for(b = 0; b < 20; b++)
 800351a:	210e      	movs	r1, #14
 800351c:	187b      	adds	r3, r7, r1
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	187b      	adds	r3, r7, r1
 8003522:	3201      	adds	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	230e      	movs	r3, #14
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b13      	cmp	r3, #19
 800352e:	d9f0      	bls.n	8003512 <SET_LCD.14+0x43e>
 8003530:	e013      	b.n	800355a <SET_LCD.14+0x486>
					  for(b = 0; b < 20; b++)
 8003532:	230e      	movs	r3, #14
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e009      	b.n	8003550 <SET_LCD.14+0x47c>
					  {LCD_DATA(0);}
 800353c:	46a4      	mov	ip, r4
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd fa3a 	bl	80009b8 <LCD_DATA.4>
					  for(b = 0; b < 20; b++)
 8003544:	210e      	movs	r1, #14
 8003546:	187b      	adds	r3, r7, r1
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	187b      	adds	r3, r7, r1
 800354c:	3201      	adds	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	230e      	movs	r3, #14
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b13      	cmp	r3, #19
 8003558:	d9f0      	bls.n	800353c <SET_LCD.14+0x468>
			  for(a = 0; a < 3; a++)
 800355a:	210f      	movs	r1, #15
 800355c:	187b      	adds	r3, r7, r1
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	187b      	adds	r3, r7, r1
 8003562:	3201      	adds	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	230f      	movs	r3, #15
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d9c3      	bls.n	80034f8 <SET_LCD.14+0x424>
			  if(ENTER_RST) {LCD_CLEAR(); menu = 3;}
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <SET_LCD.14+0x524>)
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	0018      	movs	r0, r3
 8003576:	f000 ff7d 	bl	8004474 <HAL_GPIO_ReadPin>
 800357a:	1e03      	subs	r3, r0, #0
 800357c:	d106      	bne.n	800358c <SET_LCD.14+0x4b8>
 800357e:	46a4      	mov	ip, r4
 8003580:	f7fd fac4 	bl	8000b0c <LCD_CLEAR.10>
 8003584:	230d      	movs	r3, #13
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	2203      	movs	r2, #3
 800358a:	701a      	strb	r2, [r3, #0]
			  if(ESCAPE_RST) {LCD_CLEAR(); menu = 1; LCD_SEND_TEXT(10, 0, "BIAS System");}
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <SET_LCD.14+0x524>)
 800358e:	2140      	movs	r1, #64	; 0x40
 8003590:	0018      	movs	r0, r3
 8003592:	f000 ff6f 	bl	8004474 <HAL_GPIO_ReadPin>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d10d      	bne.n	80035b6 <SET_LCD.14+0x4e2>
 800359a:	46a4      	mov	ip, r4
 800359c:	f7fd fab6 	bl	8000b0c <LCD_CLEAR.10>
 80035a0:	230d      	movs	r3, #13
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <SET_LCD.14+0x528>)
 80035aa:	46a4      	mov	ip, r4
 80035ac:	001a      	movs	r2, r3
 80035ae:	2100      	movs	r1, #0
 80035b0:	200a      	movs	r0, #10
 80035b2:	f7fd fc49 	bl	8000e48 <LCD_SEND_TEXT.9>
		  while(menu == 2)
 80035b6:	230d      	movs	r3, #13
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d100      	bne.n	80035c2 <SET_LCD.14+0x4ee>
 80035c0:	e73c      	b.n	800343c <SET_LCD.14+0x368>
		  while(ESCAPE_RST)
 80035c2:	e002      	b.n	80035ca <SET_LCD.14+0x4f6>
			  HAL_Delay(99);
 80035c4:	2063      	movs	r0, #99	; 0x63
 80035c6:	f000 fd0d 	bl	8003fe4 <HAL_Delay>
		  while(ESCAPE_RST)
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <SET_LCD.14+0x524>)
 80035cc:	2140      	movs	r1, #64	; 0x40
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 ff50 	bl	8004474 <HAL_GPIO_ReadPin>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d0f5      	beq.n	80035c4 <SET_LCD.14+0x4f0>
	  while(menu < 3)
 80035d8:	230d      	movs	r3, #13
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d800      	bhi.n	80035e4 <SET_LCD.14+0x510>
 80035e2:	e58c      	b.n	80030fe <SET_LCD.14+0x2a>
  }
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b004      	add	sp, #16
 80035ea:	bdb0      	pop	{r4, r5, r7, pc}
 80035ec:	0800700c 	.word	0x0800700c
 80035f0:	08007018 	.word	0x08007018
 80035f4:	2000027c 	.word	0x2000027c
 80035f8:	48001400 	.word	0x48001400
 80035fc:	08007000 	.word	0x08007000

08003600 <relay_control_program.5>:
  {
 8003600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003602:	b08b      	sub	sp, #44	; 0x2c
 8003604:	af00      	add	r7, sp, #0
 8003606:	4663      	mov	r3, ip
 8003608:	607b      	str	r3, [r7, #4]
	  uint8_t day_of_week = 0;
 800360a:	2426      	movs	r4, #38	; 0x26
 800360c:	193b      	adds	r3, r7, r4
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
	  uint8_t hour = 0;
 8003612:	2325      	movs	r3, #37	; 0x25
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
	  uint8_t minute = 0;
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	18bb      	adds	r3, r7, r2
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
	  char a = 0;
 8003622:	2527      	movs	r5, #39	; 0x27
 8003624:	197b      	adds	r3, r7, r5
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);  // get time
 800362a:	2610      	movs	r6, #16
 800362c:	19b9      	adds	r1, r7, r6
 800362e:	4b50      	ldr	r3, [pc, #320]	; (8003770 <relay_control_program.5+0x170>)
 8003630:	2200      	movs	r2, #0
 8003632:	0018      	movs	r0, r3
 8003634:	f002 fbb2 	bl	8005d9c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);  // get date
 8003638:	210c      	movs	r1, #12
 800363a:	1879      	adds	r1, r7, r1
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <relay_control_program.5+0x170>)
 800363e:	2200      	movs	r2, #0
 8003640:	0018      	movs	r0, r3
 8003642:	f002 fcaf 	bl	8005fa4 <HAL_RTC_GetDate>
	  hour = time.Hours;
 8003646:	2325      	movs	r3, #37	; 0x25
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	19ba      	adds	r2, r7, r6
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	701a      	strb	r2, [r3, #0]
	  minute = time.Minutes;
 8003650:	2224      	movs	r2, #36	; 0x24
 8003652:	18bb      	adds	r3, r7, r2
 8003654:	19ba      	adds	r2, r7, r6
 8003656:	7852      	ldrb	r2, [r2, #1]
 8003658:	701a      	strb	r2, [r3, #0]
	  day_of_week = date.WeekDay;
 800365a:	193b      	adds	r3, r7, r4
 800365c:	210c      	movs	r1, #12
 800365e:	187a      	adds	r2, r7, r1
 8003660:	7812      	ldrb	r2, [r2, #0]
 8003662:	701a      	strb	r2, [r3, #0]
	  if(program_data[program_number][0] == 1)    // program enable? disable??
 8003664:	4b43      	ldr	r3, [pc, #268]	; (8003774 <relay_control_program.5+0x174>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	0019      	movs	r1, r3
 800366a:	4a43      	ldr	r2, [pc, #268]	; (8003778 <relay_control_program.5+0x178>)
 800366c:	000b      	movs	r3, r1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	185b      	adds	r3, r3, r1
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d16a      	bne.n	800374e <relay_control_program.5+0x14e>
		 if(program_data[program_number][2] == day_of_week) a++;
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <relay_control_program.5+0x174>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	0019      	movs	r1, r3
 800367e:	4a3e      	ldr	r2, [pc, #248]	; (8003778 <relay_control_program.5+0x178>)
 8003680:	000b      	movs	r3, r1
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	185b      	adds	r3, r3, r1
 8003686:	18d3      	adds	r3, r2, r3
 8003688:	3302      	adds	r3, #2
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	193a      	adds	r2, r7, r4
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d104      	bne.n	800369e <relay_control_program.5+0x9e>
 8003694:	197b      	adds	r3, r7, r5
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	197b      	adds	r3, r7, r5
 800369a:	3201      	adds	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
		 if(program_data[program_number][3] == hour) a++;
 800369e:	4b35      	ldr	r3, [pc, #212]	; (8003774 <relay_control_program.5+0x174>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	0019      	movs	r1, r3
 80036a4:	4a34      	ldr	r2, [pc, #208]	; (8003778 <relay_control_program.5+0x178>)
 80036a6:	000b      	movs	r3, r1
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	185b      	adds	r3, r3, r1
 80036ac:	18d3      	adds	r3, r2, r3
 80036ae:	3303      	adds	r3, #3
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2225      	movs	r2, #37	; 0x25
 80036b4:	18ba      	adds	r2, r7, r2
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d105      	bne.n	80036c8 <relay_control_program.5+0xc8>
 80036bc:	2127      	movs	r1, #39	; 0x27
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	3201      	adds	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
		 if(program_data[program_number][4] == minute) a++;
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <relay_control_program.5+0x174>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	0019      	movs	r1, r3
 80036ce:	4a2a      	ldr	r2, [pc, #168]	; (8003778 <relay_control_program.5+0x178>)
 80036d0:	000b      	movs	r3, r1
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	185b      	adds	r3, r3, r1
 80036d6:	18d3      	adds	r3, r2, r3
 80036d8:	3304      	adds	r3, #4
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	18ba      	adds	r2, r7, r2
 80036e0:	7812      	ldrb	r2, [r2, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d105      	bne.n	80036f2 <relay_control_program.5+0xf2>
 80036e6:	2127      	movs	r1, #39	; 0x27
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	3201      	adds	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
		 if(a == 3)
 80036f2:	2327      	movs	r3, #39	; 0x27
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d128      	bne.n	800374e <relay_control_program.5+0x14e>
			 if(program_data[program_number][1] == 1) {LED_ON; RELAY_ON;}
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <relay_control_program.5+0x174>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	0019      	movs	r1, r3
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <relay_control_program.5+0x178>)
 8003704:	000b      	movs	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	185b      	adds	r3, r3, r1
 800370a:	18d3      	adds	r3, r2, r3
 800370c:	3301      	adds	r3, #1
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d10e      	bne.n	8003732 <relay_control_program.5+0x132>
 8003714:	2390      	movs	r3, #144	; 0x90
 8003716:	05db      	lsls	r3, r3, #23
 8003718:	2201      	movs	r2, #1
 800371a:	2140      	movs	r1, #64	; 0x40
 800371c:	0018      	movs	r0, r3
 800371e:	f000 fec6 	bl	80044ae <HAL_GPIO_WritePin>
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	4815      	ldr	r0, [pc, #84]	; (800377c <relay_control_program.5+0x17c>)
 8003728:	2201      	movs	r2, #1
 800372a:	0019      	movs	r1, r3
 800372c:	f000 febf 	bl	80044ae <HAL_GPIO_WritePin>
 8003730:	e00d      	b.n	800374e <relay_control_program.5+0x14e>
			 else{LED_OFF; RELAY_OFF};
 8003732:	2390      	movs	r3, #144	; 0x90
 8003734:	05db      	lsls	r3, r3, #23
 8003736:	2200      	movs	r2, #0
 8003738:	2140      	movs	r1, #64	; 0x40
 800373a:	0018      	movs	r0, r3
 800373c:	f000 feb7 	bl	80044ae <HAL_GPIO_WritePin>
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	019b      	lsls	r3, r3, #6
 8003744:	480d      	ldr	r0, [pc, #52]	; (800377c <relay_control_program.5+0x17c>)
 8003746:	2200      	movs	r2, #0
 8003748:	0019      	movs	r1, r3
 800374a:	f000 feb0 	bl	80044ae <HAL_GPIO_WritePin>
	  program_number++;
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <relay_control_program.5+0x174>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <relay_control_program.5+0x174>)
 8003758:	701a      	strb	r2, [r3, #0]
	  if (program_number > 13) program_number = 0;
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <relay_control_program.5+0x174>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b0d      	cmp	r3, #13
 8003760:	d902      	bls.n	8003768 <relay_control_program.5+0x168>
 8003762:	4b04      	ldr	r3, [pc, #16]	; (8003774 <relay_control_program.5+0x174>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
  }
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b00b      	add	sp, #44	; 0x2c
 800376e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003770:	200002f4 	.word	0x200002f4
 8003774:	200003c2 	.word	0x200003c2
 8003778:	20000234 	.word	0x20000234
 800377c:	48000800 	.word	0x48000800

08003780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b095      	sub	sp, #84	; 0x54
 8003784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003786:	2420      	movs	r4, #32
 8003788:	193b      	adds	r3, r7, r4
 800378a:	0018      	movs	r0, r3
 800378c:	2330      	movs	r3, #48	; 0x30
 800378e:	001a      	movs	r2, r3
 8003790:	2100      	movs	r1, #0
 8003792:	f003 fac5 	bl	8006d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003796:	2310      	movs	r3, #16
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	0018      	movs	r0, r3
 800379c:	2310      	movs	r3, #16
 800379e:	001a      	movs	r2, r3
 80037a0:	2100      	movs	r1, #0
 80037a2:	f003 fabd 	bl	8006d20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037a6:	003b      	movs	r3, r7
 80037a8:	0018      	movs	r0, r3
 80037aa:	2310      	movs	r3, #16
 80037ac:	001a      	movs	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f003 fab6 	bl	8006d20 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037b4:	f001 fc7a 	bl	80050ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 80037b8:	4b26      	ldr	r3, [pc, #152]	; (8003854 <SystemClock_Config+0xd4>)
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <SystemClock_Config+0xd4>)
 80037be:	2118      	movs	r1, #24
 80037c0:	430a      	orrs	r2, r1
 80037c2:	621a      	str	r2, [r3, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80037c4:	0021      	movs	r1, r4
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	2207      	movs	r2, #7
 80037ca:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	2201      	movs	r2, #1
 80037d0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2201      	movs	r2, #1
 80037d6:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2201      	movs	r2, #1
 80037dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	2210      	movs	r2, #16
 80037e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037e4:	187b      	adds	r3, r7, r1
 80037e6:	2200      	movs	r2, #0
 80037e8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	0018      	movs	r0, r3
 80037ee:	f001 fc6b 	bl	80050c8 <HAL_RCC_OscConfig>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d001      	beq.n	80037fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80037f6:	f000 fa21 	bl	8003c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037fa:	2110      	movs	r1, #16
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	2207      	movs	r2, #7
 8003800:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003802:	187b      	adds	r3, r7, r1
 8003804:	2201      	movs	r2, #1
 8003806:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003808:	187b      	adds	r3, r7, r1
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800380e:	187b      	adds	r3, r7, r1
 8003810:	2200      	movs	r2, #0
 8003812:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003814:	187b      	adds	r3, r7, r1
 8003816:	2100      	movs	r1, #0
 8003818:	0018      	movs	r0, r3
 800381a:	f001 ff6f 	bl	80056fc <HAL_RCC_ClockConfig>
 800381e:	1e03      	subs	r3, r0, #0
 8003820:	d001      	beq.n	8003826 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003822:	f000 fa0b 	bl	8003c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8003826:	003b      	movs	r3, r7
 8003828:	4a0b      	ldr	r2, [pc, #44]	; (8003858 <SystemClock_Config+0xd8>)
 800382a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800382c:	003b      	movs	r3, r7
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003832:	003b      	movs	r3, r7
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	0052      	lsls	r2, r2, #1
 8003838:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800383a:	003b      	movs	r3, r7
 800383c:	0018      	movs	r0, r3
 800383e:	f002 f88f 	bl	8005960 <HAL_RCCEx_PeriphCLKConfig>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d001      	beq.n	800384a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003846:	f000 f9f9 	bl	8003c3c <Error_Handler>
  }
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b015      	add	sp, #84	; 0x54
 8003850:	bd90      	pop	{r4, r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	40021000 	.word	0x40021000
 8003858:	00010020 	.word	0x00010020

0800385c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <MX_I2C1_Init+0x74>)
 8003862:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <MX_I2C1_Init+0x78>)
 8003864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <MX_I2C1_Init+0x74>)
 8003868:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <MX_I2C1_Init+0x7c>)
 800386a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <MX_I2C1_Init+0x74>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <MX_I2C1_Init+0x74>)
 8003874:	2201      	movs	r2, #1
 8003876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <MX_I2C1_Init+0x74>)
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <MX_I2C1_Init+0x74>)
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <MX_I2C1_Init+0x74>)
 8003886:	2200      	movs	r2, #0
 8003888:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <MX_I2C1_Init+0x74>)
 800388c:	2200      	movs	r2, #0
 800388e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <MX_I2C1_Init+0x74>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <MX_I2C1_Init+0x74>)
 8003898:	0018      	movs	r0, r3
 800389a:	f000 fe25 	bl	80044e8 <HAL_I2C_Init>
 800389e:	1e03      	subs	r3, r0, #0
 80038a0:	d001      	beq.n	80038a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80038a2:	f000 f9cb 	bl	8003c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <MX_I2C1_Init+0x74>)
 80038a8:	2100      	movs	r1, #0
 80038aa:	0018      	movs	r0, r3
 80038ac:	f001 fb66 	bl	8004f7c <HAL_I2CEx_ConfigAnalogFilter>
 80038b0:	1e03      	subs	r3, r0, #0
 80038b2:	d001      	beq.n	80038b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80038b4:	f000 f9c2 	bl	8003c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <MX_I2C1_Init+0x74>)
 80038ba:	2100      	movs	r1, #0
 80038bc:	0018      	movs	r0, r3
 80038be:	f001 fba9 	bl	8005014 <HAL_I2CEx_ConfigDigitalFilter>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80038c6:	f000 f9b9 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	200002a8 	.word	0x200002a8
 80038d4:	40005400 	.word	0x40005400
 80038d8:	2000090e 	.word	0x2000090e

080038dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	0018      	movs	r0, r3
 80038e6:	2314      	movs	r3, #20
 80038e8:	001a      	movs	r2, r3
 80038ea:	2100      	movs	r1, #0
 80038ec:	f003 fa18 	bl	8006d20 <memset>
  RTC_DateTypeDef sDate = {0};
 80038f0:	003b      	movs	r3, r7
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80038f6:	4b28      	ldr	r3, [pc, #160]	; (8003998 <MX_RTC_Init+0xbc>)
 80038f8:	4a28      	ldr	r2, [pc, #160]	; (800399c <MX_RTC_Init+0xc0>)
 80038fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80038fc:	4b26      	ldr	r3, [pc, #152]	; (8003998 <MX_RTC_Init+0xbc>)
 80038fe:	2200      	movs	r2, #0
 8003900:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003902:	4b25      	ldr	r3, [pc, #148]	; (8003998 <MX_RTC_Init+0xbc>)
 8003904:	227f      	movs	r2, #127	; 0x7f
 8003906:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <MX_RTC_Init+0xbc>)
 800390a:	22ff      	movs	r2, #255	; 0xff
 800390c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <MX_RTC_Init+0xbc>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003914:	4b20      	ldr	r3, [pc, #128]	; (8003998 <MX_RTC_Init+0xbc>)
 8003916:	2200      	movs	r2, #0
 8003918:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800391a:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <MX_RTC_Init+0xbc>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003920:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <MX_RTC_Init+0xbc>)
 8003922:	0018      	movs	r0, r3
 8003924:	f002 f8ea 	bl	8005afc <HAL_RTC_Init>
 8003928:	1e03      	subs	r3, r0, #0
 800392a:	d001      	beq.n	8003930 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800392c:	f000 f986 	bl	8003c3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 10;
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	220a      	movs	r2, #10
 800393a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 23;
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	2217      	movs	r2, #23
 8003940:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	2200      	movs	r2, #0
 8003946:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800394e:	1d39      	adds	r1, r7, #4
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <MX_RTC_Init+0xbc>)
 8003952:	2200      	movs	r2, #0
 8003954:	0018      	movs	r0, r3
 8003956:	f002 f965 	bl	8005c24 <HAL_RTC_SetTime>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d001      	beq.n	8003962 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800395e:	f000 f96d 	bl	8003c3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8003962:	003b      	movs	r3, r7
 8003964:	2203      	movs	r2, #3
 8003966:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 8003968:	003b      	movs	r3, r7
 800396a:	2205      	movs	r2, #5
 800396c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800396e:	003b      	movs	r3, r7
 8003970:	2201      	movs	r2, #1
 8003972:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003974:	003b      	movs	r3, r7
 8003976:	2200      	movs	r2, #0
 8003978:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800397a:	0039      	movs	r1, r7
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <MX_RTC_Init+0xbc>)
 800397e:	2200      	movs	r2, #0
 8003980:	0018      	movs	r0, r3
 8003982:	f002 fa69 	bl	8005e58 <HAL_RTC_SetDate>
 8003986:	1e03      	subs	r3, r0, #0
 8003988:	d001      	beq.n	800398e <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800398a:	f000 f957 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b006      	add	sp, #24
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	200002f4 	.word	0x200002f4
 800399c:	40002800 	.word	0x40002800

080039a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039a6:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <MX_SPI1_Init+0x78>)
 80039a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039ac:	2282      	movs	r2, #130	; 0x82
 80039ae:	0052      	lsls	r2, r2, #1
 80039b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039ba:	22e0      	movs	r2, #224	; 0xe0
 80039bc:	00d2      	lsls	r2, r2, #3
 80039be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039ce:	2280      	movs	r2, #128	; 0x80
 80039d0:	0092      	lsls	r2, r2, #2
 80039d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039d6:	2230      	movs	r2, #48	; 0x30
 80039d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039ee:	2207      	movs	r2, #7
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <MX_SPI1_Init+0x74>)
 80039fa:	2208      	movs	r2, #8
 80039fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <MX_SPI1_Init+0x74>)
 8003a00:	0018      	movs	r0, r3
 8003a02:	f002 fbb5 	bl	8006170 <HAL_SPI_Init>
 8003a06:	1e03      	subs	r3, r0, #0
 8003a08:	d001      	beq.n	8003a0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a0a:	f000 f917 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000314 	.word	0x20000314
 8003a18:	40013000 	.word	0x40013000

08003a1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b08d      	sub	sp, #52	; 0x34
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a22:	240c      	movs	r4, #12
 8003a24:	193b      	adds	r3, r7, r4
 8003a26:	0018      	movs	r0, r3
 8003a28:	2324      	movs	r3, #36	; 0x24
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	f003 f977 	bl	8006d20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	0018      	movs	r0, r3
 8003a36:	2308      	movs	r3, #8
 8003a38:	001a      	movs	r2, r3
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f003 f970 	bl	8006d20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003a42:	4a28      	ldr	r2, [pc, #160]	; (8003ae4 <MX_TIM1_Init+0xc8>)
 8003a44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a46:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a4c:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003a54:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <MX_TIM1_Init+0xcc>)
 8003a56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a58:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a6a:	0021      	movs	r1, r4
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2200      	movs	r2, #0
 8003a76:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2200      	movs	r2, #0
 8003a82:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	220f      	movs	r2, #15
 8003a88:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	2201      	movs	r2, #1
 8003a94:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	2200      	movs	r2, #0
 8003a9a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003aa2:	187a      	adds	r2, r7, r1
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f002 fee7 	bl	800687c <HAL_TIM_Encoder_Init>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003ab2:	f000 f8c3 	bl	8003c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ac2:	1d3a      	adds	r2, r7, #4
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <MX_TIM1_Init+0xc4>)
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f003 f8b3 	bl	8006c34 <HAL_TIMEx_MasterConfigSynchronization>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8003ad2:	f000 f8b3 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b00d      	add	sp, #52	; 0x34
 8003adc:	bd90      	pop	{r4, r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	20000378 	.word	0x20000378
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	0000ffff 	.word	0x0000ffff

08003aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b08b      	sub	sp, #44	; 0x2c
 8003af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af2:	2414      	movs	r4, #20
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	0018      	movs	r0, r3
 8003af8:	2314      	movs	r3, #20
 8003afa:	001a      	movs	r2, r3
 8003afc:	2100      	movs	r1, #0
 8003afe:	f003 f90f 	bl	8006d20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b02:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	4b48      	ldr	r3, [pc, #288]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	0309      	lsls	r1, r1, #12
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	615a      	str	r2, [r3, #20]
 8003b10:	4b45      	ldr	r3, [pc, #276]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	031b      	lsls	r3, r3, #12
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b1e:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	03c9      	lsls	r1, r1, #15
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	615a      	str	r2, [r3, #20]
 8003b2c:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	03db      	lsls	r3, r3, #15
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	0289      	lsls	r1, r1, #10
 8003b44:	430a      	orrs	r2, r1
 8003b46:	615a      	str	r2, [r3, #20]
 8003b48:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	029b      	lsls	r3, r3, #10
 8003b50:	4013      	ands	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b56:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b5c:	2180      	movs	r1, #128	; 0x80
 8003b5e:	02c9      	lsls	r1, r1, #11
 8003b60:	430a      	orrs	r2, r1
 8003b62:	615a      	str	r2, [r3, #20]
 8003b64:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <MX_GPIO_Init+0x13c>)
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	02db      	lsls	r3, r3, #11
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	482d      	ldr	r0, [pc, #180]	; (8003c2c <MX_GPIO_Init+0x140>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	f000 fc97 	bl	80044ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin
 8003b80:	492b      	ldr	r1, [pc, #172]	; (8003c30 <MX_GPIO_Init+0x144>)
 8003b82:	2390      	movs	r3, #144	; 0x90
 8003b84:	05db      	lsls	r3, r3, #23
 8003b86:	2200      	movs	r2, #0
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 fc90 	bl	80044ae <HAL_GPIO_WritePin>
                          |LCD_LIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	0192      	lsls	r2, r2, #6
 8003b94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b96:	193b      	adds	r3, r7, r4
 8003b98:	2201      	movs	r2, #1
 8003b9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	193b      	adds	r3, r7, r4
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba2:	193b      	adds	r3, r7, r4
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <MX_GPIO_Init+0x140>)
 8003bac:	0019      	movs	r1, r3
 8003bae:	0010      	movs	r0, r2
 8003bb0:	f000 faf0 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_RST_Pin LCD_CE_Pin LCD_DC_Pin
                           LCD_LIGHT_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <MX_GPIO_Init+0x144>)
 8003bb8:	601a      	str	r2, [r3, #0]
                          |LCD_LIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bba:	193b      	adds	r3, r7, r4
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	193b      	adds	r3, r7, r4
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	193b      	adds	r3, r7, r4
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bcc:	193a      	adds	r2, r7, r4
 8003bce:	2390      	movs	r3, #144	; 0x90
 8003bd0:	05db      	lsls	r3, r3, #23
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 fadd 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESCAPE_Pin ENTER_Pin */
  GPIO_InitStruct.Pin = ESCAPE_Pin|ENTER_Pin;
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	22c0      	movs	r2, #192	; 0xc0
 8003bde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be0:	193b      	adds	r3, r7, r4
 8003be2:	2200      	movs	r2, #0
 8003be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be6:	193b      	adds	r3, r7, r4
 8003be8:	2201      	movs	r2, #1
 8003bea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <MX_GPIO_Init+0x148>)
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	0010      	movs	r0, r2
 8003bf4:	f000 face 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_STATUS_Pin RTC_CLK_PIN*/
  GPIO_InitStruct.Pin = RTC_STATUS_Pin|RTC_CLK_Pin;
 8003bf8:	0021      	movs	r1, r4
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	2201      	movs	r2, #1
 8003c04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <MX_GPIO_Init+0x14c>)
 8003c16:	0019      	movs	r1, r3
 8003c18:	0010      	movs	r0, r2
 8003c1a:	f000 fabb 	bl	8004194 <HAL_GPIO_Init>

}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b00b      	add	sp, #44	; 0x2c
 8003c24:	bd90      	pop	{r4, r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	48000800 	.word	0x48000800
 8003c30:	00009c40 	.word	0x00009c40
 8003c34:	48001400 	.word	0x48001400
 8003c38:	48000400 	.word	0x48000400

08003c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c40:	b672      	cpsid	i
}
 8003c42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c44:	e7fe      	b.n	8003c44 <Error_Handler+0x8>
	...

08003c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_MspInit+0x44>)
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <HAL_MspInit+0x44>)
 8003c54:	2101      	movs	r1, #1
 8003c56:	430a      	orrs	r2, r1
 8003c58:	619a      	str	r2, [r3, #24]
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <HAL_MspInit+0x44>)
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4013      	ands	r3, r2
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_MspInit+0x44>)
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <HAL_MspInit+0x44>)
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	0549      	lsls	r1, r1, #21
 8003c70:	430a      	orrs	r2, r1
 8003c72:	61da      	str	r2, [r3, #28]
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_MspInit+0x44>)
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	055b      	lsls	r3, r3, #21
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b002      	add	sp, #8
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	40021000 	.word	0x40021000

08003c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b08b      	sub	sp, #44	; 0x2c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	2414      	movs	r4, #20
 8003c9a:	193b      	adds	r3, r7, r4
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	2314      	movs	r3, #20
 8003ca0:	001a      	movs	r2, r3
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	f003 f83c 	bl	8006d20 <memset>
  if(hi2c->Instance==I2C1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_I2C_MspInit+0x90>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d132      	bne.n	8003d18 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <HAL_I2C_MspInit+0x94>)
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_I2C_MspInit+0x94>)
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	02c9      	lsls	r1, r1, #11
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	615a      	str	r2, [r3, #20]
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <HAL_I2C_MspInit+0x94>)
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	02db      	lsls	r3, r3, #11
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB10     ------> I2C1_SCL
    PB11     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	22c0      	movs	r2, #192	; 0xc0
 8003cd2:	0112      	lsls	r2, r2, #4
 8003cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd6:	0021      	movs	r1, r4
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2212      	movs	r2, #18
 8003cdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	187b      	adds	r3, r7, r1
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	2201      	movs	r2, #1
 8003cee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <HAL_I2C_MspInit+0x98>)
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	0010      	movs	r0, r2
 8003cf8:	f000 fa4c 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_I2C_MspInit+0x94>)
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <HAL_I2C_MspInit+0x94>)
 8003d02:	2180      	movs	r1, #128	; 0x80
 8003d04:	0389      	lsls	r1, r1, #14
 8003d06:	430a      	orrs	r2, r1
 8003d08:	61da      	str	r2, [r3, #28]
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_I2C_MspInit+0x94>)
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	039b      	lsls	r3, r3, #14
 8003d12:	4013      	ands	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b00b      	add	sp, #44	; 0x2c
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	40005400 	.word	0x40005400
 8003d24:	40021000 	.word	0x40021000
 8003d28:	48000400 	.word	0x48000400

08003d2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a06      	ldr	r2, [pc, #24]	; (8003d54 <HAL_RTC_MspInit+0x28>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d106      	bne.n	8003d4c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RTC_MspInit+0x2c>)
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RTC_MspInit+0x2c>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0209      	lsls	r1, r1, #8
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40002800 	.word	0x40002800
 8003d58:	40021000 	.word	0x40021000

08003d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	b08b      	sub	sp, #44	; 0x2c
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	2414      	movs	r4, #20
 8003d66:	193b      	adds	r3, r7, r4
 8003d68:	0018      	movs	r0, r3
 8003d6a:	2314      	movs	r3, #20
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	2100      	movs	r1, #0
 8003d70:	f002 ffd6 	bl	8006d20 <memset>
  if(hspi->Instance==SPI1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <HAL_SPI_MspInit+0x90>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d132      	bne.n	8003de4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_SPI_MspInit+0x94>)
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <HAL_SPI_MspInit+0x94>)
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	0149      	lsls	r1, r1, #5
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	619a      	str	r2, [r3, #24]
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <HAL_SPI_MspInit+0x94>)
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	015b      	lsls	r3, r3, #5
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_SPI_MspInit+0x94>)
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <HAL_SPI_MspInit+0x94>)
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	0289      	lsls	r1, r1, #10
 8003da4:	430a      	orrs	r2, r1
 8003da6:	615a      	str	r2, [r3, #20]
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_SPI_MspInit+0x94>)
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003db6:	0021      	movs	r1, r4
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	22a0      	movs	r2, #160	; 0xa0
 8003dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	2203      	movs	r2, #3
 8003dce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd6:	187a      	adds	r2, r7, r1
 8003dd8:	2390      	movs	r3, #144	; 0x90
 8003dda:	05db      	lsls	r3, r3, #23
 8003ddc:	0011      	movs	r1, r2
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 f9d8 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b00b      	add	sp, #44	; 0x2c
 8003dea:	bd90      	pop	{r4, r7, pc}
 8003dec:	40013000 	.word	0x40013000
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b08b      	sub	sp, #44	; 0x2c
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	2414      	movs	r4, #20
 8003dfe:	193b      	adds	r3, r7, r4
 8003e00:	0018      	movs	r0, r3
 8003e02:	2314      	movs	r3, #20
 8003e04:	001a      	movs	r2, r3
 8003e06:	2100      	movs	r1, #0
 8003e08:	f002 ff8a 	bl	8006d20 <memset>
  if(htim_encoder->Instance==TIM1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_TIM_Encoder_MspInit+0x94>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d133      	bne.n	8003e7e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x98>)
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x98>)
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	0109      	lsls	r1, r1, #4
 8003e20:	430a      	orrs	r2, r1
 8003e22:	619a      	str	r2, [r3, #24]
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x98>)
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x98>)
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x98>)
 8003e38:	2180      	movs	r1, #128	; 0x80
 8003e3a:	0289      	lsls	r1, r1, #10
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	615a      	str	r2, [r3, #20]
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x98>)
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	029b      	lsls	r3, r3, #10
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	22c0      	movs	r2, #192	; 0xc0
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e56:	0021      	movs	r1, r4
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	2200      	movs	r2, #0
 8003e62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e64:	187b      	adds	r3, r7, r1
 8003e66:	2200      	movs	r2, #0
 8003e68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e70:	187a      	adds	r2, r7, r1
 8003e72:	2390      	movs	r3, #144	; 0x90
 8003e74:	05db      	lsls	r3, r3, #23
 8003e76:	0011      	movs	r1, r2
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 f98b 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b00b      	add	sp, #44	; 0x2c
 8003e84:	bd90      	pop	{r4, r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40021000 	.word	0x40021000

08003e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e94:	e7fe      	b.n	8003e94 <NMI_Handler+0x4>

08003e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e9a:	e7fe      	b.n	8003e9a <HardFault_Handler+0x4>

08003e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb4:	f000 f87a 	bl	8003fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ec8:	480d      	ldr	r0, [pc, #52]	; (8003f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ecc:	480d      	ldr	r0, [pc, #52]	; (8003f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ece:	490e      	ldr	r1, [pc, #56]	; (8003f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ed0:	4a0e      	ldr	r2, [pc, #56]	; (8003f0c <LoopForever+0xe>)
  movs r3, #0
 8003ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed4:	e002      	b.n	8003edc <LoopCopyDataInit>

08003ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eda:	3304      	adds	r3, #4

08003edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee0:	d3f9      	bcc.n	8003ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ee2:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ee4:	4c0b      	ldr	r4, [pc, #44]	; (8003f14 <LoopForever+0x16>)
  movs r3, #0
 8003ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ee8:	e001      	b.n	8003eee <LoopFillZerobss>

08003eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eec:	3204      	adds	r2, #4

08003eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef0:	d3fb      	bcc.n	8003eea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ef2:	f7ff ffe4 	bl	8003ebe <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003ef6:	f002 feef 	bl	8006cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003efa:	f7fc fa7b 	bl	80003f4 <main>

08003efe <LoopForever>:

LoopForever:
    b LoopForever
 8003efe:	e7fe      	b.n	8003efe <LoopForever>
  ldr   r0, =_estack
 8003f00:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f08:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8003f0c:	080073b0 	.word	0x080073b0
  ldr r2, =_sbss
 8003f10:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8003f14:	200003d0 	.word	0x200003d0

08003f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f18:	e7fe      	b.n	8003f18 <ADC1_IRQHandler>
	...

08003f1c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <HAL_Init+0x24>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_Init+0x24>)
 8003f26:	2110      	movs	r1, #16
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003f2c:	2003      	movs	r0, #3
 8003f2e:	f000 f809 	bl	8003f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f32:	f7ff fe89 	bl	8003c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	40022000 	.word	0x40022000

08003f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <HAL_InitTick+0x5c>)
 8003f4e:	681c      	ldr	r4, [r3, #0]
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <HAL_InitTick+0x60>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	0019      	movs	r1, r3
 8003f56:	23fa      	movs	r3, #250	; 0xfa
 8003f58:	0098      	lsls	r0, r3, #2
 8003f5a:	f7fc f8d5 	bl	8000108 <__udivsi3>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	0019      	movs	r1, r3
 8003f62:	0020      	movs	r0, r4
 8003f64:	f7fc f8d0 	bl	8000108 <__udivsi3>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 f905 	bl	800417a <HAL_SYSTICK_Config>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e00f      	b.n	8003f98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d80b      	bhi.n	8003f96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	2301      	movs	r3, #1
 8003f82:	425b      	negs	r3, r3
 8003f84:	2200      	movs	r2, #0
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 f8e2 	bl	8004150 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_InitTick+0x64>)
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e000      	b.n	8003f98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b003      	add	sp, #12
 8003f9e:	bd90      	pop	{r4, r7, pc}
 8003fa0:	20000280 	.word	0x20000280
 8003fa4:	20000288 	.word	0x20000288
 8003fa8:	20000284 	.word	0x20000284

08003fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_IncTick+0x1c>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	001a      	movs	r2, r3
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_IncTick+0x20>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	18d2      	adds	r2, r2, r3
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_IncTick+0x20>)
 8003fbe:	601a      	str	r2, [r3, #0]
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	20000288 	.word	0x20000288
 8003fcc:	200003cc 	.word	0x200003cc

08003fd0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fd4:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <HAL_GetTick+0x10>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	200003cc 	.word	0x200003cc

08003fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7ff fff0 	bl	8003fd0 <HAL_GetTick>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	d005      	beq.n	800400a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <HAL_Delay+0x44>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	001a      	movs	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	189b      	adds	r3, r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	f7ff ffe0 	bl	8003fd0 <HAL_GetTick>
 8004010:	0002      	movs	r2, r0
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	429a      	cmp	r2, r3
 800401a:	d8f7      	bhi.n	800400c <HAL_Delay+0x28>
  {
  }
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b004      	add	sp, #16
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	20000288 	.word	0x20000288

0800402c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	0002      	movs	r2, r0
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	1dfb      	adds	r3, r7, #7
 8004038:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800403a:	1dfb      	adds	r3, r7, #7
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b7f      	cmp	r3, #127	; 0x7f
 8004040:	d828      	bhi.n	8004094 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004042:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <__NVIC_SetPriority+0xd4>)
 8004044:	1dfb      	adds	r3, r7, #7
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	b25b      	sxtb	r3, r3
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	33c0      	adds	r3, #192	; 0xc0
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	589b      	ldr	r3, [r3, r2]
 8004052:	1dfa      	adds	r2, r7, #7
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	0011      	movs	r1, r2
 8004058:	2203      	movs	r2, #3
 800405a:	400a      	ands	r2, r1
 800405c:	00d2      	lsls	r2, r2, #3
 800405e:	21ff      	movs	r1, #255	; 0xff
 8004060:	4091      	lsls	r1, r2
 8004062:	000a      	movs	r2, r1
 8004064:	43d2      	mvns	r2, r2
 8004066:	401a      	ands	r2, r3
 8004068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	22ff      	movs	r2, #255	; 0xff
 8004070:	401a      	ands	r2, r3
 8004072:	1dfb      	adds	r3, r7, #7
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	0018      	movs	r0, r3
 8004078:	2303      	movs	r3, #3
 800407a:	4003      	ands	r3, r0
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004080:	481f      	ldr	r0, [pc, #124]	; (8004100 <__NVIC_SetPriority+0xd4>)
 8004082:	1dfb      	adds	r3, r7, #7
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b25b      	sxtb	r3, r3
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	430a      	orrs	r2, r1
 800408c:	33c0      	adds	r3, #192	; 0xc0
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004092:	e031      	b.n	80040f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004094:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <__NVIC_SetPriority+0xd8>)
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	0019      	movs	r1, r3
 800409c:	230f      	movs	r3, #15
 800409e:	400b      	ands	r3, r1
 80040a0:	3b08      	subs	r3, #8
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	3306      	adds	r3, #6
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	3304      	adds	r3, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1dfa      	adds	r2, r7, #7
 80040b0:	7812      	ldrb	r2, [r2, #0]
 80040b2:	0011      	movs	r1, r2
 80040b4:	2203      	movs	r2, #3
 80040b6:	400a      	ands	r2, r1
 80040b8:	00d2      	lsls	r2, r2, #3
 80040ba:	21ff      	movs	r1, #255	; 0xff
 80040bc:	4091      	lsls	r1, r2
 80040be:	000a      	movs	r2, r1
 80040c0:	43d2      	mvns	r2, r2
 80040c2:	401a      	ands	r2, r3
 80040c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	401a      	ands	r2, r3
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	0018      	movs	r0, r3
 80040d4:	2303      	movs	r3, #3
 80040d6:	4003      	ands	r3, r0
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040dc:	4809      	ldr	r0, [pc, #36]	; (8004104 <__NVIC_SetPriority+0xd8>)
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	001c      	movs	r4, r3
 80040e4:	230f      	movs	r3, #15
 80040e6:	4023      	ands	r3, r4
 80040e8:	3b08      	subs	r3, #8
 80040ea:	089b      	lsrs	r3, r3, #2
 80040ec:	430a      	orrs	r2, r1
 80040ee:	3306      	adds	r3, #6
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	18c3      	adds	r3, r0, r3
 80040f4:	3304      	adds	r3, #4
 80040f6:	601a      	str	r2, [r3, #0]
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b003      	add	sp, #12
 80040fe:	bd90      	pop	{r4, r7, pc}
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1e5a      	subs	r2, r3, #1
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	045b      	lsls	r3, r3, #17
 8004118:	429a      	cmp	r2, r3
 800411a:	d301      	bcc.n	8004120 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411c:	2301      	movs	r3, #1
 800411e:	e010      	b.n	8004142 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <SysTick_Config+0x44>)
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	3a01      	subs	r2, #1
 8004126:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004128:	2301      	movs	r3, #1
 800412a:	425b      	negs	r3, r3
 800412c:	2103      	movs	r1, #3
 800412e:	0018      	movs	r0, r3
 8004130:	f7ff ff7c 	bl	800402c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <SysTick_Config+0x44>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <SysTick_Config+0x44>)
 800413c:	2207      	movs	r2, #7
 800413e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004140:	2300      	movs	r3, #0
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	b002      	add	sp, #8
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	e000e010 	.word	0xe000e010

08004150 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	210f      	movs	r1, #15
 800415c:	187b      	adds	r3, r7, r1
 800415e:	1c02      	adds	r2, r0, #0
 8004160:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	187b      	adds	r3, r7, r1
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b25b      	sxtb	r3, r3
 800416a:	0011      	movs	r1, r2
 800416c:	0018      	movs	r0, r3
 800416e:	f7ff ff5d 	bl	800402c <__NVIC_SetPriority>
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff ffbf 	bl	8004108 <SysTick_Config>
 800418a:	0003      	movs	r3, r0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a2:	e14f      	b.n	8004444 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4091      	lsls	r1, r2
 80041ae:	000a      	movs	r2, r1
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d100      	bne.n	80041bc <HAL_GPIO_Init+0x28>
 80041ba:	e140      	b.n	800443e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2203      	movs	r2, #3
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d005      	beq.n	80041d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d130      	bne.n	8004236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	2203      	movs	r2, #3
 80041e0:	409a      	lsls	r2, r3
 80041e2:	0013      	movs	r3, r2
 80041e4:	43da      	mvns	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	409a      	lsls	r2, r3
 80041f6:	0013      	movs	r3, r2
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800420a:	2201      	movs	r2, #1
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	43da      	mvns	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	2201      	movs	r2, #1
 8004222:	401a      	ands	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	409a      	lsls	r2, r3
 8004228:	0013      	movs	r3, r2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2203      	movs	r2, #3
 800423c:	4013      	ands	r3, r2
 800423e:	2b03      	cmp	r3, #3
 8004240:	d017      	beq.n	8004272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	409a      	lsls	r2, r3
 8004250:	0013      	movs	r3, r2
 8004252:	43da      	mvns	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	409a      	lsls	r2, r3
 8004264:	0013      	movs	r3, r2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2203      	movs	r2, #3
 8004278:	4013      	ands	r3, r2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d123      	bne.n	80042c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	58d3      	ldr	r3, [r2, r3]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2207      	movs	r2, #7
 8004290:	4013      	ands	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	409a      	lsls	r2, r3
 8004298:	0013      	movs	r3, r2
 800429a:	43da      	mvns	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2107      	movs	r1, #7
 80042aa:	400b      	ands	r3, r1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	409a      	lsls	r2, r3
 80042b0:	0013      	movs	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	6939      	ldr	r1, [r7, #16]
 80042c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	409a      	lsls	r2, r3
 80042d4:	0013      	movs	r3, r2
 80042d6:	43da      	mvns	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2203      	movs	r2, #3
 80042e4:	401a      	ands	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	0013      	movs	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	23c0      	movs	r3, #192	; 0xc0
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	4013      	ands	r3, r2
 8004304:	d100      	bne.n	8004308 <HAL_GPIO_Init+0x174>
 8004306:	e09a      	b.n	800443e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004308:	4b54      	ldr	r3, [pc, #336]	; (800445c <HAL_GPIO_Init+0x2c8>)
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_GPIO_Init+0x2c8>)
 800430e:	2101      	movs	r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	619a      	str	r2, [r3, #24]
 8004314:	4b51      	ldr	r3, [pc, #324]	; (800445c <HAL_GPIO_Init+0x2c8>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2201      	movs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004320:	4a4f      	ldr	r2, [pc, #316]	; (8004460 <HAL_GPIO_Init+0x2cc>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	089b      	lsrs	r3, r3, #2
 8004326:	3302      	adds	r3, #2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	589b      	ldr	r3, [r3, r2]
 800432c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2203      	movs	r2, #3
 8004332:	4013      	ands	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	220f      	movs	r2, #15
 8004338:	409a      	lsls	r2, r3
 800433a:	0013      	movs	r3, r2
 800433c:	43da      	mvns	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	2390      	movs	r3, #144	; 0x90
 8004348:	05db      	lsls	r3, r3, #23
 800434a:	429a      	cmp	r2, r3
 800434c:	d013      	beq.n	8004376 <HAL_GPIO_Init+0x1e2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a44      	ldr	r2, [pc, #272]	; (8004464 <HAL_GPIO_Init+0x2d0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00d      	beq.n	8004372 <HAL_GPIO_Init+0x1de>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a43      	ldr	r2, [pc, #268]	; (8004468 <HAL_GPIO_Init+0x2d4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d007      	beq.n	800436e <HAL_GPIO_Init+0x1da>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a42      	ldr	r2, [pc, #264]	; (800446c <HAL_GPIO_Init+0x2d8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_GPIO_Init+0x1d6>
 8004366:	2303      	movs	r3, #3
 8004368:	e006      	b.n	8004378 <HAL_GPIO_Init+0x1e4>
 800436a:	2305      	movs	r3, #5
 800436c:	e004      	b.n	8004378 <HAL_GPIO_Init+0x1e4>
 800436e:	2302      	movs	r3, #2
 8004370:	e002      	b.n	8004378 <HAL_GPIO_Init+0x1e4>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_GPIO_Init+0x1e4>
 8004376:	2300      	movs	r3, #0
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	2103      	movs	r1, #3
 800437c:	400a      	ands	r2, r1
 800437e:	0092      	lsls	r2, r2, #2
 8004380:	4093      	lsls	r3, r2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004388:	4935      	ldr	r1, [pc, #212]	; (8004460 <HAL_GPIO_Init+0x2cc>)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	3302      	adds	r3, #2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004396:	4b36      	ldr	r3, [pc, #216]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	43da      	mvns	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	025b      	lsls	r3, r3, #9
 80043ae:	4013      	ands	r3, r2
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043ba:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	43da      	mvns	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	029b      	lsls	r3, r3, #10
 80043d8:	4013      	ands	r3, r2
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	43da      	mvns	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	035b      	lsls	r3, r3, #13
 8004402:	4013      	ands	r3, r2
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800440e:	4b18      	ldr	r3, [pc, #96]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004414:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	43da      	mvns	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	039b      	lsls	r3, r3, #14
 800442c:	4013      	ands	r3, r2
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	3301      	adds	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	40da      	lsrs	r2, r3
 800444c:	1e13      	subs	r3, r2, #0
 800444e:	d000      	beq.n	8004452 <HAL_GPIO_Init+0x2be>
 8004450:	e6a8      	b.n	80041a4 <HAL_GPIO_Init+0x10>
  } 
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b006      	add	sp, #24
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	40010000 	.word	0x40010000
 8004464:	48000400 	.word	0x48000400
 8004468:	48000800 	.word	0x48000800
 800446c:	48000c00 	.word	0x48000c00
 8004470:	40010400 	.word	0x40010400

08004474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	000a      	movs	r2, r1
 800447e:	1cbb      	adds	r3, r7, #2
 8004480:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	1cba      	adds	r2, r7, #2
 8004488:	8812      	ldrh	r2, [r2, #0]
 800448a:	4013      	ands	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800448e:	230f      	movs	r3, #15
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e003      	b.n	80044a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004498:	230f      	movs	r3, #15
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80044a0:	230f      	movs	r3, #15
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	781b      	ldrb	r3, [r3, #0]
  }
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b004      	add	sp, #16
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	0008      	movs	r0, r1
 80044b8:	0011      	movs	r1, r2
 80044ba:	1cbb      	adds	r3, r7, #2
 80044bc:	1c02      	adds	r2, r0, #0
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	1c7b      	adds	r3, r7, #1
 80044c2:	1c0a      	adds	r2, r1, #0
 80044c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044c6:	1c7b      	adds	r3, r7, #1
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044ce:	1cbb      	adds	r3, r7, #2
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044d6:	e003      	b.n	80044e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044d8:	1cbb      	adds	r3, r7, #2
 80044da:	881a      	ldrh	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e082      	b.n	8004600 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2241      	movs	r2, #65	; 0x41
 80044fe:	5c9b      	ldrb	r3, [r3, r2]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2240      	movs	r2, #64	; 0x40
 800450a:	2100      	movs	r1, #0
 800450c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff fbbd 	bl	8003c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2241      	movs	r2, #65	; 0x41
 800451a:	2124      	movs	r1, #36	; 0x24
 800451c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2101      	movs	r1, #1
 800452a:	438a      	bics	r2, r1
 800452c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4934      	ldr	r1, [pc, #208]	; (8004608 <HAL_I2C_Init+0x120>)
 8004538:	400a      	ands	r2, r1
 800453a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4931      	ldr	r1, [pc, #196]	; (800460c <HAL_I2C_Init+0x124>)
 8004548:	400a      	ands	r2, r1
 800454a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d108      	bne.n	8004566 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2180      	movs	r1, #128	; 0x80
 800455e:	0209      	lsls	r1, r1, #8
 8004560:	430a      	orrs	r2, r1
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	e007      	b.n	8004576 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2184      	movs	r1, #132	; 0x84
 8004570:	0209      	lsls	r1, r1, #8
 8004572:	430a      	orrs	r2, r1
 8004574:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d104      	bne.n	8004588 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	491f      	ldr	r1, [pc, #124]	; (8004610 <HAL_I2C_Init+0x128>)
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	491a      	ldr	r1, [pc, #104]	; (800460c <HAL_I2C_Init+0x124>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69d9      	ldr	r1, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1a      	ldr	r2, [r3, #32]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2101      	movs	r1, #1
 80045de:	430a      	orrs	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2241      	movs	r2, #65	; 0x41
 80045ec:	2120      	movs	r1, #32
 80045ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2242      	movs	r2, #66	; 0x42
 80045fa:	2100      	movs	r1, #0
 80045fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b002      	add	sp, #8
 8004606:	bd80      	pop	{r7, pc}
 8004608:	f0ffffff 	.word	0xf0ffffff
 800460c:	ffff7fff 	.word	0xffff7fff
 8004610:	02008000 	.word	0x02008000

08004614 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	000c      	movs	r4, r1
 800461e:	0010      	movs	r0, r2
 8004620:	0019      	movs	r1, r3
 8004622:	230a      	movs	r3, #10
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	1c22      	adds	r2, r4, #0
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	2308      	movs	r3, #8
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	1c02      	adds	r2, r0, #0
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	1dbb      	adds	r3, r7, #6
 8004634:	1c0a      	adds	r2, r1, #0
 8004636:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2241      	movs	r2, #65	; 0x41
 800463c:	5c9b      	ldrb	r3, [r3, r2]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b20      	cmp	r3, #32
 8004642:	d000      	beq.n	8004646 <HAL_I2C_Mem_Write+0x32>
 8004644:	e10c      	b.n	8004860 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_I2C_Mem_Write+0x42>
 800464c:	232c      	movs	r3, #44	; 0x2c
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2280      	movs	r2, #128	; 0x80
 800465a:	0092      	lsls	r2, r2, #2
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0ff      	b.n	8004862 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2240      	movs	r2, #64	; 0x40
 8004666:	5c9b      	ldrb	r3, [r3, r2]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_I2C_Mem_Write+0x5c>
 800466c:	2302      	movs	r3, #2
 800466e:	e0f8      	b.n	8004862 <HAL_I2C_Mem_Write+0x24e>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2240      	movs	r2, #64	; 0x40
 8004674:	2101      	movs	r1, #1
 8004676:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004678:	f7ff fcaa 	bl	8003fd0 <HAL_GetTick>
 800467c:	0003      	movs	r3, r0
 800467e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	0219      	lsls	r1, r3, #8
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2319      	movs	r3, #25
 800468c:	2201      	movs	r2, #1
 800468e:	f000 fb0b 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004692:	1e03      	subs	r3, r0, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0e3      	b.n	8004862 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2241      	movs	r2, #65	; 0x41
 800469e:	2121      	movs	r1, #33	; 0x21
 80046a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2242      	movs	r2, #66	; 0x42
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	222c      	movs	r2, #44	; 0x2c
 80046ba:	18ba      	adds	r2, r7, r2
 80046bc:	8812      	ldrh	r2, [r2, #0]
 80046be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046c6:	1dbb      	adds	r3, r7, #6
 80046c8:	881c      	ldrh	r4, [r3, #0]
 80046ca:	2308      	movs	r3, #8
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	881a      	ldrh	r2, [r3, #0]
 80046d0:	230a      	movs	r3, #10
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	8819      	ldrh	r1, [r3, #0]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	0023      	movs	r3, r4
 80046e2:	f000 f9f9 	bl	8004ad8 <I2C_RequestMemoryWrite>
 80046e6:	1e03      	subs	r3, r0, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	2100      	movs	r1, #0
 80046f0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0b5      	b.n	8004862 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2bff      	cmp	r3, #255	; 0xff
 80046fe:	d911      	bls.n	8004724 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	22ff      	movs	r2, #255	; 0xff
 8004704:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470a:	b2da      	uxtb	r2, r3
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	045c      	lsls	r4, r3, #17
 8004710:	230a      	movs	r3, #10
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	8819      	ldrh	r1, [r3, #0]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	2300      	movs	r3, #0
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	0023      	movs	r3, r4
 800471e:	f000 fbf7 	bl	8004f10 <I2C_TransferConfig>
 8004722:	e012      	b.n	800474a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	b2da      	uxtb	r2, r3
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	049c      	lsls	r4, r3, #18
 8004738:	230a      	movs	r3, #10
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	8819      	ldrh	r1, [r3, #0]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	2300      	movs	r3, #0
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	0023      	movs	r3, r4
 8004746:	f000 fbe3 	bl	8004f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fae8 	bl	8004d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004756:	1e03      	subs	r3, r0, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e081      	b.n	8004862 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	781a      	ldrb	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03a      	beq.n	800480e <HAL_I2C_Mem_Write+0x1fa>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479c:	2b00      	cmp	r3, #0
 800479e:	d136      	bne.n	800480e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	0013      	movs	r3, r2
 80047aa:	2200      	movs	r2, #0
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	f000 fa7b 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 80047b2:	1e03      	subs	r3, r0, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e053      	b.n	8004862 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2bff      	cmp	r3, #255	; 0xff
 80047c2:	d911      	bls.n	80047e8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	22ff      	movs	r2, #255	; 0xff
 80047c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	045c      	lsls	r4, r3, #17
 80047d4:	230a      	movs	r3, #10
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	8819      	ldrh	r1, [r3, #0]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	2300      	movs	r3, #0
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	0023      	movs	r3, r4
 80047e2:	f000 fb95 	bl	8004f10 <I2C_TransferConfig>
 80047e6:	e012      	b.n	800480e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	049c      	lsls	r4, r3, #18
 80047fc:	230a      	movs	r3, #10
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	8819      	ldrh	r1, [r3, #0]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	2300      	movs	r3, #0
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	0023      	movs	r3, r4
 800480a:	f000 fb81 	bl	8004f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d198      	bne.n	800474a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fac0 	bl	8004da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e01a      	b.n	8004862 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2220      	movs	r2, #32
 8004832:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	490b      	ldr	r1, [pc, #44]	; (800486c <HAL_I2C_Mem_Write+0x258>)
 8004840:	400a      	ands	r2, r1
 8004842:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2241      	movs	r2, #65	; 0x41
 8004848:	2120      	movs	r1, #32
 800484a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2242      	movs	r2, #66	; 0x42
 8004850:	2100      	movs	r1, #0
 8004852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	e000      	b.n	8004862 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004860:	2302      	movs	r3, #2
  }
}
 8004862:	0018      	movs	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	b007      	add	sp, #28
 8004868:	bd90      	pop	{r4, r7, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	fe00e800 	.word	0xfe00e800

08004870 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	000c      	movs	r4, r1
 800487a:	0010      	movs	r0, r2
 800487c:	0019      	movs	r1, r3
 800487e:	230a      	movs	r3, #10
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	1c22      	adds	r2, r4, #0
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	2308      	movs	r3, #8
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	1c02      	adds	r2, r0, #0
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	1dbb      	adds	r3, r7, #6
 8004890:	1c0a      	adds	r2, r1, #0
 8004892:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2241      	movs	r2, #65	; 0x41
 8004898:	5c9b      	ldrb	r3, [r3, r2]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b20      	cmp	r3, #32
 800489e:	d000      	beq.n	80048a2 <HAL_I2C_Mem_Read+0x32>
 80048a0:	e110      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <HAL_I2C_Mem_Read+0x42>
 80048a8:	232c      	movs	r3, #44	; 0x2c
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	0092      	lsls	r2, r2, #2
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e103      	b.n	8004ac6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2240      	movs	r2, #64	; 0x40
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_I2C_Mem_Read+0x5c>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e0fc      	b.n	8004ac6 <HAL_I2C_Mem_Read+0x256>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2240      	movs	r2, #64	; 0x40
 80048d0:	2101      	movs	r1, #1
 80048d2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048d4:	f7ff fb7c 	bl	8003fd0 <HAL_GetTick>
 80048d8:	0003      	movs	r3, r0
 80048da:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	0219      	lsls	r1, r3, #8
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2319      	movs	r3, #25
 80048e8:	2201      	movs	r2, #1
 80048ea:	f000 f9dd 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 80048ee:	1e03      	subs	r3, r0, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0e7      	b.n	8004ac6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2241      	movs	r2, #65	; 0x41
 80048fa:	2122      	movs	r1, #34	; 0x22
 80048fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2242      	movs	r2, #66	; 0x42
 8004902:	2140      	movs	r1, #64	; 0x40
 8004904:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	222c      	movs	r2, #44	; 0x2c
 8004916:	18ba      	adds	r2, r7, r2
 8004918:	8812      	ldrh	r2, [r2, #0]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004922:	1dbb      	adds	r3, r7, #6
 8004924:	881c      	ldrh	r4, [r3, #0]
 8004926:	2308      	movs	r3, #8
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	230a      	movs	r3, #10
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	8819      	ldrh	r1, [r3, #0]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	0023      	movs	r3, r4
 800493e:	f000 f92f 	bl	8004ba0 <I2C_RequestMemoryRead>
 8004942:	1e03      	subs	r3, r0, #0
 8004944:	d005      	beq.n	8004952 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2240      	movs	r2, #64	; 0x40
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0b9      	b.n	8004ac6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2bff      	cmp	r3, #255	; 0xff
 800495a:	d911      	bls.n	8004980 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	22ff      	movs	r2, #255	; 0xff
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	b2da      	uxtb	r2, r3
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	045c      	lsls	r4, r3, #17
 800496c:	230a      	movs	r3, #10
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	8819      	ldrh	r1, [r3, #0]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	4b56      	ldr	r3, [pc, #344]	; (8004ad0 <HAL_I2C_Mem_Read+0x260>)
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	0023      	movs	r3, r4
 800497a:	f000 fac9 	bl	8004f10 <I2C_TransferConfig>
 800497e:	e012      	b.n	80049a6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498e:	b2da      	uxtb	r2, r3
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	049c      	lsls	r4, r3, #18
 8004994:	230a      	movs	r3, #10
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	8819      	ldrh	r1, [r3, #0]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	4b4c      	ldr	r3, [pc, #304]	; (8004ad0 <HAL_I2C_Mem_Read+0x260>)
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	0023      	movs	r3, r4
 80049a2:	f000 fab5 	bl	8004f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	0013      	movs	r3, r2
 80049b0:	2200      	movs	r2, #0
 80049b2:	2104      	movs	r1, #4
 80049b4:	f000 f978 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 80049b8:	1e03      	subs	r3, r0, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e082      	b.n	8004ac6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d03a      	beq.n	8004a72 <HAL_I2C_Mem_Read+0x202>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d136      	bne.n	8004a72 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	0013      	movs	r3, r2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2180      	movs	r1, #128	; 0x80
 8004a12:	f000 f949 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004a16:	1e03      	subs	r3, r0, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e053      	b.n	8004ac6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2bff      	cmp	r3, #255	; 0xff
 8004a26:	d911      	bls.n	8004a4c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	22ff      	movs	r2, #255	; 0xff
 8004a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	045c      	lsls	r4, r3, #17
 8004a38:	230a      	movs	r3, #10
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	8819      	ldrh	r1, [r3, #0]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	2300      	movs	r3, #0
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	0023      	movs	r3, r4
 8004a46:	f000 fa63 	bl	8004f10 <I2C_TransferConfig>
 8004a4a:	e012      	b.n	8004a72 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	049c      	lsls	r4, r3, #18
 8004a60:	230a      	movs	r3, #10
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	8819      	ldrh	r1, [r3, #0]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	0023      	movs	r3, r4
 8004a6e:	f000 fa4f 	bl	8004f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d194      	bne.n	80049a6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f000 f98e 	bl	8004da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a88:	1e03      	subs	r3, r0, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e01a      	b.n	8004ac6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2220      	movs	r2, #32
 8004a96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	490c      	ldr	r1, [pc, #48]	; (8004ad4 <HAL_I2C_Mem_Read+0x264>)
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2241      	movs	r2, #65	; 0x41
 8004aac:	2120      	movs	r1, #32
 8004aae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2242      	movs	r2, #66	; 0x42
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	2100      	movs	r1, #0
 8004abe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b007      	add	sp, #28
 8004acc:	bd90      	pop	{r4, r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	80002400 	.word	0x80002400
 8004ad4:	fe00e800 	.word	0xfe00e800

08004ad8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ad8:	b5b0      	push	{r4, r5, r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	000c      	movs	r4, r1
 8004ae2:	0010      	movs	r0, r2
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	250a      	movs	r5, #10
 8004ae8:	197b      	adds	r3, r7, r5
 8004aea:	1c22      	adds	r2, r4, #0
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	2308      	movs	r3, #8
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	1c02      	adds	r2, r0, #0
 8004af4:	801a      	strh	r2, [r3, #0]
 8004af6:	1dbb      	adds	r3, r7, #6
 8004af8:	1c0a      	adds	r2, r1, #0
 8004afa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004afc:	1dbb      	adds	r3, r7, #6
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	045c      	lsls	r4, r3, #17
 8004b06:	197b      	adds	r3, r7, r5
 8004b08:	8819      	ldrh	r1, [r3, #0]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	4b23      	ldr	r3, [pc, #140]	; (8004b9c <I2C_RequestMemoryWrite+0xc4>)
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	0023      	movs	r3, r4
 8004b12:	f000 f9fd 	bl	8004f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	6a39      	ldr	r1, [r7, #32]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 f902 	bl	8004d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e033      	b.n	8004b92 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b2a:	1dbb      	adds	r3, r7, #6
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d107      	bne.n	8004b42 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b32:	2308      	movs	r3, #8
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b40:	e019      	b.n	8004b76 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b42:	2308      	movs	r3, #8
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	6a39      	ldr	r1, [r7, #32]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f000 f8e3 	bl	8004d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b60:	1e03      	subs	r3, r0, #0
 8004b62:	d001      	beq.n	8004b68 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e014      	b.n	8004b92 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b68:	2308      	movs	r3, #8
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b76:	6a3a      	ldr	r2, [r7, #32]
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	0013      	movs	r3, r2
 8004b80:	2200      	movs	r2, #0
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	f000 f890 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004b88:	1e03      	subs	r3, r0, #0
 8004b8a:	d001      	beq.n	8004b90 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	0018      	movs	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b004      	add	sp, #16
 8004b98:	bdb0      	pop	{r4, r5, r7, pc}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	80002000 	.word	0x80002000

08004ba0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ba0:	b5b0      	push	{r4, r5, r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	000c      	movs	r4, r1
 8004baa:	0010      	movs	r0, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	250a      	movs	r5, #10
 8004bb0:	197b      	adds	r3, r7, r5
 8004bb2:	1c22      	adds	r2, r4, #0
 8004bb4:	801a      	strh	r2, [r3, #0]
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	1c02      	adds	r2, r0, #0
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	1dbb      	adds	r3, r7, #6
 8004bc0:	1c0a      	adds	r2, r1, #0
 8004bc2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004bc4:	1dbb      	adds	r3, r7, #6
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	197b      	adds	r3, r7, r5
 8004bcc:	8819      	ldrh	r1, [r3, #0]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	4b23      	ldr	r3, [pc, #140]	; (8004c60 <I2C_RequestMemoryRead+0xc0>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f000 f99b 	bl	8004f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bdc:	6a39      	ldr	r1, [r7, #32]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 f8a0 	bl	8004d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004be6:	1e03      	subs	r3, r0, #0
 8004be8:	d001      	beq.n	8004bee <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e033      	b.n	8004c56 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bee:	1dbb      	adds	r3, r7, #6
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d107      	bne.n	8004c06 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
 8004c04:	e019      	b.n	8004c3a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c06:	2308      	movs	r3, #8
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1a:	6a39      	ldr	r1, [r7, #32]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 f881 	bl	8004d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d001      	beq.n	8004c2c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e014      	b.n	8004c56 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3a:	6a3a      	ldr	r2, [r7, #32]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	0013      	movs	r3, r2
 8004c44:	2200      	movs	r2, #0
 8004c46:	2140      	movs	r1, #64	; 0x40
 8004c48:	f000 f82e 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	1e03      	subs	r3, r0, #0
 8004c4e:	d001      	beq.n	8004c54 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b004      	add	sp, #16
 8004c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	80002000 	.word	0x80002000

08004c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2202      	movs	r2, #2
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d103      	bne.n	8004c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d007      	beq.n	8004ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	619a      	str	r2, [r3, #24]
  }
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b002      	add	sp, #8
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	1dfb      	adds	r3, r7, #7
 8004cb6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb8:	e021      	b.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	d01e      	beq.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc0:	f7ff f986 	bl	8003fd0 <HAL_GetTick>
 8004cc4:	0002      	movs	r2, r0
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d113      	bne.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	2220      	movs	r2, #32
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2241      	movs	r2, #65	; 0x41
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2242      	movs	r2, #66	; 0x42
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2240      	movs	r2, #64	; 0x40
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e00f      	b.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	4013      	ands	r3, r2
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	425a      	negs	r2, r3
 8004d0e:	4153      	adcs	r3, r2
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	001a      	movs	r2, r3
 8004d14:	1dfb      	adds	r3, r7, #7
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d0ce      	beq.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	0018      	movs	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b004      	add	sp, #16
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d32:	e02b      	b.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f000 f86e 	bl	8004e1c <I2C_IsAcknowledgeFailed>
 8004d40:	1e03      	subs	r3, r0, #0
 8004d42:	d001      	beq.n	8004d48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e029      	b.n	8004d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	d01e      	beq.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4e:	f7ff f93f 	bl	8003fd0 <HAL_GetTick>
 8004d52:	0002      	movs	r2, r0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d302      	bcc.n	8004d64 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d113      	bne.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	2220      	movs	r2, #32
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2241      	movs	r2, #65	; 0x41
 8004d74:	2120      	movs	r1, #32
 8004d76:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2242      	movs	r2, #66	; 0x42
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2240      	movs	r2, #64	; 0x40
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e007      	b.n	8004d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2202      	movs	r2, #2
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d1cc      	bne.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b004      	add	sp, #16
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004db0:	e028      	b.n	8004e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 f82f 	bl	8004e1c <I2C_IsAcknowledgeFailed>
 8004dbe:	1e03      	subs	r3, r0, #0
 8004dc0:	d001      	beq.n	8004dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e026      	b.n	8004e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7ff f903 	bl	8003fd0 <HAL_GetTick>
 8004dca:	0002      	movs	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d113      	bne.n	8004e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	2220      	movs	r2, #32
 8004de2:	431a      	orrs	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2241      	movs	r2, #65	; 0x41
 8004dec:	2120      	movs	r1, #32
 8004dee:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2242      	movs	r2, #66	; 0x42
 8004df4:	2100      	movs	r1, #0
 8004df6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2240      	movs	r2, #64	; 0x40
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e007      	b.n	8004e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d1cf      	bne.n	8004db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b004      	add	sp, #16
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	2210      	movs	r2, #16
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d164      	bne.n	8004f00 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	049b      	lsls	r3, r3, #18
 8004e40:	401a      	ands	r2, r3
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	049b      	lsls	r3, r3, #18
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d02b      	beq.n	8004ea2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2180      	movs	r1, #128	; 0x80
 8004e56:	01c9      	lsls	r1, r1, #7
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e5c:	e021      	b.n	8004ea2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3301      	adds	r3, #1
 8004e62:	d01e      	beq.n	8004ea2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e64:	f7ff f8b4 	bl	8003fd0 <HAL_GetTick>
 8004e68:	0002      	movs	r2, r0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <I2C_IsAcknowledgeFailed+0x5e>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d113      	bne.n	8004ea2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	2220      	movs	r2, #32
 8004e80:	431a      	orrs	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2241      	movs	r2, #65	; 0x41
 8004e8a:	2120      	movs	r1, #32
 8004e8c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2242      	movs	r2, #66	; 0x42
 8004e92:	2100      	movs	r1, #0
 8004e94:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2240      	movs	r2, #64	; 0x40
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e02f      	b.n	8004f02 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d1d6      	bne.n	8004e5e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2210      	movs	r2, #16
 8004eb6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7ff fece 	bl	8004c64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	490e      	ldr	r1, [pc, #56]	; (8004f0c <I2C_IsAcknowledgeFailed+0xf0>)
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004edc:	2204      	movs	r2, #4
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2241      	movs	r2, #65	; 0x41
 8004ee8:	2120      	movs	r1, #32
 8004eea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2242      	movs	r2, #66	; 0x42
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	2100      	movs	r1, #0
 8004efa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	fe00e800 	.word	0xfe00e800

08004f10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	0008      	movs	r0, r1
 8004f1a:	0011      	movs	r1, r2
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	240a      	movs	r4, #10
 8004f20:	193b      	adds	r3, r7, r4
 8004f22:	1c02      	adds	r2, r0, #0
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	2009      	movs	r0, #9
 8004f28:	183b      	adds	r3, r7, r0
 8004f2a:	1c0a      	adds	r2, r1, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	0d51      	lsrs	r1, r2, #21
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	00d2      	lsls	r2, r2, #3
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	490e      	ldr	r1, [pc, #56]	; (8004f78 <I2C_TransferConfig+0x68>)
 8004f40:	430a      	orrs	r2, r1
 8004f42:	43d2      	mvns	r2, r2
 8004f44:	401a      	ands	r2, r3
 8004f46:	0011      	movs	r1, r2
 8004f48:	193b      	adds	r3, r7, r4
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	059b      	lsls	r3, r3, #22
 8004f4e:	0d9a      	lsrs	r2, r3, #22
 8004f50:	183b      	adds	r3, r7, r0
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	0418      	lsls	r0, r3, #16
 8004f56:	23ff      	movs	r3, #255	; 0xff
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	4003      	ands	r3, r0
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b005      	add	sp, #20
 8004f74:	bd90      	pop	{r4, r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	03ff63ff 	.word	0x03ff63ff

08004f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2241      	movs	r2, #65	; 0x41
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d138      	bne.n	8005004 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2240      	movs	r2, #64	; 0x40
 8004f96:	5c9b      	ldrb	r3, [r3, r2]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e032      	b.n	8005006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2240      	movs	r2, #64	; 0x40
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2241      	movs	r2, #65	; 0x41
 8004fac:	2124      	movs	r1, #36	; 0x24
 8004fae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2101      	movs	r1, #1
 8004fbc:	438a      	bics	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4911      	ldr	r1, [pc, #68]	; (8005010 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004fcc:	400a      	ands	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6819      	ldr	r1, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2101      	movs	r1, #1
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2241      	movs	r2, #65	; 0x41
 8004ff4:	2120      	movs	r1, #32
 8004ff6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2240      	movs	r2, #64	; 0x40
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e000      	b.n	8005006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
  }
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b002      	add	sp, #8
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	ffffefff 	.word	0xffffefff

08005014 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2241      	movs	r2, #65	; 0x41
 8005022:	5c9b      	ldrb	r3, [r3, r2]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b20      	cmp	r3, #32
 8005028:	d139      	bne.n	800509e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2240      	movs	r2, #64	; 0x40
 800502e:	5c9b      	ldrb	r3, [r3, r2]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005034:	2302      	movs	r3, #2
 8005036:	e033      	b.n	80050a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	2101      	movs	r1, #1
 800503e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2241      	movs	r2, #65	; 0x41
 8005044:	2124      	movs	r1, #36	; 0x24
 8005046:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2101      	movs	r1, #1
 8005054:	438a      	bics	r2, r1
 8005056:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2101      	movs	r1, #1
 8005086:	430a      	orrs	r2, r1
 8005088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2241      	movs	r2, #65	; 0x41
 800508e:	2120      	movs	r1, #32
 8005090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2240      	movs	r2, #64	; 0x40
 8005096:	2100      	movs	r1, #0
 8005098:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b004      	add	sp, #16
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	fffff0ff 	.word	0xfffff0ff

080050ac <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80050b6:	2180      	movs	r1, #128	; 0x80
 80050b8:	0049      	lsls	r1, r1, #1
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40007000 	.word	0x40007000

080050c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e301      	b.n	80056de <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	4013      	ands	r3, r2
 80050e2:	d100      	bne.n	80050e6 <HAL_RCC_OscConfig+0x1e>
 80050e4:	e08d      	b.n	8005202 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80050e6:	4bc3      	ldr	r3, [pc, #780]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	220c      	movs	r2, #12
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d00e      	beq.n	8005110 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050f2:	4bc0      	ldr	r3, [pc, #768]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	220c      	movs	r2, #12
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d116      	bne.n	800512c <HAL_RCC_OscConfig+0x64>
 80050fe:	4bbd      	ldr	r3, [pc, #756]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	025b      	lsls	r3, r3, #9
 8005106:	401a      	ands	r2, r3
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	025b      	lsls	r3, r3, #9
 800510c:	429a      	cmp	r2, r3
 800510e:	d10d      	bne.n	800512c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	4bb8      	ldr	r3, [pc, #736]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	029b      	lsls	r3, r3, #10
 8005118:	4013      	ands	r3, r2
 800511a:	d100      	bne.n	800511e <HAL_RCC_OscConfig+0x56>
 800511c:	e070      	b.n	8005200 <HAL_RCC_OscConfig+0x138>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d000      	beq.n	8005128 <HAL_RCC_OscConfig+0x60>
 8005126:	e06b      	b.n	8005200 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e2d8      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x7c>
 8005134:	4baf      	ldr	r3, [pc, #700]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4bae      	ldr	r3, [pc, #696]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	0249      	lsls	r1, r1, #9
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e02f      	b.n	80051a4 <HAL_RCC_OscConfig+0xdc>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10c      	bne.n	8005166 <HAL_RCC_OscConfig+0x9e>
 800514c:	4ba9      	ldr	r3, [pc, #676]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4ba8      	ldr	r3, [pc, #672]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005152:	49a9      	ldr	r1, [pc, #676]	; (80053f8 <HAL_RCC_OscConfig+0x330>)
 8005154:	400a      	ands	r2, r1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	4ba6      	ldr	r3, [pc, #664]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4ba5      	ldr	r3, [pc, #660]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800515e:	49a7      	ldr	r1, [pc, #668]	; (80053fc <HAL_RCC_OscConfig+0x334>)
 8005160:	400a      	ands	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e01e      	b.n	80051a4 <HAL_RCC_OscConfig+0xdc>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b05      	cmp	r3, #5
 800516c:	d10e      	bne.n	800518c <HAL_RCC_OscConfig+0xc4>
 800516e:	4ba1      	ldr	r3, [pc, #644]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4ba0      	ldr	r3, [pc, #640]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005174:	2180      	movs	r1, #128	; 0x80
 8005176:	02c9      	lsls	r1, r1, #11
 8005178:	430a      	orrs	r2, r1
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	4b9d      	ldr	r3, [pc, #628]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b9c      	ldr	r3, [pc, #624]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005182:	2180      	movs	r1, #128	; 0x80
 8005184:	0249      	lsls	r1, r1, #9
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0xdc>
 800518c:	4b99      	ldr	r3, [pc, #612]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b98      	ldr	r3, [pc, #608]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005192:	4999      	ldr	r1, [pc, #612]	; (80053f8 <HAL_RCC_OscConfig+0x330>)
 8005194:	400a      	ands	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	4b96      	ldr	r3, [pc, #600]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b95      	ldr	r3, [pc, #596]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800519e:	4997      	ldr	r1, [pc, #604]	; (80053fc <HAL_RCC_OscConfig+0x334>)
 80051a0:	400a      	ands	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d014      	beq.n	80051d6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fe ff10 	bl	8003fd0 <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b6:	f7fe ff0b 	bl	8003fd0 <HAL_GetTick>
 80051ba:	0002      	movs	r2, r0
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b64      	cmp	r3, #100	; 0x64
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e28a      	b.n	80056de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c8:	4b8a      	ldr	r3, [pc, #552]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	029b      	lsls	r3, r3, #10
 80051d0:	4013      	ands	r3, r2
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0xee>
 80051d4:	e015      	b.n	8005202 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d6:	f7fe fefb 	bl	8003fd0 <HAL_GetTick>
 80051da:	0003      	movs	r3, r0
 80051dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e0:	f7fe fef6 	bl	8003fd0 <HAL_GetTick>
 80051e4:	0002      	movs	r2, r0
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e275      	b.n	80056de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f2:	4b80      	ldr	r3, [pc, #512]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	4013      	ands	r3, r2
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x118>
 80051fe:	e000      	b.n	8005202 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2202      	movs	r2, #2
 8005208:	4013      	ands	r3, r2
 800520a:	d100      	bne.n	800520e <HAL_RCC_OscConfig+0x146>
 800520c:	e069      	b.n	80052e2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800520e:	4b79      	ldr	r3, [pc, #484]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	220c      	movs	r2, #12
 8005214:	4013      	ands	r3, r2
 8005216:	d00b      	beq.n	8005230 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005218:	4b76      	ldr	r3, [pc, #472]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	220c      	movs	r2, #12
 800521e:	4013      	ands	r3, r2
 8005220:	2b08      	cmp	r3, #8
 8005222:	d11c      	bne.n	800525e <HAL_RCC_OscConfig+0x196>
 8005224:	4b73      	ldr	r3, [pc, #460]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	025b      	lsls	r3, r3, #9
 800522c:	4013      	ands	r3, r2
 800522e:	d116      	bne.n	800525e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005230:	4b70      	ldr	r3, [pc, #448]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2202      	movs	r2, #2
 8005236:	4013      	ands	r3, r2
 8005238:	d005      	beq.n	8005246 <HAL_RCC_OscConfig+0x17e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d001      	beq.n	8005246 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e24b      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005246:	4b6b      	ldr	r3, [pc, #428]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	22f8      	movs	r2, #248	; 0xf8
 800524c:	4393      	bics	r3, r2
 800524e:	0019      	movs	r1, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	00da      	lsls	r2, r3, #3
 8005256:	4b67      	ldr	r3, [pc, #412]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005258:	430a      	orrs	r2, r1
 800525a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525c:	e041      	b.n	80052e2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d024      	beq.n	80052b0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005266:	4b63      	ldr	r3, [pc, #396]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b62      	ldr	r3, [pc, #392]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800526c:	2101      	movs	r1, #1
 800526e:	430a      	orrs	r2, r1
 8005270:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7fe fead 	bl	8003fd0 <HAL_GetTick>
 8005276:	0003      	movs	r3, r0
 8005278:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800527c:	f7fe fea8 	bl	8003fd0 <HAL_GetTick>
 8005280:	0002      	movs	r2, r0
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e227      	b.n	80056de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b59      	ldr	r3, [pc, #356]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d0f1      	beq.n	800527c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005298:	4b56      	ldr	r3, [pc, #344]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	22f8      	movs	r2, #248	; 0xf8
 800529e:	4393      	bics	r3, r2
 80052a0:	0019      	movs	r1, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	00da      	lsls	r2, r3, #3
 80052a8:	4b52      	ldr	r3, [pc, #328]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e018      	b.n	80052e2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052b0:	4b50      	ldr	r3, [pc, #320]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b4f      	ldr	r3, [pc, #316]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80052b6:	2101      	movs	r1, #1
 80052b8:	438a      	bics	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe fe88 	bl	8003fd0 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052c6:	f7fe fe83 	bl	8003fd0 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e202      	b.n	80056de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052d8:	4b46      	ldr	r3, [pc, #280]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2202      	movs	r2, #2
 80052de:	4013      	ands	r3, r2
 80052e0:	d1f1      	bne.n	80052c6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2208      	movs	r2, #8
 80052e8:	4013      	ands	r3, r2
 80052ea:	d036      	beq.n	800535a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052f4:	4b3f      	ldr	r3, [pc, #252]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80052f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f8:	4b3e      	ldr	r3, [pc, #248]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80052fa:	2101      	movs	r1, #1
 80052fc:	430a      	orrs	r2, r1
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005300:	f7fe fe66 	bl	8003fd0 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800530a:	f7fe fe61 	bl	8003fd0 <HAL_GetTick>
 800530e:	0002      	movs	r2, r0
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e1e0      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531c:	4b35      	ldr	r3, [pc, #212]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2202      	movs	r2, #2
 8005322:	4013      	ands	r3, r2
 8005324:	d0f1      	beq.n	800530a <HAL_RCC_OscConfig+0x242>
 8005326:	e018      	b.n	800535a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005328:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800532a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800532c:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800532e:	2101      	movs	r1, #1
 8005330:	438a      	bics	r2, r1
 8005332:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005334:	f7fe fe4c 	bl	8003fd0 <HAL_GetTick>
 8005338:	0003      	movs	r3, r0
 800533a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800533e:	f7fe fe47 	bl	8003fd0 <HAL_GetTick>
 8005342:	0002      	movs	r2, r0
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e1c6      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2202      	movs	r2, #2
 8005356:	4013      	ands	r3, r2
 8005358:	d1f1      	bne.n	800533e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2204      	movs	r2, #4
 8005360:	4013      	ands	r3, r2
 8005362:	d100      	bne.n	8005366 <HAL_RCC_OscConfig+0x29e>
 8005364:	e0b4      	b.n	80054d0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005366:	201f      	movs	r0, #31
 8005368:	183b      	adds	r3, r7, r0
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	055b      	lsls	r3, r3, #21
 8005376:	4013      	ands	r3, r2
 8005378:	d110      	bne.n	800539c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537a:	4b1e      	ldr	r3, [pc, #120]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	0549      	lsls	r1, r1, #21
 8005384:	430a      	orrs	r2, r1
 8005386:	61da      	str	r2, [r3, #28]
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	055b      	lsls	r3, r3, #21
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005396:	183b      	adds	r3, r7, r0
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539c:	4b18      	ldr	r3, [pc, #96]	; (8005400 <HAL_RCC_OscConfig+0x338>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4013      	ands	r3, r2
 80053a6:	d11a      	bne.n	80053de <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <HAL_RCC_OscConfig+0x338>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4b14      	ldr	r3, [pc, #80]	; (8005400 <HAL_RCC_OscConfig+0x338>)
 80053ae:	2180      	movs	r1, #128	; 0x80
 80053b0:	0049      	lsls	r1, r1, #1
 80053b2:	430a      	orrs	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b6:	f7fe fe0b 	bl	8003fd0 <HAL_GetTick>
 80053ba:	0003      	movs	r3, r0
 80053bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c0:	f7fe fe06 	bl	8003fd0 <HAL_GetTick>
 80053c4:	0002      	movs	r2, r0
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	; 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e185      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_OscConfig+0x338>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4013      	ands	r3, r2
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10e      	bne.n	8005404 <HAL_RCC_OscConfig+0x33c>
 80053e6:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80053e8:	6a1a      	ldr	r2, [r3, #32]
 80053ea:	4b02      	ldr	r3, [pc, #8]	; (80053f4 <HAL_RCC_OscConfig+0x32c>)
 80053ec:	2101      	movs	r1, #1
 80053ee:	430a      	orrs	r2, r1
 80053f0:	621a      	str	r2, [r3, #32]
 80053f2:	e035      	b.n	8005460 <HAL_RCC_OscConfig+0x398>
 80053f4:	40021000 	.word	0x40021000
 80053f8:	fffeffff 	.word	0xfffeffff
 80053fc:	fffbffff 	.word	0xfffbffff
 8005400:	40007000 	.word	0x40007000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10c      	bne.n	8005426 <HAL_RCC_OscConfig+0x35e>
 800540c:	4bb6      	ldr	r3, [pc, #728]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	4bb5      	ldr	r3, [pc, #724]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005412:	2101      	movs	r1, #1
 8005414:	438a      	bics	r2, r1
 8005416:	621a      	str	r2, [r3, #32]
 8005418:	4bb3      	ldr	r3, [pc, #716]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	4bb2      	ldr	r3, [pc, #712]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800541e:	2104      	movs	r1, #4
 8005420:	438a      	bics	r2, r1
 8005422:	621a      	str	r2, [r3, #32]
 8005424:	e01c      	b.n	8005460 <HAL_RCC_OscConfig+0x398>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b05      	cmp	r3, #5
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0x380>
 800542e:	4bae      	ldr	r3, [pc, #696]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	4bad      	ldr	r3, [pc, #692]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005434:	2104      	movs	r1, #4
 8005436:	430a      	orrs	r2, r1
 8005438:	621a      	str	r2, [r3, #32]
 800543a:	4bab      	ldr	r3, [pc, #684]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800543c:	6a1a      	ldr	r2, [r3, #32]
 800543e:	4baa      	ldr	r3, [pc, #680]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005440:	2101      	movs	r1, #1
 8005442:	430a      	orrs	r2, r1
 8005444:	621a      	str	r2, [r3, #32]
 8005446:	e00b      	b.n	8005460 <HAL_RCC_OscConfig+0x398>
 8005448:	4ba7      	ldr	r3, [pc, #668]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	4ba6      	ldr	r3, [pc, #664]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800544e:	2101      	movs	r1, #1
 8005450:	438a      	bics	r2, r1
 8005452:	621a      	str	r2, [r3, #32]
 8005454:	4ba4      	ldr	r3, [pc, #656]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	4ba3      	ldr	r3, [pc, #652]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800545a:	2104      	movs	r1, #4
 800545c:	438a      	bics	r2, r1
 800545e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d014      	beq.n	8005492 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005468:	f7fe fdb2 	bl	8003fd0 <HAL_GetTick>
 800546c:	0003      	movs	r3, r0
 800546e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	e009      	b.n	8005486 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fe fdad 	bl	8003fd0 <HAL_GetTick>
 8005476:	0002      	movs	r2, r0
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	4a9b      	ldr	r2, [pc, #620]	; (80056ec <HAL_RCC_OscConfig+0x624>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e12b      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005486:	4b98      	ldr	r3, [pc, #608]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	2202      	movs	r2, #2
 800548c:	4013      	ands	r3, r2
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0x3aa>
 8005490:	e013      	b.n	80054ba <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005492:	f7fe fd9d 	bl	8003fd0 <HAL_GetTick>
 8005496:	0003      	movs	r3, r0
 8005498:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800549a:	e009      	b.n	80054b0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800549c:	f7fe fd98 	bl	8003fd0 <HAL_GetTick>
 80054a0:	0002      	movs	r2, r0
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	4a91      	ldr	r2, [pc, #580]	; (80056ec <HAL_RCC_OscConfig+0x624>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e116      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b0:	4b8d      	ldr	r3, [pc, #564]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	2202      	movs	r2, #2
 80054b6:	4013      	ands	r3, r2
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054ba:	231f      	movs	r3, #31
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d105      	bne.n	80054d0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c4:	4b88      	ldr	r3, [pc, #544]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	4b87      	ldr	r3, [pc, #540]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80054ca:	4989      	ldr	r1, [pc, #548]	; (80056f0 <HAL_RCC_OscConfig+0x628>)
 80054cc:	400a      	ands	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2210      	movs	r2, #16
 80054d6:	4013      	ands	r3, r2
 80054d8:	d063      	beq.n	80055a2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d12a      	bne.n	8005538 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80054e2:	4b81      	ldr	r3, [pc, #516]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80054e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e6:	4b80      	ldr	r3, [pc, #512]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80054e8:	2104      	movs	r1, #4
 80054ea:	430a      	orrs	r2, r1
 80054ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80054ee:	4b7e      	ldr	r3, [pc, #504]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80054f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f2:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80054f4:	2101      	movs	r1, #1
 80054f6:	430a      	orrs	r2, r1
 80054f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054fa:	f7fe fd69 	bl	8003fd0 <HAL_GetTick>
 80054fe:	0003      	movs	r3, r0
 8005500:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005504:	f7fe fd64 	bl	8003fd0 <HAL_GetTick>
 8005508:	0002      	movs	r2, r0
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e0e3      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005516:	4b74      	ldr	r3, [pc, #464]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551a:	2202      	movs	r2, #2
 800551c:	4013      	ands	r3, r2
 800551e:	d0f1      	beq.n	8005504 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005520:	4b71      	ldr	r3, [pc, #452]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005524:	22f8      	movs	r2, #248	; 0xf8
 8005526:	4393      	bics	r3, r2
 8005528:	0019      	movs	r1, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	00da      	lsls	r2, r3, #3
 8005530:	4b6d      	ldr	r3, [pc, #436]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005532:	430a      	orrs	r2, r1
 8005534:	635a      	str	r2, [r3, #52]	; 0x34
 8005536:	e034      	b.n	80055a2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	3305      	adds	r3, #5
 800553e:	d111      	bne.n	8005564 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005540:	4b69      	ldr	r3, [pc, #420]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005544:	4b68      	ldr	r3, [pc, #416]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005546:	2104      	movs	r1, #4
 8005548:	438a      	bics	r2, r1
 800554a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800554c:	4b66      	ldr	r3, [pc, #408]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	22f8      	movs	r2, #248	; 0xf8
 8005552:	4393      	bics	r3, r2
 8005554:	0019      	movs	r1, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	00da      	lsls	r2, r3, #3
 800555c:	4b62      	ldr	r3, [pc, #392]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800555e:	430a      	orrs	r2, r1
 8005560:	635a      	str	r2, [r3, #52]	; 0x34
 8005562:	e01e      	b.n	80055a2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005564:	4b60      	ldr	r3, [pc, #384]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005568:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800556a:	2104      	movs	r1, #4
 800556c:	430a      	orrs	r2, r1
 800556e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005570:	4b5d      	ldr	r3, [pc, #372]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005574:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005576:	2101      	movs	r1, #1
 8005578:	438a      	bics	r2, r1
 800557a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557c:	f7fe fd28 	bl	8003fd0 <HAL_GetTick>
 8005580:	0003      	movs	r3, r0
 8005582:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005586:	f7fe fd23 	bl	8003fd0 <HAL_GetTick>
 800558a:	0002      	movs	r2, r0
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e0a2      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005598:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800559a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559c:	2202      	movs	r2, #2
 800559e:	4013      	ands	r3, r2
 80055a0:	d1f1      	bne.n	8005586 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d100      	bne.n	80055ac <HAL_RCC_OscConfig+0x4e4>
 80055aa:	e097      	b.n	80056dc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055ac:	4b4e      	ldr	r3, [pc, #312]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	220c      	movs	r2, #12
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d100      	bne.n	80055ba <HAL_RCC_OscConfig+0x4f2>
 80055b8:	e06b      	b.n	8005692 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d14c      	bne.n	800565c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c2:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b48      	ldr	r3, [pc, #288]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80055c8:	494a      	ldr	r1, [pc, #296]	; (80056f4 <HAL_RCC_OscConfig+0x62c>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ce:	f7fe fcff 	bl	8003fd0 <HAL_GetTick>
 80055d2:	0003      	movs	r3, r0
 80055d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fe fcfa 	bl	8003fd0 <HAL_GetTick>
 80055dc:	0002      	movs	r2, r0
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e079      	b.n	80056de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ea:	4b3f      	ldr	r3, [pc, #252]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	049b      	lsls	r3, r3, #18
 80055f2:	4013      	ands	r3, r2
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f6:	4b3c      	ldr	r3, [pc, #240]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	220f      	movs	r2, #15
 80055fc:	4393      	bics	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	4b38      	ldr	r3, [pc, #224]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005606:	430a      	orrs	r2, r1
 8005608:	62da      	str	r2, [r3, #44]	; 0x2c
 800560a:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4a3a      	ldr	r2, [pc, #232]	; (80056f8 <HAL_RCC_OscConfig+0x630>)
 8005610:	4013      	ands	r3, r2
 8005612:	0019      	movs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	431a      	orrs	r2, r3
 800561e:	4b32      	ldr	r3, [pc, #200]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005624:	4b30      	ldr	r3, [pc, #192]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800562a:	2180      	movs	r1, #128	; 0x80
 800562c:	0449      	lsls	r1, r1, #17
 800562e:	430a      	orrs	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005632:	f7fe fccd 	bl	8003fd0 <HAL_GetTick>
 8005636:	0003      	movs	r3, r0
 8005638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800563c:	f7fe fcc8 	bl	8003fd0 <HAL_GetTick>
 8005640:	0002      	movs	r2, r0
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e047      	b.n	80056de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800564e:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	049b      	lsls	r3, r3, #18
 8005656:	4013      	ands	r3, r2
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x574>
 800565a:	e03f      	b.n	80056dc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565c:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005662:	4924      	ldr	r1, [pc, #144]	; (80056f4 <HAL_RCC_OscConfig+0x62c>)
 8005664:	400a      	ands	r2, r1
 8005666:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005668:	f7fe fcb2 	bl	8003fd0 <HAL_GetTick>
 800566c:	0003      	movs	r3, r0
 800566e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005672:	f7fe fcad 	bl	8003fd0 <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e02c      	b.n	80056de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005684:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	049b      	lsls	r3, r3, #18
 800568c:	4013      	ands	r3, r2
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x5aa>
 8005690:	e024      	b.n	80056dc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e01f      	b.n	80056de <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80056a4:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_RCC_OscConfig+0x620>)
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	025b      	lsls	r3, r3, #9
 80056b0:	401a      	ands	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d10e      	bne.n	80056d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	220f      	movs	r2, #15
 80056be:	401a      	ands	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	23f0      	movs	r3, #240	; 0xf0
 80056cc:	039b      	lsls	r3, r3, #14
 80056ce:	401a      	ands	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b008      	add	sp, #32
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	40021000 	.word	0x40021000
 80056ec:	00001388 	.word	0x00001388
 80056f0:	efffffff 	.word	0xefffffff
 80056f4:	feffffff 	.word	0xfeffffff
 80056f8:	ffc2ffff 	.word	0xffc2ffff

080056fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0b3      	b.n	8005878 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005710:	4b5b      	ldr	r3, [pc, #364]	; (8005880 <HAL_RCC_ClockConfig+0x184>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2201      	movs	r2, #1
 8005716:	4013      	ands	r3, r2
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d911      	bls.n	8005742 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571e:	4b58      	ldr	r3, [pc, #352]	; (8005880 <HAL_RCC_ClockConfig+0x184>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2201      	movs	r2, #1
 8005724:	4393      	bics	r3, r2
 8005726:	0019      	movs	r1, r3
 8005728:	4b55      	ldr	r3, [pc, #340]	; (8005880 <HAL_RCC_ClockConfig+0x184>)
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005730:	4b53      	ldr	r3, [pc, #332]	; (8005880 <HAL_RCC_ClockConfig+0x184>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	4013      	ands	r3, r2
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d001      	beq.n	8005742 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e09a      	b.n	8005878 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2202      	movs	r2, #2
 8005748:	4013      	ands	r3, r2
 800574a:	d015      	beq.n	8005778 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2204      	movs	r2, #4
 8005752:	4013      	ands	r3, r2
 8005754:	d006      	beq.n	8005764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005756:	4b4b      	ldr	r3, [pc, #300]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	4b4a      	ldr	r3, [pc, #296]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 800575c:	21e0      	movs	r1, #224	; 0xe0
 800575e:	00c9      	lsls	r1, r1, #3
 8005760:	430a      	orrs	r2, r1
 8005762:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005764:	4b47      	ldr	r3, [pc, #284]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	22f0      	movs	r2, #240	; 0xf0
 800576a:	4393      	bics	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	4b44      	ldr	r3, [pc, #272]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2201      	movs	r2, #1
 800577e:	4013      	ands	r3, r2
 8005780:	d040      	beq.n	8005804 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578a:	4b3e      	ldr	r3, [pc, #248]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	029b      	lsls	r3, r3, #10
 8005792:	4013      	ands	r3, r2
 8005794:	d114      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e06e      	b.n	8005878 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d107      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a2:	4b38      	ldr	r3, [pc, #224]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	049b      	lsls	r3, r3, #18
 80057aa:	4013      	ands	r3, r2
 80057ac:	d108      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e062      	b.n	8005878 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2202      	movs	r2, #2
 80057b8:	4013      	ands	r3, r2
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e05b      	b.n	8005878 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057c0:	4b30      	ldr	r3, [pc, #192]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4393      	bics	r3, r2
 80057c8:	0019      	movs	r1, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4b2d      	ldr	r3, [pc, #180]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057d4:	f7fe fbfc 	bl	8003fd0 <HAL_GetTick>
 80057d8:	0003      	movs	r3, r0
 80057da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057dc:	e009      	b.n	80057f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057de:	f7fe fbf7 	bl	8003fd0 <HAL_GetTick>
 80057e2:	0002      	movs	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	4a27      	ldr	r2, [pc, #156]	; (8005888 <HAL_RCC_ClockConfig+0x18c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e042      	b.n	8005878 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	220c      	movs	r2, #12
 80057f8:	401a      	ands	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	429a      	cmp	r2, r3
 8005802:	d1ec      	bne.n	80057de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005804:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <HAL_RCC_ClockConfig+0x184>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2201      	movs	r2, #1
 800580a:	4013      	ands	r3, r2
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d211      	bcs.n	8005836 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCC_ClockConfig+0x184>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2201      	movs	r2, #1
 8005818:	4393      	bics	r3, r2
 800581a:	0019      	movs	r1, r3
 800581c:	4b18      	ldr	r3, [pc, #96]	; (8005880 <HAL_RCC_ClockConfig+0x184>)
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <HAL_RCC_ClockConfig+0x184>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2201      	movs	r2, #1
 800582a:	4013      	ands	r3, r2
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d001      	beq.n	8005836 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e020      	b.n	8005878 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2204      	movs	r2, #4
 800583c:	4013      	ands	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a11      	ldr	r2, [pc, #68]	; (800588c <HAL_RCC_ClockConfig+0x190>)
 8005846:	4013      	ands	r3, r2
 8005848:	0019      	movs	r1, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005854:	f000 f820 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 8005858:	0001      	movs	r1, r0
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <HAL_RCC_ClockConfig+0x188>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	220f      	movs	r2, #15
 8005862:	4013      	ands	r3, r2
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <HAL_RCC_ClockConfig+0x194>)
 8005866:	5cd3      	ldrb	r3, [r2, r3]
 8005868:	000a      	movs	r2, r1
 800586a:	40da      	lsrs	r2, r3
 800586c:	4b09      	ldr	r3, [pc, #36]	; (8005894 <HAL_RCC_ClockConfig+0x198>)
 800586e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005870:	2003      	movs	r0, #3
 8005872:	f7fe fb67 	bl	8003f44 <HAL_InitTick>
  
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	b004      	add	sp, #16
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40022000 	.word	0x40022000
 8005884:	40021000 	.word	0x40021000
 8005888:	00001388 	.word	0x00001388
 800588c:	fffff8ff 	.word	0xfffff8ff
 8005890:	08007398 	.word	0x08007398
 8005894:	20000280 	.word	0x20000280

08005898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b08f      	sub	sp, #60	; 0x3c
 800589c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800589e:	2314      	movs	r3, #20
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80058a6:	c313      	stmia	r3!, {r0, r1, r4}
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	4a29      	ldr	r2, [pc, #164]	; (8005954 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80058b2:	c313      	stmia	r3!, {r0, r1, r4}
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058bc:	2300      	movs	r3, #0
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c0:	2300      	movs	r3, #0
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
 80058c4:	2300      	movs	r3, #0
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80058cc:	4b22      	ldr	r3, [pc, #136]	; (8005958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	220c      	movs	r2, #12
 80058d6:	4013      	ands	r3, r2
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d002      	beq.n	80058e2 <HAL_RCC_GetSysClockFreq+0x4a>
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d003      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x50>
 80058e0:	e02d      	b.n	800593e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058e2:	4b1e      	ldr	r3, [pc, #120]	; (800595c <HAL_RCC_GetSysClockFreq+0xc4>)
 80058e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058e6:	e02d      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	0c9b      	lsrs	r3, r3, #18
 80058ec:	220f      	movs	r2, #15
 80058ee:	4013      	ands	r3, r2
 80058f0:	2214      	movs	r2, #20
 80058f2:	18ba      	adds	r2, r7, r2
 80058f4:	5cd3      	ldrb	r3, [r2, r3]
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80058f8:	4b17      	ldr	r3, [pc, #92]	; (8005958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	220f      	movs	r2, #15
 80058fe:	4013      	ands	r3, r2
 8005900:	1d3a      	adds	r2, r7, #4
 8005902:	5cd3      	ldrb	r3, [r2, r3]
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	025b      	lsls	r3, r3, #9
 800590c:	4013      	ands	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005912:	4812      	ldr	r0, [pc, #72]	; (800595c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005914:	f7fa fbf8 	bl	8000108 <__udivsi3>
 8005918:	0003      	movs	r3, r0
 800591a:	001a      	movs	r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	4353      	muls	r3, r2
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
 8005922:	e009      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005926:	000a      	movs	r2, r1
 8005928:	0152      	lsls	r2, r2, #5
 800592a:	1a52      	subs	r2, r2, r1
 800592c:	0193      	lsls	r3, r2, #6
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	185b      	adds	r3, r3, r1
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800593c:	e002      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005942:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005946:	0018      	movs	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b00f      	add	sp, #60	; 0x3c
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	08007024 	.word	0x08007024
 8005954:	08007034 	.word	0x08007034
 8005958:	40021000 	.word	0x40021000
 800595c:	007a1200 	.word	0x007a1200

08005960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	025b      	lsls	r3, r3, #9
 8005978:	4013      	ands	r3, r2
 800597a:	d100      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800597c:	e08e      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800597e:	2017      	movs	r0, #23
 8005980:	183b      	adds	r3, r7, r0
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005986:	4b57      	ldr	r3, [pc, #348]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005988:	69da      	ldr	r2, [r3, #28]
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	055b      	lsls	r3, r3, #21
 800598e:	4013      	ands	r3, r2
 8005990:	d110      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005992:	4b54      	ldr	r3, [pc, #336]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	4b53      	ldr	r3, [pc, #332]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005998:	2180      	movs	r1, #128	; 0x80
 800599a:	0549      	lsls	r1, r1, #21
 800599c:	430a      	orrs	r2, r1
 800599e:	61da      	str	r2, [r3, #28]
 80059a0:	4b50      	ldr	r3, [pc, #320]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	055b      	lsls	r3, r3, #21
 80059a8:	4013      	ands	r3, r2
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ae:	183b      	adds	r3, r7, r0
 80059b0:	2201      	movs	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b4:	4b4c      	ldr	r3, [pc, #304]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4013      	ands	r3, r2
 80059be:	d11a      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c0:	4b49      	ldr	r3, [pc, #292]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b48      	ldr	r3, [pc, #288]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	0049      	lsls	r1, r1, #1
 80059ca:	430a      	orrs	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ce:	f7fe faff 	bl	8003fd0 <HAL_GetTick>
 80059d2:	0003      	movs	r3, r0
 80059d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d6:	e008      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d8:	f7fe fafa 	bl	8003fd0 <HAL_GetTick>
 80059dc:	0002      	movs	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e077      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ea:	4b3f      	ldr	r3, [pc, #252]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4013      	ands	r3, r2
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059f6:	4b3b      	ldr	r3, [pc, #236]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80059f8:	6a1a      	ldr	r2, [r3, #32]
 80059fa:	23c0      	movs	r3, #192	; 0xc0
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4013      	ands	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d034      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	23c0      	movs	r3, #192	; 0xc0
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4013      	ands	r3, r2
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d02c      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a18:	4b32      	ldr	r3, [pc, #200]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	4a33      	ldr	r2, [pc, #204]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a22:	4b30      	ldr	r3, [pc, #192]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	0249      	lsls	r1, r1, #9
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a30:	4b2c      	ldr	r3, [pc, #176]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a36:	492e      	ldr	r1, [pc, #184]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005a38:	400a      	ands	r2, r1
 8005a3a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a3c:	4b29      	ldr	r3, [pc, #164]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	4013      	ands	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4a:	f7fe fac1 	bl	8003fd0 <HAL_GetTick>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a52:	e009      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a54:	f7fe fabc 	bl	8003fd0 <HAL_GetTick>
 8005a58:	0002      	movs	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e038      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a72:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4a1d      	ldr	r2, [pc, #116]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a82:	430a      	orrs	r2, r1
 8005a84:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a86:	2317      	movs	r3, #23
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d105      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a90:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005a96:	4918      	ldr	r1, [pc, #96]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005a98:	400a      	ands	r2, r1
 8005a9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d009      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	2203      	movs	r2, #3
 8005aac:	4393      	bics	r3, r2
 8005aae:	0019      	movs	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	2210      	movs	r2, #16
 8005aca:	4393      	bics	r3, r2
 8005acc:	0019      	movs	r1, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b006      	add	sp, #24
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	40007000 	.word	0x40007000
 8005aec:	fffffcff 	.word	0xfffffcff
 8005af0:	fffeffff 	.word	0xfffeffff
 8005af4:	00001388 	.word	0x00001388
 8005af8:	efffffff 	.word	0xefffffff

08005afc <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e081      	b.n	8005c12 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7f5b      	ldrb	r3, [r3, #29]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f7fe f903 	bl	8003d2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	22ca      	movs	r2, #202	; 0xca
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2253      	movs	r2, #83	; 0x53
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 faa9 	bl	8006096 <RTC_EnterInitMode>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2204      	movs	r2, #4
 8005b54:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e05b      	b.n	8005c12 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	492d      	ldr	r1, [pc, #180]	; (8005c1c <HAL_RTC_Init+0x120>)
 8005b66:	400a      	ands	r2, r1
 8005b68:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6899      	ldr	r1, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68d2      	ldr	r2, [r2, #12]
 8005b90:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6919      	ldr	r1, [r3, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	041a      	lsls	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2180      	movs	r1, #128	; 0x80
 8005bb2:	438a      	bics	r2, r1
 8005bb4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d10e      	bne.n	8005be0 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f000 fa3d 	bl	8006044 <HAL_RTC_WaitForSynchro>
 8005bca:	1e03      	subs	r3, r0, #0
 8005bcc:	d008      	beq.n	8005be0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	22ff      	movs	r2, #255	; 0xff
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e018      	b.n	8005c12 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	490d      	ldr	r1, [pc, #52]	; (8005c20 <HAL_RTC_Init+0x124>)
 8005bec:	400a      	ands	r2, r1
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
  }
}
 8005c12:	0018      	movs	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b002      	add	sp, #8
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	ff8fffbf 	.word	0xff8fffbf
 8005c20:	fffbffff 	.word	0xfffbffff

08005c24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	7f1b      	ldrb	r3, [r3, #28]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_RTC_SetTime+0x1c>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e0a5      	b.n	8005d8c <HAL_RTC_SetTime+0x168>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d125      	bne.n	8005c9e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2240      	movs	r2, #64	; 0x40
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d102      	bne.n	8005c64 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2200      	movs	r2, #0
 8005c62:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 fa40 	bl	80060ee <RTC_ByteToBcd2>
 8005c6e:	0003      	movs	r3, r0
 8005c70:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	0018      	movs	r0, r3
 8005c78:	f000 fa39 	bl	80060ee <RTC_ByteToBcd2>
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c80:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	789b      	ldrb	r3, [r3, #2]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f000 fa31 	bl	80060ee <RTC_ByteToBcd2>
 8005c8c:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c8e:	0022      	movs	r2, r4
 8005c90:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	78db      	ldrb	r3, [r3, #3]
 8005c96:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e017      	b.n	8005cce <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2240      	movs	r2, #64	; 0x40
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d102      	bne.n	8005cb0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2200      	movs	r2, #0
 8005cae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cbc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005cc2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	78db      	ldrb	r3, [r3, #3]
 8005cc8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	22ca      	movs	r2, #202	; 0xca
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2253      	movs	r2, #83	; 0x53
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 f9d8 	bl	8006096 <RTC_EnterInitMode>
 8005ce6:	1e03      	subs	r3, r0, #0
 8005ce8:	d00b      	beq.n	8005d02 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	22ff      	movs	r2, #255	; 0xff
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e044      	b.n	8005d8c <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4922      	ldr	r1, [pc, #136]	; (8005d94 <HAL_RTC_SetTime+0x170>)
 8005d0a:	400a      	ands	r2, r1
 8005d0c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	491f      	ldr	r1, [pc, #124]	; (8005d98 <HAL_RTC_SetTime+0x174>)
 8005d1a:	400a      	ands	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6899      	ldr	r1, [r3, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	438a      	bics	r2, r1
 8005d44:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d111      	bne.n	8005d76 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f000 f975 	bl	8006044 <HAL_RTC_WaitForSynchro>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d00b      	beq.n	8005d76 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2204      	movs	r2, #4
 8005d6a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e00a      	b.n	8005d8c <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	22ff      	movs	r2, #255	; 0xff
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
  }
}
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b007      	add	sp, #28
 8005d92:	bd90      	pop	{r4, r7, pc}
 8005d94:	007f7f7f 	.word	0x007f7f7f
 8005d98:	fffbffff 	.word	0xfffbffff

08005d9c <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	045b      	lsls	r3, r3, #17
 8005dbe:	0c5a      	lsrs	r2, r3, #17
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a22      	ldr	r2, [pc, #136]	; (8005e54 <HAL_RTC_GetTime+0xb8>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	0c1b      	lsrs	r3, r3, #16
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	223f      	movs	r2, #63	; 0x3f
 8005dd8:	4013      	ands	r3, r2
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	227f      	movs	r2, #127	; 0x7f
 8005de8:	4013      	ands	r3, r2
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	227f      	movs	r2, #127	; 0x7f
 8005df6:	4013      	ands	r3, r2
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2240      	movs	r2, #64	; 0x40
 8005e06:	4013      	ands	r3, r2
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11a      	bne.n	8005e4a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f000 f989 	bl	8006130 <RTC_Bcd2ToByte>
 8005e1e:	0003      	movs	r3, r0
 8005e20:	001a      	movs	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f000 f980 	bl	8006130 <RTC_Bcd2ToByte>
 8005e30:	0003      	movs	r3, r0
 8005e32:	001a      	movs	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	789b      	ldrb	r3, [r3, #2]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 f977 	bl	8006130 <RTC_Bcd2ToByte>
 8005e42:	0003      	movs	r3, r0
 8005e44:	001a      	movs	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b006      	add	sp, #24
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	007f7f7f 	.word	0x007f7f7f

08005e58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	7f1b      	ldrb	r3, [r3, #28]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_RTC_SetDate+0x1c>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e091      	b.n	8005f98 <HAL_RTC_SetDate+0x140>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10e      	bne.n	8005ea4 <HAL_RTC_SetDate+0x4c>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d008      	beq.n	8005ea4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	2210      	movs	r2, #16
 8005e98:	4393      	bics	r3, r2
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	330a      	adds	r3, #10
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11c      	bne.n	8005ee4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	78db      	ldrb	r3, [r3, #3]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 f91d 	bl	80060ee <RTC_ByteToBcd2>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f000 f916 	bl	80060ee <RTC_ByteToBcd2>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ec6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	789b      	ldrb	r3, [r3, #2]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f000 f90e 	bl	80060ee <RTC_ByteToBcd2>
 8005ed2:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005ed4:	0022      	movs	r2, r4
 8005ed6:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e00e      	b.n	8005f02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	78db      	ldrb	r3, [r3, #3]
 8005ee8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ef0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ef6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	22ca      	movs	r2, #202	; 0xca
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2253      	movs	r2, #83	; 0x53
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f000 f8be 	bl	8006096 <RTC_EnterInitMode>
 8005f1a:	1e03      	subs	r3, r0, #0
 8005f1c:	d00b      	beq.n	8005f36 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	22ff      	movs	r2, #255	; 0xff
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e030      	b.n	8005f98 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4918      	ldr	r1, [pc, #96]	; (8005fa0 <HAL_RTC_SetDate+0x148>)
 8005f3e:	400a      	ands	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2180      	movs	r1, #128	; 0x80
 8005f4e:	438a      	bics	r2, r1
 8005f50:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d111      	bne.n	8005f82 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f000 f86f 	bl	8006044 <HAL_RTC_WaitForSynchro>
 8005f66:	1e03      	subs	r3, r0, #0
 8005f68:	d00b      	beq.n	8005f82 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	22ff      	movs	r2, #255	; 0xff
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2204      	movs	r2, #4
 8005f76:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e00a      	b.n	8005f98 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	22ff      	movs	r2, #255	; 0xff
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f96:	2300      	movs	r3, #0
  }
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b007      	add	sp, #28
 8005f9e:	bd90      	pop	{r4, r7, pc}
 8005fa0:	00ffff3f 	.word	0x00ffff3f

08005fa4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4a21      	ldr	r2, [pc, #132]	; (8006040 <HAL_RTC_GetDate+0x9c>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	0a1b      	lsrs	r3, r3, #8
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	221f      	movs	r2, #31
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	223f      	movs	r2, #63	; 0x3f
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	0b5b      	lsrs	r3, r3, #13
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2207      	movs	r2, #7
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d11a      	bne.n	8006034 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	78db      	ldrb	r3, [r3, #3]
 8006002:	0018      	movs	r0, r3
 8006004:	f000 f894 	bl	8006130 <RTC_Bcd2ToByte>
 8006008:	0003      	movs	r3, r0
 800600a:	001a      	movs	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	0018      	movs	r0, r3
 8006016:	f000 f88b 	bl	8006130 <RTC_Bcd2ToByte>
 800601a:	0003      	movs	r3, r0
 800601c:	001a      	movs	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	789b      	ldrb	r3, [r3, #2]
 8006026:	0018      	movs	r0, r3
 8006028:	f000 f882 	bl	8006130 <RTC_Bcd2ToByte>
 800602c:	0003      	movs	r3, r0
 800602e:	001a      	movs	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	0018      	movs	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	b006      	add	sp, #24
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	00ffff3f 	.word	0x00ffff3f

08006044 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	21a0      	movs	r1, #160	; 0xa0
 800605c:	438a      	bics	r2, r1
 800605e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006060:	f7fd ffb6 	bl	8003fd0 <HAL_GetTick>
 8006064:	0003      	movs	r3, r0
 8006066:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006068:	e00a      	b.n	8006080 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800606a:	f7fd ffb1 	bl	8003fd0 <HAL_GetTick>
 800606e:	0002      	movs	r2, r0
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	1ad2      	subs	r2, r2, r3
 8006074:	23fa      	movs	r3, #250	; 0xfa
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	429a      	cmp	r2, r3
 800607a:	d901      	bls.n	8006080 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e006      	b.n	800608e <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	4013      	ands	r3, r2
 800608a:	d0ee      	beq.n	800606a <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	0018      	movs	r0, r3
 8006090:	46bd      	mov	sp, r7
 8006092:	b004      	add	sp, #16
 8006094:	bd80      	pop	{r7, pc}

08006096 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2240      	movs	r2, #64	; 0x40
 80060aa:	4013      	ands	r3, r2
 80060ac:	d11a      	bne.n	80060e4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2201      	movs	r2, #1
 80060b4:	4252      	negs	r2, r2
 80060b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80060b8:	f7fd ff8a 	bl	8003fd0 <HAL_GetTick>
 80060bc:	0003      	movs	r3, r0
 80060be:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060c0:	e00a      	b.n	80060d8 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060c2:	f7fd ff85 	bl	8003fd0 <HAL_GetTick>
 80060c6:	0002      	movs	r2, r0
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	23fa      	movs	r3, #250	; 0xfa
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d901      	bls.n	80060d8 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e006      	b.n	80060e6 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	4013      	ands	r3, r2
 80060e2:	d0ee      	beq.n	80060c2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	0018      	movs	r0, r3
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b004      	add	sp, #16
 80060ec:	bd80      	pop	{r7, pc}

080060ee <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	0002      	movs	r2, r0
 80060f6:	1dfb      	adds	r3, r7, #7
 80060f8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80060fe:	e007      	b.n	8006110 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006106:	1dfb      	adds	r3, r7, #7
 8006108:	1dfa      	adds	r2, r7, #7
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	3a0a      	subs	r2, #10
 800610e:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8006110:	1dfb      	adds	r3, r7, #7
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b09      	cmp	r3, #9
 8006116:	d8f3      	bhi.n	8006100 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	b2da      	uxtb	r2, r3
 8006120:	1dfb      	adds	r3, r7, #7
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	b2db      	uxtb	r3, r3
}
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b004      	add	sp, #16
 800612e:	bd80      	pop	{r7, pc}

08006130 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	0002      	movs	r2, r0
 8006138:	1dfb      	adds	r3, r7, #7
 800613a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8006140:	1dfb      	adds	r3, r7, #7
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	b2db      	uxtb	r3, r3
 8006148:	001a      	movs	r2, r3
 800614a:	0013      	movs	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	189b      	adds	r3, r3, r2
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8006154:	1dfb      	adds	r3, r7, #7
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	220f      	movs	r2, #15
 800615a:	4013      	ands	r3, r2
 800615c:	b2da      	uxtb	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	18d3      	adds	r3, r2, r3
 8006164:	b2db      	uxtb	r3, r3
}
 8006166:	0018      	movs	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	b004      	add	sp, #16
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e0a8      	b.n	80062d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	2382      	movs	r3, #130	; 0x82
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	429a      	cmp	r2, r3
 8006194:	d009      	beq.n	80061aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	61da      	str	r2, [r3, #28]
 800619c:	e005      	b.n	80061aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	225d      	movs	r2, #93	; 0x5d
 80061b4:	5c9b      	ldrb	r3, [r3, r2]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d107      	bne.n	80061cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	225c      	movs	r2, #92	; 0x5c
 80061c0:	2100      	movs	r1, #0
 80061c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	0018      	movs	r0, r3
 80061c8:	f7fd fdc8 	bl	8003d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	225d      	movs	r2, #93	; 0x5d
 80061d0:	2102      	movs	r1, #2
 80061d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2140      	movs	r1, #64	; 0x40
 80061e0:	438a      	bics	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	23e0      	movs	r3, #224	; 0xe0
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d902      	bls.n	80061f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e002      	b.n	80061fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	015b      	lsls	r3, r3, #5
 80061fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	23f0      	movs	r3, #240	; 0xf0
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	429a      	cmp	r2, r3
 8006206:	d008      	beq.n	800621a <HAL_SPI_Init+0xaa>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	23e0      	movs	r3, #224	; 0xe0
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	429a      	cmp	r2, r3
 8006212:	d002      	beq.n	800621a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	2382      	movs	r3, #130	; 0x82
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	401a      	ands	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6899      	ldr	r1, [r3, #8]
 8006228:	2384      	movs	r3, #132	; 0x84
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	400b      	ands	r3, r1
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2102      	movs	r1, #2
 8006236:	400b      	ands	r3, r1
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	2101      	movs	r1, #1
 8006240:	400b      	ands	r3, r1
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6999      	ldr	r1, [r3, #24]
 8006248:	2380      	movs	r3, #128	; 0x80
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	400b      	ands	r3, r1
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	2138      	movs	r1, #56	; 0x38
 8006256:	400b      	ands	r3, r1
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	2180      	movs	r1, #128	; 0x80
 8006260:	400b      	ands	r3, r1
 8006262:	431a      	orrs	r2, r3
 8006264:	0011      	movs	r1, r2
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	401a      	ands	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	2204      	movs	r2, #4
 8006280:	401a      	ands	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2110      	movs	r1, #16
 8006288:	400b      	ands	r3, r1
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006290:	2108      	movs	r1, #8
 8006292:	400b      	ands	r3, r1
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68d9      	ldr	r1, [r3, #12]
 800629a:	23f0      	movs	r3, #240	; 0xf0
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	400b      	ands	r3, r1
 80062a0:	431a      	orrs	r2, r3
 80062a2:	0011      	movs	r1, r2
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	015b      	lsls	r3, r3, #5
 80062aa:	401a      	ands	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69da      	ldr	r2, [r3, #28]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4907      	ldr	r1, [pc, #28]	; (80062dc <HAL_SPI_Init+0x16c>)
 80062c0:	400a      	ands	r2, r1
 80062c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	225d      	movs	r2, #93	; 0x5d
 80062ce:	2101      	movs	r1, #1
 80062d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	0018      	movs	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b004      	add	sp, #16
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	fffff7ff 	.word	0xfffff7ff

080062e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	1dbb      	adds	r3, r7, #6
 80062ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062f0:	231f      	movs	r3, #31
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	225c      	movs	r2, #92	; 0x5c
 80062fc:	5c9b      	ldrb	r3, [r3, r2]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_SPI_Transmit+0x26>
 8006302:	2302      	movs	r3, #2
 8006304:	e140      	b.n	8006588 <HAL_SPI_Transmit+0x2a8>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	225c      	movs	r2, #92	; 0x5c
 800630a:	2101      	movs	r1, #1
 800630c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800630e:	f7fd fe5f 	bl	8003fd0 <HAL_GetTick>
 8006312:	0003      	movs	r3, r0
 8006314:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006316:	2316      	movs	r3, #22
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	1dba      	adds	r2, r7, #6
 800631c:	8812      	ldrh	r2, [r2, #0]
 800631e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	225d      	movs	r2, #93	; 0x5d
 8006324:	5c9b      	ldrb	r3, [r3, r2]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d004      	beq.n	8006336 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800632c:	231f      	movs	r3, #31
 800632e:	18fb      	adds	r3, r7, r3
 8006330:	2202      	movs	r2, #2
 8006332:	701a      	strb	r2, [r3, #0]
    goto error;
 8006334:	e11d      	b.n	8006572 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_SPI_Transmit+0x64>
 800633c:	1dbb      	adds	r3, r7, #6
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006344:	231f      	movs	r3, #31
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]
    goto error;
 800634c:	e111      	b.n	8006572 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	225d      	movs	r2, #93	; 0x5d
 8006352:	2103      	movs	r1, #3
 8006354:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1dba      	adds	r2, r7, #6
 8006366:	8812      	ldrh	r2, [r2, #0]
 8006368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1dba      	adds	r2, r7, #6
 800636e:	8812      	ldrh	r2, [r2, #0]
 8006370:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2244      	movs	r2, #68	; 0x44
 800637c:	2100      	movs	r1, #0
 800637e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2246      	movs	r2, #70	; 0x46
 8006384:	2100      	movs	r1, #0
 8006386:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	429a      	cmp	r2, r3
 800639e:	d110      	bne.n	80063c2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2140      	movs	r1, #64	; 0x40
 80063ac:	438a      	bics	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	01c9      	lsls	r1, r1, #7
 80063be:	430a      	orrs	r2, r1
 80063c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2240      	movs	r2, #64	; 0x40
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d007      	beq.n	80063e0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2140      	movs	r1, #64	; 0x40
 80063dc:	430a      	orrs	r2, r1
 80063de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	23e0      	movs	r3, #224	; 0xe0
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d94e      	bls.n	800648a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <HAL_SPI_Transmit+0x11e>
 80063f4:	2316      	movs	r3, #22
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d13f      	bne.n	800647e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	881a      	ldrh	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	1c9a      	adds	r2, r3, #2
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006422:	e02c      	b.n	800647e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2202      	movs	r2, #2
 800642c:	4013      	ands	r3, r2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d112      	bne.n	8006458 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	881a      	ldrh	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	1c9a      	adds	r2, r3, #2
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006456:	e012      	b.n	800647e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006458:	f7fd fdba 	bl	8003fd0 <HAL_GetTick>
 800645c:	0002      	movs	r2, r0
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d802      	bhi.n	800646e <HAL_SPI_Transmit+0x18e>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	d102      	bne.n	8006474 <HAL_SPI_Transmit+0x194>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006474:	231f      	movs	r3, #31
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	2203      	movs	r2, #3
 800647a:	701a      	strb	r2, [r3, #0]
          goto error;
 800647c:	e079      	b.n	8006572 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1cd      	bne.n	8006424 <HAL_SPI_Transmit+0x144>
 8006488:	e04f      	b.n	800652a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <HAL_SPI_Transmit+0x1bc>
 8006492:	2316      	movs	r3, #22
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d141      	bne.n	8006520 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	7812      	ldrb	r2, [r2, #0]
 80064a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80064c2:	e02d      	b.n	8006520 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2202      	movs	r2, #2
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d113      	bne.n	80064fa <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064f8:	e012      	b.n	8006520 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064fa:	f7fd fd69 	bl	8003fd0 <HAL_GetTick>
 80064fe:	0002      	movs	r2, r0
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d802      	bhi.n	8006510 <HAL_SPI_Transmit+0x230>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	d102      	bne.n	8006516 <HAL_SPI_Transmit+0x236>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006516:	231f      	movs	r3, #31
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	2203      	movs	r2, #3
 800651c:	701a      	strb	r2, [r3, #0]
          goto error;
 800651e:	e028      	b.n	8006572 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1cc      	bne.n	80064c4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	0018      	movs	r0, r3
 8006532:	f000 f95d 	bl	80067f0 <SPI_EndRxTxTransaction>
 8006536:	1e03      	subs	r3, r0, #0
 8006538:	d002      	beq.n	8006540 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006548:	2300      	movs	r3, #0
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006566:	231f      	movs	r3, #31
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e000      	b.n	8006572 <HAL_SPI_Transmit+0x292>
  }

error:
 8006570:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	225d      	movs	r2, #93	; 0x5d
 8006576:	2101      	movs	r1, #1
 8006578:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	225c      	movs	r2, #92	; 0x5c
 800657e:	2100      	movs	r1, #0
 8006580:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006582:	231f      	movs	r3, #31
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	781b      	ldrb	r3, [r3, #0]
}
 8006588:	0018      	movs	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	b008      	add	sp, #32
 800658e:	bd80      	pop	{r7, pc}

08006590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	1dfb      	adds	r3, r7, #7
 800659e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065a0:	f7fd fd16 	bl	8003fd0 <HAL_GetTick>
 80065a4:	0002      	movs	r2, r0
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	18d3      	adds	r3, r2, r3
 80065ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065b0:	f7fd fd0e 	bl	8003fd0 <HAL_GetTick>
 80065b4:	0003      	movs	r3, r0
 80065b6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065b8:	4b3a      	ldr	r3, [pc, #232]	; (80066a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	015b      	lsls	r3, r3, #5
 80065be:	0d1b      	lsrs	r3, r3, #20
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	4353      	muls	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065c6:	e058      	b.n	800667a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	d055      	beq.n	800667a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065ce:	f7fd fcff 	bl	8003fd0 <HAL_GetTick>
 80065d2:	0002      	movs	r2, r0
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d902      	bls.n	80065e4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d142      	bne.n	800666a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	21e0      	movs	r1, #224	; 0xe0
 80065f0:	438a      	bics	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	2382      	movs	r3, #130	; 0x82
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d113      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	429a      	cmp	r2, r3
 800660a:	d005      	beq.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	2380      	movs	r3, #128	; 0x80
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	429a      	cmp	r2, r3
 8006616:	d107      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2140      	movs	r1, #64	; 0x40
 8006624:	438a      	bics	r2, r1
 8006626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	019b      	lsls	r3, r3, #6
 8006630:	429a      	cmp	r2, r3
 8006632:	d110      	bne.n	8006656 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	491a      	ldr	r1, [pc, #104]	; (80066a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006640:	400a      	ands	r2, r1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2180      	movs	r1, #128	; 0x80
 8006650:	0189      	lsls	r1, r1, #6
 8006652:	430a      	orrs	r2, r1
 8006654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	225d      	movs	r2, #93	; 0x5d
 800665a:	2101      	movs	r1, #1
 800665c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	225c      	movs	r2, #92	; 0x5c
 8006662:	2100      	movs	r1, #0
 8006664:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e017      	b.n	800669a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	3b01      	subs	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	4013      	ands	r3, r2
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	425a      	negs	r2, r3
 800668a:	4153      	adcs	r3, r2
 800668c:	b2db      	uxtb	r3, r3
 800668e:	001a      	movs	r2, r3
 8006690:	1dfb      	adds	r3, r7, #7
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d197      	bne.n	80065c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	0018      	movs	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	b008      	add	sp, #32
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	20000280 	.word	0x20000280
 80066a8:	ffffdfff 	.word	0xffffdfff

080066ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066ba:	2317      	movs	r3, #23
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066c2:	f7fd fc85 	bl	8003fd0 <HAL_GetTick>
 80066c6:	0002      	movs	r2, r0
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	18d3      	adds	r3, r2, r3
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80066d2:	f7fd fc7d 	bl	8003fd0 <HAL_GetTick>
 80066d6:	0003      	movs	r3, r0
 80066d8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066e2:	4b41      	ldr	r3, [pc, #260]	; (80067e8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	0013      	movs	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	189b      	adds	r3, r3, r2
 80066ec:	00da      	lsls	r2, r3, #3
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	0d1b      	lsrs	r3, r3, #20
 80066f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f4:	4353      	muls	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066f8:	e068      	b.n	80067cc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	23c0      	movs	r3, #192	; 0xc0
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	429a      	cmp	r2, r3
 8006702:	d10a      	bne.n	800671a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d107      	bne.n	800671a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	2117      	movs	r1, #23
 8006712:	187b      	adds	r3, r7, r1
 8006714:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006716:	187b      	adds	r3, r7, r1
 8006718:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	d055      	beq.n	80067cc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006720:	f7fd fc56 	bl	8003fd0 <HAL_GetTick>
 8006724:	0002      	movs	r2, r0
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	d902      	bls.n	8006736 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	d142      	bne.n	80067bc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	21e0      	movs	r1, #224	; 0xe0
 8006742:	438a      	bics	r2, r1
 8006744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	2382      	movs	r3, #130	; 0x82
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	429a      	cmp	r2, r3
 8006750:	d113      	bne.n	800677a <SPI_WaitFifoStateUntilTimeout+0xce>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	2380      	movs	r3, #128	; 0x80
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	429a      	cmp	r2, r3
 800675c:	d005      	beq.n	800676a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	429a      	cmp	r2, r3
 8006768:	d107      	bne.n	800677a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2140      	movs	r1, #64	; 0x40
 8006776:	438a      	bics	r2, r1
 8006778:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	019b      	lsls	r3, r3, #6
 8006782:	429a      	cmp	r2, r3
 8006784:	d110      	bne.n	80067a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4916      	ldr	r1, [pc, #88]	; (80067ec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006792:	400a      	ands	r2, r1
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2180      	movs	r1, #128	; 0x80
 80067a2:	0189      	lsls	r1, r1, #6
 80067a4:	430a      	orrs	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	225d      	movs	r2, #93	; 0x5d
 80067ac:	2101      	movs	r1, #1
 80067ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	225c      	movs	r2, #92	; 0x5c
 80067b4:	2100      	movs	r1, #0
 80067b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e010      	b.n	80067de <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	4013      	ands	r3, r2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d18e      	bne.n	80066fa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b00a      	add	sp, #40	; 0x28
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	20000280 	.word	0x20000280
 80067ec:	ffffdfff 	.word	0xffffdfff

080067f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	23c0      	movs	r3, #192	; 0xc0
 8006800:	0159      	lsls	r1, r3, #5
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	0013      	movs	r3, r2
 800680a:	2200      	movs	r2, #0
 800680c:	f7ff ff4e 	bl	80066ac <SPI_WaitFifoStateUntilTimeout>
 8006810:	1e03      	subs	r3, r0, #0
 8006812:	d007      	beq.n	8006824 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006818:	2220      	movs	r2, #32
 800681a:	431a      	orrs	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e027      	b.n	8006874 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	0013      	movs	r3, r2
 800682e:	2200      	movs	r2, #0
 8006830:	2180      	movs	r1, #128	; 0x80
 8006832:	f7ff fead 	bl	8006590 <SPI_WaitFlagStateUntilTimeout>
 8006836:	1e03      	subs	r3, r0, #0
 8006838:	d007      	beq.n	800684a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683e:	2220      	movs	r2, #32
 8006840:	431a      	orrs	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e014      	b.n	8006874 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	23c0      	movs	r3, #192	; 0xc0
 800684e:	00d9      	lsls	r1, r3, #3
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	0013      	movs	r3, r2
 8006858:	2200      	movs	r2, #0
 800685a:	f7ff ff27 	bl	80066ac <SPI_WaitFifoStateUntilTimeout>
 800685e:	1e03      	subs	r3, r0, #0
 8006860:	d007      	beq.n	8006872 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006866:	2220      	movs	r2, #32
 8006868:	431a      	orrs	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e000      	b.n	8006874 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b004      	add	sp, #16
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e090      	b.n	80069b2 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	223d      	movs	r2, #61	; 0x3d
 8006894:	5c9b      	ldrb	r3, [r3, r2]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d107      	bne.n	80068ac <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	223c      	movs	r2, #60	; 0x3c
 80068a0:	2100      	movs	r1, #0
 80068a2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7fd faa4 	bl	8003df4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	223d      	movs	r2, #61	; 0x3d
 80068b0:	2102      	movs	r1, #2
 80068b2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	493f      	ldr	r1, [pc, #252]	; (80069bc <HAL_TIM_Encoder_Init+0x140>)
 80068c0:	400a      	ands	r2, r1
 80068c2:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	0019      	movs	r1, r3
 80068ce:	0010      	movs	r0, r2
 80068d0:	f000 f920 	bl	8006b14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	4a31      	ldr	r2, [pc, #196]	; (80069c0 <HAL_TIM_Encoder_Init+0x144>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	4313      	orrs	r3, r2
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4a2c      	ldr	r2, [pc, #176]	; (80069c4 <HAL_TIM_Encoder_Init+0x148>)
 8006914:	4013      	ands	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4a2b      	ldr	r2, [pc, #172]	; (80069c8 <HAL_TIM_Encoder_Init+0x14c>)
 800691c:	4013      	ands	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	4313      	orrs	r3, r2
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	011a      	lsls	r2, r3, #4
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	4313      	orrs	r3, r2
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2222      	movs	r2, #34	; 0x22
 800694a:	4393      	bics	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2288      	movs	r2, #136	; 0x88
 8006952:	4393      	bics	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	4313      	orrs	r3, r2
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2246      	movs	r2, #70	; 0x46
 8006984:	2101      	movs	r1, #1
 8006986:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	223e      	movs	r2, #62	; 0x3e
 800698c:	2101      	movs	r1, #1
 800698e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	223f      	movs	r2, #63	; 0x3f
 8006994:	2101      	movs	r1, #1
 8006996:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2242      	movs	r2, #66	; 0x42
 800699c:	2101      	movs	r1, #1
 800699e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2243      	movs	r2, #67	; 0x43
 80069a4:	2101      	movs	r1, #1
 80069a6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	223d      	movs	r2, #61	; 0x3d
 80069ac:	2101      	movs	r1, #1
 80069ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b006      	add	sp, #24
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	ffffbff8 	.word	0xffffbff8
 80069c0:	fffffcfc 	.word	0xfffffcfc
 80069c4:	fffff3f3 	.word	0xfffff3f3
 80069c8:	ffff0f0f 	.word	0xffff0f0f

080069cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069d6:	200f      	movs	r0, #15
 80069d8:	183b      	adds	r3, r7, r0
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	213e      	movs	r1, #62	; 0x3e
 80069de:	5c52      	ldrb	r2, [r2, r1]
 80069e0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069e2:	230e      	movs	r3, #14
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	213f      	movs	r1, #63	; 0x3f
 80069ea:	5c52      	ldrb	r2, [r2, r1]
 80069ec:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069ee:	240d      	movs	r4, #13
 80069f0:	193b      	adds	r3, r7, r4
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	2142      	movs	r1, #66	; 0x42
 80069f6:	5c52      	ldrb	r2, [r2, r1]
 80069f8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069fa:	230c      	movs	r3, #12
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	2143      	movs	r1, #67	; 0x43
 8006a02:	5c52      	ldrb	r2, [r2, r1]
 8006a04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d112      	bne.n	8006a32 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a0c:	183b      	adds	r3, r7, r0
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d103      	bne.n	8006a1c <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a14:	193b      	adds	r3, r7, r4
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d001      	beq.n	8006a20 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e075      	b.n	8006b0c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	223e      	movs	r2, #62	; 0x3e
 8006a24:	2102      	movs	r1, #2
 8006a26:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2242      	movs	r2, #66	; 0x42
 8006a2c:	2102      	movs	r1, #2
 8006a2e:	5499      	strb	r1, [r3, r2]
 8006a30:	e03d      	b.n	8006aae <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d114      	bne.n	8006a62 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a38:	230e      	movs	r3, #14
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d104      	bne.n	8006a4c <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a42:	230c      	movs	r3, #12
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d001      	beq.n	8006a50 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e05d      	b.n	8006b0c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	223f      	movs	r2, #63	; 0x3f
 8006a54:	2102      	movs	r1, #2
 8006a56:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2243      	movs	r2, #67	; 0x43
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	5499      	strb	r1, [r3, r2]
 8006a60:	e025      	b.n	8006aae <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a62:	230f      	movs	r3, #15
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d10e      	bne.n	8006a8a <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a6c:	230e      	movs	r3, #14
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d109      	bne.n	8006a8a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a76:	230d      	movs	r3, #13
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a80:	230c      	movs	r3, #12
 8006a82:	18fb      	adds	r3, r7, r3
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d001      	beq.n	8006a8e <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e03e      	b.n	8006b0c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	223e      	movs	r2, #62	; 0x3e
 8006a92:	2102      	movs	r1, #2
 8006a94:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	223f      	movs	r2, #63	; 0x3f
 8006a9a:	2102      	movs	r1, #2
 8006a9c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2242      	movs	r2, #66	; 0x42
 8006aa2:	2102      	movs	r1, #2
 8006aa4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2243      	movs	r2, #67	; 0x43
 8006aaa:	2102      	movs	r1, #2
 8006aac:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_TIM_Encoder_Start+0xf0>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d008      	beq.n	8006acc <HAL_TIM_Encoder_Start+0x100>
 8006aba:	e00f      	b.n	8006adc <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 f891 	bl	8006bec <TIM_CCxChannelCmd>
      break;
 8006aca:	e016      	b.n	8006afa <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	2104      	movs	r1, #4
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f000 f889 	bl	8006bec <TIM_CCxChannelCmd>
      break;
 8006ada:	e00e      	b.n	8006afa <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 f881 	bl	8006bec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2201      	movs	r2, #1
 8006af0:	2104      	movs	r1, #4
 8006af2:	0018      	movs	r0, r3
 8006af4:	f000 f87a 	bl	8006bec <TIM_CCxChannelCmd>
      break;
 8006af8:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2101      	movs	r1, #1
 8006b06:	430a      	orrs	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b005      	add	sp, #20
 8006b12:	bd90      	pop	{r4, r7, pc}

08006b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a2b      	ldr	r2, [pc, #172]	; (8006bd4 <TIM_Base_SetConfig+0xc0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_Base_SetConfig+0x20>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <TIM_Base_SetConfig+0xc4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d108      	bne.n	8006b46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2270      	movs	r2, #112	; 0x70
 8006b38:	4393      	bics	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <TIM_Base_SetConfig+0xc0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00f      	beq.n	8006b6e <TIM_Base_SetConfig+0x5a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <TIM_Base_SetConfig+0xc4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0x5a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a20      	ldr	r2, [pc, #128]	; (8006bdc <TIM_Base_SetConfig+0xc8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0x5a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <TIM_Base_SetConfig+0xcc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0x5a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <TIM_Base_SetConfig+0xd0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a1d      	ldr	r2, [pc, #116]	; (8006be8 <TIM_Base_SetConfig+0xd4>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2280      	movs	r2, #128	; 0x80
 8006b84:	4393      	bics	r3, r2
 8006b86:	001a      	movs	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a0a      	ldr	r2, [pc, #40]	; (8006bd4 <TIM_Base_SetConfig+0xc0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_Base_SetConfig+0xaa>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a0b      	ldr	r2, [pc, #44]	; (8006be0 <TIM_Base_SetConfig+0xcc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_Base_SetConfig+0xaa>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a0a      	ldr	r2, [pc, #40]	; (8006be4 <TIM_Base_SetConfig+0xd0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d103      	bne.n	8006bc6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	615a      	str	r2, [r3, #20]
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b004      	add	sp, #16
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40002000 	.word	0x40002000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800
 8006be8:	fffffcff 	.word	0xfffffcff

08006bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	221f      	movs	r2, #31
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2201      	movs	r2, #1
 8006c00:	409a      	lsls	r2, r3
 8006c02:	0013      	movs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	43d2      	mvns	r2, r2
 8006c0e:	401a      	ands	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	211f      	movs	r1, #31
 8006c1c:	400b      	ands	r3, r1
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4099      	lsls	r1, r3
 8006c22:	000b      	movs	r3, r1
 8006c24:	431a      	orrs	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b006      	add	sp, #24
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	223c      	movs	r2, #60	; 0x3c
 8006c42:	5c9b      	ldrb	r3, [r3, r2]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e03c      	b.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	223c      	movs	r2, #60	; 0x3c
 8006c50:	2101      	movs	r1, #1
 8006c52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	223d      	movs	r2, #61	; 0x3d
 8006c58:	2102      	movs	r1, #2
 8006c5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2270      	movs	r2, #112	; 0x70
 8006c70:	4393      	bics	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a0f      	ldr	r2, [pc, #60]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d10c      	bne.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2280      	movs	r2, #128	; 0x80
 8006c9e:	4393      	bics	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	223d      	movs	r2, #61	; 0x3d
 8006cb8:	2101      	movs	r1, #1
 8006cba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	223c      	movs	r2, #60	; 0x3c
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	b004      	add	sp, #16
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	40012c00 	.word	0x40012c00
 8006cd4:	40000400 	.word	0x40000400

08006cd8 <__libc_init_array>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	2600      	movs	r6, #0
 8006cdc:	4d0c      	ldr	r5, [pc, #48]	; (8006d10 <__libc_init_array+0x38>)
 8006cde:	4c0d      	ldr	r4, [pc, #52]	; (8006d14 <__libc_init_array+0x3c>)
 8006ce0:	1b64      	subs	r4, r4, r5
 8006ce2:	10a4      	asrs	r4, r4, #2
 8006ce4:	42a6      	cmp	r6, r4
 8006ce6:	d109      	bne.n	8006cfc <__libc_init_array+0x24>
 8006ce8:	2600      	movs	r6, #0
 8006cea:	f000 f821 	bl	8006d30 <_init>
 8006cee:	4d0a      	ldr	r5, [pc, #40]	; (8006d18 <__libc_init_array+0x40>)
 8006cf0:	4c0a      	ldr	r4, [pc, #40]	; (8006d1c <__libc_init_array+0x44>)
 8006cf2:	1b64      	subs	r4, r4, r5
 8006cf4:	10a4      	asrs	r4, r4, #2
 8006cf6:	42a6      	cmp	r6, r4
 8006cf8:	d105      	bne.n	8006d06 <__libc_init_array+0x2e>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	00b3      	lsls	r3, r6, #2
 8006cfe:	58eb      	ldr	r3, [r5, r3]
 8006d00:	4798      	blx	r3
 8006d02:	3601      	adds	r6, #1
 8006d04:	e7ee      	b.n	8006ce4 <__libc_init_array+0xc>
 8006d06:	00b3      	lsls	r3, r6, #2
 8006d08:	58eb      	ldr	r3, [r5, r3]
 8006d0a:	4798      	blx	r3
 8006d0c:	3601      	adds	r6, #1
 8006d0e:	e7f2      	b.n	8006cf6 <__libc_init_array+0x1e>
 8006d10:	080073a8 	.word	0x080073a8
 8006d14:	080073a8 	.word	0x080073a8
 8006d18:	080073a8 	.word	0x080073a8
 8006d1c:	080073ac 	.word	0x080073ac

08006d20 <memset>:
 8006d20:	0003      	movs	r3, r0
 8006d22:	1882      	adds	r2, r0, r2
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d100      	bne.n	8006d2a <memset+0xa>
 8006d28:	4770      	bx	lr
 8006d2a:	7019      	strb	r1, [r3, #0]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	e7f9      	b.n	8006d24 <memset+0x4>

08006d30 <_init>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr

08006d3c <_fini>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d42:	bc08      	pop	{r3}
 8006d44:	469e      	mov	lr, r3
 8006d46:	4770      	bx	lr
